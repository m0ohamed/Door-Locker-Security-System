
CControl_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002a8a  00002b1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800074  00800074  00002b32  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  00002b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b61  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007365  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007615  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000925e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a149  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 0c 	call	0x1916	; 0x1916 <main>
      8a:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SetupPinDirection>:
#include "My_GPIO.h"

//pin input or output direction
//if number of port or the number of pins invalid ,do nothing
void SetupPinDirection(uint8 port_num,uint8 pin_num,uint8 direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <SetupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <SetupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <SetupPinDirection+0x2a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <SetupPinDirection+0xb0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <SetupPinDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <SetupPinDirection+0x58>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <SetupPinDirection+0x1b6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <SetupPinDirection+0x4a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <SetupPinDirection+0x108>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <SetupPinDirection+0x56>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <SetupPinDirection+0x160>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <SetupPinDirection+0x1b6>
	{
	case PORTA_ID:
		if(direction==OUTPUT_PIN)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <SetupPinDirection+0x86>
		{
		SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <SetupPinDirection+0x7c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <SetupPinDirection+0x78>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <SetupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <SetupPinDirection+0xa4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <SetupPinDirection+0xa0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <SetupPinDirection+0x1b6>
		}
		break;
	case PORTB_ID:
		if(direction==OUTPUT_PIN)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <SetupPinDirection+0xde>
				{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <SetupPinDirection+0xd4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <SetupPinDirection+0xd0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <SetupPinDirection+0x1b6>
				}
				else
				{
					CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <SetupPinDirection+0xfc>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <SetupPinDirection+0xf8>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <SetupPinDirection+0x1b6>
				}
		break;
	case PORTC_ID:
		if(direction==OUTPUT_PIN)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <SetupPinDirection+0x136>
						{
						SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <SetupPinDirection+0x12c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <SetupPinDirection+0x128>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <SetupPinDirection+0x1b6>
						}
						else
						{
							CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <SetupPinDirection+0x154>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <SetupPinDirection+0x150>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <SetupPinDirection+0x1b6>
						}
		break;
	case PORTD_ID:
		if(direction==OUTPUT_PIN)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <SetupPinDirection+0x18e>
						{
						SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <SetupPinDirection+0x184>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <SetupPinDirection+0x180>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <SetupPinDirection+0x1b6>
						}
						else
						{
							CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <SetupPinDirection+0x1ac>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <SetupPinDirection+0x1a8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
						}
		break;
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <Write_Pin>:

//pin HIGH or LOW direction
//if number of port or the number of pins invalid ,do nothing
void Write_Pin(uint8 port_num ,uint8 pin_num ,uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <Write_Pin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <Write_Pin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	3d 83       	std	Y+5, r19	; 0x05
     d28:	2c 83       	std	Y+4, r18	; 0x04
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	9d 81       	ldd	r25, Y+5	; 0x05
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <Write_Pin+0x2a>
     d34:	43 c0       	rjmp	.+134    	; 0xdbc <Write_Pin+0xb0>
     d36:	2c 81       	ldd	r18, Y+4	; 0x04
     d38:	3d 81       	ldd	r19, Y+5	; 0x05
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	2c f4       	brge	.+10     	; 0xd4a <Write_Pin+0x3e>
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	71 f0       	breq	.+28     	; 0xd64 <Write_Pin+0x58>
     d48:	bc c0       	rjmp	.+376    	; 0xec2 <Write_Pin+0x1b6>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <Write_Pin+0x4a>
     d54:	5f c0       	rjmp	.+190    	; 0xe14 <Write_Pin+0x108>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <Write_Pin+0x56>
     d60:	85 c0       	rjmp	.+266    	; 0xe6c <Write_Pin+0x160>
     d62:	af c0       	rjmp	.+350    	; 0xec2 <Write_Pin+0x1b6>
	{
	case PORTA_ID:
		if(value==LOGIC_HIGH)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <Write_Pin+0x86>
		{	SET_BIT(PORTA,pin_num);}
     d6a:	ab e3       	ldi	r26, 0x3B	; 59
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb e3       	ldi	r30, 0x3B	; 59
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <Write_Pin+0x7c>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <Write_Pin+0x78>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	98 c0       	rjmp	.+304    	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTA,pin_num);}
     d92:	ab e3       	ldi	r26, 0x3B	; 59
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e3       	ldi	r30, 0x3B	; 59
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Write_Pin+0xa4>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <Write_Pin+0xa0>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	83 c0       	rjmp	.+262    	; 0xec2 <Write_Pin+0x1b6>
		break;
	case PORTB_ID:
		if(value==LOGIC_HIGH)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	a1 f4       	brne	.+40     	; 0xdea <Write_Pin+0xde>
		{	SET_BIT(PORTB,pin_num);}
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <Write_Pin+0xd4>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <Write_Pin+0xd0>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	6c c0       	rjmp	.+216    	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTB,pin_num);}
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <Write_Pin+0xfc>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <Write_Pin+0xf8>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	57 c0       	rjmp	.+174    	; 0xec2 <Write_Pin+0x1b6>
		break;
	case PORTC_ID:
		if(value==LOGIC_HIGH)
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <Write_Pin+0x136>
		{	SET_BIT(PORTC,pin_num);}
     e1a:	a5 e3       	ldi	r26, 0x35	; 53
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e3       	ldi	r30, 0x35	; 53
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <Write_Pin+0x12c>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <Write_Pin+0x128>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	40 c0       	rjmp	.+128    	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTC,pin_num);}
     e42:	a5 e3       	ldi	r26, 0x35	; 53
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e5 e3       	ldi	r30, 0x35	; 53
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <Write_Pin+0x154>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <Write_Pin+0x150>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	2b c0       	rjmp	.+86     	; 0xec2 <Write_Pin+0x1b6>
		break;
	case PORTD_ID:
		if(value==LOGIC_HIGH)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f4       	brne	.+40     	; 0xe9a <Write_Pin+0x18e>
		{	SET_BIT(PORTD,pin_num);}
     e72:	a2 e3       	ldi	r26, 0x32	; 50
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <Write_Pin+0x184>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <Write_Pin+0x180>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTD,pin_num);}
     e9a:	a2 e3       	ldi	r26, 0x32	; 50
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <Write_Pin+0x1ac>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <Write_Pin+0x1a8>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
		break;
	}
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <Read_Pin>:
//return the value of pin_num
//if number of port or the number of pins invalid ,return 0
uint8 Read_Pin(uint8 port_num ,uint8 pin_num)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <Read_Pin+0x6>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Read_Pin+0x8>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	8a 83       	std	Y+2, r24	; 0x02
     ee2:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pinvalue=0;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3d 83       	std	Y+5, r19	; 0x05
     eee:	2c 83       	std	Y+4, r18	; 0x04
     ef0:	4c 81       	ldd	r20, Y+4	; 0x04
     ef2:	5d 81       	ldd	r21, Y+5	; 0x05
     ef4:	41 30       	cpi	r20, 0x01	; 1
     ef6:	51 05       	cpc	r21, r1
     ef8:	71 f1       	breq	.+92     	; 0xf56 <Read_Pin+0x84>
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	91 05       	cpc	r25, r1
     f02:	34 f4       	brge	.+12     	; 0xf10 <Read_Pin+0x3e>
     f04:	2c 81       	ldd	r18, Y+4	; 0x04
     f06:	3d 81       	ldd	r19, Y+5	; 0x05
     f08:	21 15       	cp	r18, r1
     f0a:	31 05       	cpc	r19, r1
     f0c:	69 f0       	breq	.+26     	; 0xf28 <Read_Pin+0x56>
     f0e:	64 c0       	rjmp	.+200    	; 0xfd8 <Read_Pin+0x106>
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	42 30       	cpi	r20, 0x02	; 2
     f16:	51 05       	cpc	r21, r1
     f18:	a1 f1       	breq	.+104    	; 0xf82 <Read_Pin+0xb0>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	91 05       	cpc	r25, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <Read_Pin+0x54>
     f24:	44 c0       	rjmp	.+136    	; 0xfae <Read_Pin+0xdc>
     f26:	58 c0       	rjmp	.+176    	; 0xfd8 <Read_Pin+0x106>
	{
	case PORTA_ID:
		if(BIT_IS_SET(PINA,pin_num)){pinvalue=1;}
     f28:	e9 e3       	ldi	r30, 0x39	; 57
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <Read_Pin+0x6e>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	8a 95       	dec	r24
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <Read_Pin+0x6a>
     f44:	ca 01       	movw	r24, r20
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	90 70       	andi	r25, 0x00	; 0
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <Read_Pin+0x7e>
     f4e:	44 c0       	rjmp	.+136    	; 0xfd8 <Read_Pin+0x106>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	41 c0       	rjmp	.+130    	; 0xfd8 <Read_Pin+0x106>
		break;
	case PORTB_ID:
		if(BIT_IS_SET(PINB,pin_num)){pinvalue=1;}
     f56:	e6 e3       	ldi	r30, 0x36	; 54
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <Read_Pin+0x9c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <Read_Pin+0x98>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	71 f1       	breq	.+92     	; 0xfd8 <Read_Pin+0x106>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	2b c0       	rjmp	.+86     	; 0xfd8 <Read_Pin+0x106>
		break;
	case PORTC_ID:
		if(BIT_IS_SET(PINC,pin_num)){pinvalue=1;}
     f82:	e3 e3       	ldi	r30, 0x33	; 51
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <Read_Pin+0xc8>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <Read_Pin+0xc4>
     f9e:	ca 01       	movw	r24, r20
     fa0:	81 70       	andi	r24, 0x01	; 1
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	88 23       	and	r24, r24
     fa6:	c1 f0       	breq	.+48     	; 0xfd8 <Read_Pin+0x106>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	15 c0       	rjmp	.+42     	; 0xfd8 <Read_Pin+0x106>
		break;
	case PORTD_ID:
		if(BIT_IS_SET(PIND,pin_num)){pinvalue=1;}
     fae:	e0 e3       	ldi	r30, 0x30	; 48
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <Read_Pin+0xf4>
     fc2:	55 95       	asr	r21
     fc4:	47 95       	ror	r20
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <Read_Pin+0xf0>
     fca:	ca 01       	movw	r24, r20
     fcc:	81 70       	andi	r24, 0x01	; 1
     fce:	90 70       	andi	r25, 0x00	; 0
     fd0:	88 23       	and	r24, r24
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <Read_Pin+0x106>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return pinvalue;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <SetupPortDirection>:

//port input or output direction
//if number of port invalid ,do nothing
void SetupPortDirection(uint8 port_num ,uint8 direction)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <SetupPortDirection+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <SetupPortDirection+0x8>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}

	switch(port_num)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3c 83       	std	Y+4, r19	; 0x04
    1002:	2b 83       	std	Y+3, r18	; 0x03
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	d1 f0       	breq	.+52     	; 0x1042 <SetupPortDirection+0x58>
    100e:	2b 81       	ldd	r18, Y+3	; 0x03
    1010:	3c 81       	ldd	r19, Y+4	; 0x04
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <SetupPortDirection+0x38>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	61 f0       	breq	.+24     	; 0x1038 <SetupPortDirection+0x4e>
    1020:	1e c0       	rjmp	.+60     	; 0x105e <SetupPortDirection+0x74>
    1022:	2b 81       	ldd	r18, Y+3	; 0x03
    1024:	3c 81       	ldd	r19, Y+4	; 0x04
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	81 f0       	breq	.+32     	; 0x104c <SetupPortDirection+0x62>
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	81 f0       	breq	.+32     	; 0x1056 <SetupPortDirection+0x6c>
    1036:	13 c0       	rjmp	.+38     	; 0x105e <SetupPortDirection+0x74>
	{
	case PORTA_ID:
		DDRA=direction;
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	80 83       	st	Z, r24
    1040:	0e c0       	rjmp	.+28     	; 0x105e <SetupPortDirection+0x74>
		break;
	case PORTB_ID:
		DDRB=direction;
    1042:	e7 e3       	ldi	r30, 0x37	; 55
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	80 83       	st	Z, r24
    104a:	09 c0       	rjmp	.+18     	; 0x105e <SetupPortDirection+0x74>
		break;
	case PORTC_ID:
		DDRC=direction;
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	80 83       	st	Z, r24
    1054:	04 c0       	rjmp	.+8      	; 0x105e <SetupPortDirection+0x74>
		break;
	case PORTD_ID:
		DDRD=direction;
    1056:	e1 e3       	ldi	r30, 0x31	; 49
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	80 83       	st	Z, r24
		break;
	}
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Write_Port>:

//port HIGH or LOW
//if number of port invalid ,do nothing
void Write_Port(uint8 port_num ,uint8 value)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <Write_Port+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <Write_Port+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}

	switch(port_num)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	d1 f0       	breq	.+52     	; 0x10c4 <Write_Port+0x58>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <Write_Port+0x38>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	61 f0       	breq	.+24     	; 0x10ba <Write_Port+0x4e>
    10a2:	1e c0       	rjmp	.+60     	; 0x10e0 <Write_Port+0x74>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	81 f0       	breq	.+32     	; 0x10ce <Write_Port+0x62>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <Write_Port+0x6c>
    10b8:	13 c0       	rjmp	.+38     	; 0x10e0 <Write_Port+0x74>
	{
	case PORTA_ID:
		PORTA=value;
    10ba:	eb e3       	ldi	r30, 0x3B	; 59
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <Write_Port+0x74>
		break;
	case PORTB_ID:
		PORTB=value;
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <Write_Port+0x74>
		break;
	case PORTC_ID:
		PORTC=value;
    10ce:	e5 e3       	ldi	r30, 0x35	; 53
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <Write_Port+0x74>
		break;
	case PORTD_ID:
		PORTD=value;
    10d8:	e2 e3       	ldi	r30, 0x32	; 50
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
		break;
	}
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <Read_Port>:

//return the vlaue of port
//if number of port invalid ,return 0
uint8 Read_Port(uint8 port_num)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <Read_Port+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <Read_Port+0x8>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portvalue=0;
    10fc:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}
	switch(port_num)
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3c 83       	std	Y+4, r19	; 0x04
    1106:	2b 83       	std	Y+3, r18	; 0x03
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	d1 f0       	breq	.+52     	; 0x1146 <Read_Port+0x58>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <Read_Port+0x38>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	61 f0       	breq	.+24     	; 0x113c <Read_Port+0x4e>
    1124:	1e c0       	rjmp	.+60     	; 0x1162 <Read_Port+0x74>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <Read_Port+0x62>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	81 f0       	breq	.+32     	; 0x115a <Read_Port+0x6c>
    113a:	13 c0       	rjmp	.+38     	; 0x1162 <Read_Port+0x74>
	{
	case PORTA_ID:
		portvalue=PINA;
    113c:	e9 e3       	ldi	r30, 0x39	; 57
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <Read_Port+0x74>
		break;
	case PORTB_ID:
		portvalue=PINB;
    1146:	e6 e3       	ldi	r30, 0x36	; 54
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <Read_Port+0x74>
		break;
	case PORTC_ID:
		portvalue=PINC;
    1150:	e3 e3       	ldi	r30, 0x33	; 51
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <Read_Port+0x74>
		break;
	case PORTD_ID:
		portvalue=PIND;
    115a:	e0 e3       	ldi	r30, 0x30	; 48
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return portvalue;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <PWM_Timer0_START>:
#include <avr/io.h>
#include "PWM.h"
void PWM_Timer0_START(uint8 set_duty_cycle)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    117e:	e2 e5       	ldi	r30, 0x52	; 82
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    1184:	ec e5       	ldi	r30, 0x5C	; 92
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	80 83       	st	Z, r24

	SetupPinDirection(PWM_PORT_ID,PWM_PIN_ID,OUTPUT_PIN);
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	63 e0       	ldi	r22, 0x03	; 3
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a e6       	ldi	r24, 0x6A	; 106
    119c:	80 83       	st	Z, r24
}
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <__vector_9>:
/*global variable to save the address of the call back function */
static void (*g_callBackPtr)(void) = Null_ptr;

/*ISR of timer 1 when overflow occurs */
ISR(TIMER1_OVF_vect)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != Null_ptr)
    11d0:	80 91 74 00 	lds	r24, 0x0074
    11d4:	90 91 75 00 	lds	r25, 0x0075
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	29 f0       	breq	.+10     	; 0x11e6 <__vector_9+0x40>
			{
				/* Call the Call Back function in the application */
				(*g_callBackPtr)();
    11dc:	e0 91 74 00 	lds	r30, 0x0074
    11e0:	f0 91 75 00 	lds	r31, 0x0075
    11e4:	09 95       	icall
			}
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__vector_7>:


/*ISR of timer 1 when compare match occurs */

ISR(TIMER1_COMPA_vect)
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != Null_ptr)
    1236:	80 91 74 00 	lds	r24, 0x0074
    123a:	90 91 75 00 	lds	r25, 0x0075
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	29 f0       	breq	.+10     	; 0x124c <__vector_7+0x40>
			{
				/* Call the Call Back function in the application */
				(*g_callBackPtr)();
    1242:	e0 91 74 00 	lds	r30, 0x0074
    1246:	f0 91 75 00 	lds	r31, 0x0075
    124a:	09 95       	icall
			}
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <Timer1_Init>:



//initialization of timer 1 with overflow and compare match modes
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <Timer1_Init+0x6>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =(uint16)Config_Ptr->initial_value;//Put the initial value in TCNT1
    1280:	ac e4       	ldi	r26, 0x4C	; 76
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	11 96       	adiw	r26, 0x01	; 1
    128e:	9c 93       	st	X, r25
    1290:	8e 93       	st	-X, r24
	OCR1AL =(Config_Ptr->compare_value);//Put the compare value in OCR1A
    1292:	aa e4       	ldi	r26, 0x4A	; 74
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	8c 93       	st	X, r24
	OCR1AH =((Config_Ptr->compare_value)>>8);//Put the compare value in OCR1A
    12a0:	ab e4       	ldi	r26, 0x4B	; 75
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e9 81       	ldd	r30, Y+1	; 0x01
    12a6:	fa 81       	ldd	r31, Y+2	; 0x02
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	89 2f       	mov	r24, r25
    12ae:	99 27       	eor	r25, r25
    12b0:	8c 93       	st	X, r24

	if((Config_Ptr->Mode)==Normal)//if overflow mode
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	85 81       	ldd	r24, Z+5	; 0x05
    12b8:	88 23       	and	r24, r24
    12ba:	d9 f4       	brne	.+54     	; 0x12f2 <Timer1_Init+0x80>
	{
		TCCR1A=0x08;//WGM10 and WGM11 are cleared.... FOC1A and FOC1B set (Non-PWM Mode)
    12bc:	ef e4       	ldi	r30, 0x4F	; 79
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	88 e0       	ldi	r24, 0x08	; 8
    12c2:	80 83       	st	Z, r24
		TCCR1B=0x00;//WGM12 and WGM13 are cleared
    12c4:	ee e4       	ldi	r30, 0x4E	; 78
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	10 82       	st	Z, r1
		TCCR1B= (TCCR1B & 0xF8) | ((uint8)(Config_Ptr->prescaler));//put the value of prescaler in CS10 ,CS11 and CS12
    12ca:	ae e4       	ldi	r26, 0x4E	; 78
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ee e4       	ldi	r30, 0x4E	; 78
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	98 2f       	mov	r25, r24
    12d6:	98 7f       	andi	r25, 0xF8	; 248
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	84 81       	ldd	r24, Z+4	; 0x04
    12de:	89 2b       	or	r24, r25
    12e0:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE1);//enable overflow interrupt
    12e2:	a9 e5       	ldi	r26, 0x59	; 89
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e9 e5       	ldi	r30, 0x59	; 89
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	84 60       	ori	r24, 0x04	; 4
    12ee:	8c 93       	st	X, r24
    12f0:	20 c0       	rjmp	.+64     	; 0x1332 <Timer1_Init+0xc0>
	}
	else if((Config_Ptr->Mode)==CTC)
    12f2:	e9 81       	ldd	r30, Y+1	; 0x01
    12f4:	fa 81       	ldd	r31, Y+2	; 0x02
    12f6:	85 81       	ldd	r24, Z+5	; 0x05
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	d9 f4       	brne	.+54     	; 0x1332 <Timer1_Init+0xc0>
	{
		TCCR1A=0x08;//WGM10 and WGM11 are cleared.... FOC1A and FOC1B set (Non-PWM Mode)
    12fc:	ef e4       	ldi	r30, 0x4F	; 79
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	88 e0       	ldi	r24, 0x08	; 8
    1302:	80 83       	st	Z, r24
		TCCR1B=0x08;//WGM12=1 and WGM13 is cleared
    1304:	ee e4       	ldi	r30, 0x4E	; 78
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	80 83       	st	Z, r24
		TCCR1B= (TCCR1B & 0xF8) | ((uint8)(Config_Ptr->prescaler));//put the value of prescaler in CS10 ,CS11 and CS12
    130c:	ae e4       	ldi	r26, 0x4E	; 78
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ee e4       	ldi	r30, 0x4E	; 78
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	98 2f       	mov	r25, r24
    1318:	98 7f       	andi	r25, 0xF8	; 248
    131a:	e9 81       	ldd	r30, Y+1	; 0x01
    131c:	fa 81       	ldd	r31, Y+2	; 0x02
    131e:	84 81       	ldd	r24, Z+4	; 0x04
    1320:	89 2b       	or	r24, r25
    1322:	8c 93       	st	X, r24
		TIMSK |=(1<< OCIE1A);//enable compare match interrupt
    1324:	a9 e5       	ldi	r26, 0x59	; 89
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e9 e5       	ldi	r30, 0x59	; 89
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	8c 93       	st	X, r24


	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Timer1_DeInit>:

//stop the timer/counter
void Timer1_DeInit(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;//No clock source
    1344:	ee e4       	ldi	r30, 0x4E	; 78
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	10 82       	st	Z, r1
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <Time1_SetCallBack>:


void Time1_SetCallBack(void (*a_Ptr) (void))
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <Time1_SetCallBack+0x6>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr=a_Ptr;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	90 93 75 00 	sts	0x0075, r25
    1366:	80 93 74 00 	sts	0x0074, r24
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <TWI_init>:
#include "twi.h"
#include "../LIB/common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <TWI_init+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (Config_Ptr->bit_rate.bit_rate);
    1382:	a0 e2       	ldi	r26, 0x20	; 32
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	81 81       	ldd	r24, Z+1	; 0x01
    138c:	8c 93       	st	X, r24
	TWSR = 0x00;
    138e:	e1 e2       	ldi	r30, 0x21	; 33
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (TWAR & 0x01) | ((Config_Ptr->address.address)<<1); // my address = 0x01 :)
    1394:	a2 e2       	ldi	r26, 0x22	; 34
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e2 e2       	ldi	r30, 0x22	; 34
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	28 2f       	mov	r18, r24
    13a0:	21 70       	andi	r18, 0x01	; 1
    13a2:	e9 81       	ldd	r30, Y+1	; 0x01
    13a4:	fa 81       	ldd	r31, Y+2	; 0x02
    13a6:	80 81       	ld	r24, Z
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	82 2b       	or	r24, r18
    13b2:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    13b4:	e6 e5       	ldi	r30, 0x56	; 86
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	84 e0       	ldi	r24, 0x04	; 4
    13ba:	80 83       	st	Z, r24
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TWI_start>:

void TWI_start(void)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    13ce:	e6 e5       	ldi	r30, 0x56	; 86
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	84 ea       	ldi	r24, 0xA4	; 164
    13d4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13d6:	e6 e5       	ldi	r30, 0x56	; 86
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	88 23       	and	r24, r24
    13de:	dc f7       	brge	.-10     	; 0x13d6 <TWI_start+0x10>
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <TWI_stop>:

void TWI_stop(void)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    13ee:	e6 e5       	ldi	r30, 0x56	; 86
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	84 e9       	ldi	r24, 0x94	; 148
    13f4:	80 83       	st	Z, r24
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1408:	e3 e2       	ldi	r30, 0x23	; 35
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1410:	e6 e5       	ldi	r30, 0x56	; 86
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	84 e8       	ldi	r24, 0x84	; 132
    1416:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1418:	e6 e5       	ldi	r30, 0x56	; 86
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	88 23       	and	r24, r24
    1420:	dc f7       	brge	.-10     	; 0x1418 <TWI_writeByte+0x1c>
}
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1432:	e6 e5       	ldi	r30, 0x56	; 86
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	84 ec       	ldi	r24, 0xC4	; 196
    1438:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    143a:	e6 e5       	ldi	r30, 0x56	; 86
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	88 23       	and	r24, r24
    1442:	dc f7       	brge	.-10     	; 0x143a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1444:	e3 e2       	ldi	r30, 0x23	; 35
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1458:	e6 e5       	ldi	r30, 0x56	; 86
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	84 e8       	ldi	r24, 0x84	; 132
    145e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1460:	e6 e5       	ldi	r30, 0x56	; 86
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	88 23       	and	r24, r24
    1468:	dc f7       	brge	.-10     	; 0x1460 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    146a:	e3 e2       	ldi	r30, 0x23	; 35
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1480:	e1 e2       	ldi	r30, 0x21	; 33
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	89 83       	std	Y+1, r24	; 0x01
    return status;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <UART_init+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <UART_init+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    14a4:	1a 82       	std	Y+2, r1	; 0x02
    14a6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (UCSRA & 0xFD) | (1<<1);
    14a8:	ab e2       	ldi	r26, 0x2B	; 43
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	eb e2       	ldi	r30, 0x2B	; 43
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	82 60       	ori	r24, 0x02	; 2
    14b4:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    14b6:	ea e2       	ldi	r30, 0x2A	; 42
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	88 e1       	ldi	r24, 0x18	; 24
    14bc:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL)  | ((UCSRC & 0xCF) | ((Config_Ptr->Parity)<<4)) | ((UCSRC & 0xF7) | ((Config_Ptr->Stop_Bit)<<3))  | ((UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1));
    14be:	a0 e4       	ldi	r26, 0x40	; 64
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e0 e4       	ldi	r30, 0x40	; 64
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	28 2f       	mov	r18, r24
    14ca:	2f 7c       	andi	r18, 0xCF	; 207
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	82 95       	swap	r24
    14d8:	92 95       	swap	r25
    14da:	90 7f       	andi	r25, 0xF0	; 240
    14dc:	98 27       	eor	r25, r24
    14de:	80 7f       	andi	r24, 0xF0	; 240
    14e0:	98 27       	eor	r25, r24
    14e2:	82 2b       	or	r24, r18
    14e4:	38 2f       	mov	r19, r24
    14e6:	30 68       	ori	r19, 0x80	; 128
    14e8:	e0 e4       	ldi	r30, 0x40	; 64
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	27 7f       	andi	r18, 0xF7	; 247
    14f2:	eb 81       	ldd	r30, Y+3	; 0x03
    14f4:	fc 81       	ldd	r31, Y+4	; 0x04
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	82 2b       	or	r24, r18
    150a:	38 2b       	or	r19, r24
    150c:	e0 e4       	ldi	r30, 0x40	; 64
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	29 7f       	andi	r18, 0xF9	; 249
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	80 81       	ld	r24, Z
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	82 2b       	or	r24, r18
    1526:	83 2b       	or	r24, r19
    1528:	8c 93       	st	X, r24


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( (Config_Ptr->BaudeRate)* 8UL))) - 1);
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	83 81       	ldd	r24, Z+3	; 0x03
    1530:	94 81       	ldd	r25, Z+4	; 0x04
    1532:	cc 01       	movw	r24, r24
    1534:	a0 e0       	ldi	r26, 0x00	; 0
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	aa 1f       	adc	r26, r26
    153e:	bb 1f       	adc	r27, r27
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	aa 1f       	adc	r26, r26
    154e:	bb 1f       	adc	r27, r27
    1550:	9c 01       	movw	r18, r24
    1552:	ad 01       	movw	r20, r26
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	92 e1       	ldi	r25, 0x12	; 18
    1558:	aa e7       	ldi	r26, 0x7A	; 122
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    1564:	da 01       	movw	r26, r20
    1566:	c9 01       	movw	r24, r18
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    156e:	e0 e4       	ldi	r30, 0x40	; 64
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	89 2f       	mov	r24, r25
    1578:	99 27       	eor	r25, r25
    157a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    157c:	e9 e2       	ldi	r30, 0x29	; 41
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	80 83       	st	Z, r24
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    159e:	eb e2       	ldi	r30, 0x2B	; 43
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	80 72       	andi	r24, 0x20	; 32
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	b9 f3       	breq	.-18     	; 0x159e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    15b0:	ec e2       	ldi	r30, 0x2C	; 44
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    15c8:	eb e2       	ldi	r30, 0x2B	; 43
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	88 23       	and	r24, r24
    15d0:	dc f7       	brge	.-10     	; 0x15c8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    15d2:	ec e2       	ldi	r30, 0x2C	; 44
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <UART_sendString+0x6>
    15e4:	0f 92       	push	r0
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	9b 83       	std	Y+3, r25	; 0x03
    15ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    15ee:	19 82       	std	Y+1, r1	; 0x01
    15f0:	0e c0       	rjmp	.+28     	; 0x160e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	fc 01       	movw	r30, r24
    15fe:	e2 0f       	add	r30, r18
    1600:	f3 1f       	adc	r31, r19
    1602:	80 81       	ld	r24, Z
    1604:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
		i++;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	fc 01       	movw	r30, r24
    161a:	e2 0f       	add	r30, r18
    161c:	f3 1f       	adc	r31, r19
    161e:	80 81       	ld	r24, Z
    1620:	88 23       	and	r24, r24
    1622:	39 f7       	brne	.-50     	; 0x15f2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <UART_receiveString+0xa>
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9b 83       	std	Y+3, r25	; 0x03
    1642:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1644:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	8c 01       	movw	r16, r24
    1652:	02 0f       	add	r16, r18
    1654:	13 1f       	adc	r17, r19
    1656:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    165a:	f8 01       	movw	r30, r16
    165c:	80 83       	st	Z, r24
    165e:	0f c0       	rjmp	.+30     	; 0x167e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	9b 81       	ldd	r25, Y+3	; 0x03
    1670:	8c 01       	movw	r16, r24
    1672:	02 0f       	add	r16, r18
    1674:	13 1f       	adc	r17, r19
    1676:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    167a:	f8 01       	movw	r30, r16
    167c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	fc 01       	movw	r30, r24
    168a:	e2 0f       	add	r30, r18
    168c:	f3 1f       	adc	r31, r19
    168e:	80 81       	ld	r24, Z
    1690:	83 32       	cpi	r24, 0x23	; 35
    1692:	31 f7       	brne	.-52     	; 0x1660 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	fc 01       	movw	r30, r24
    16a0:	e2 0f       	add	r30, r18
    16a2:	f3 1f       	adc	r31, r19
    16a4:	10 82       	st	Z, r1
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	08 95       	ret

000016b6 <BuzzerInit>:
#include "BUZZER.h"

void BuzzerInit(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	SetupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,OUTPUT_PIN);
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	Write_Pin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <BuzzerOn>:

void BuzzerOn(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	Write_Pin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>

}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <BuzzerOff>:
void BuzzerOff(void)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
	Write_Pin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>

}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <DcMotor_Init>:
#include "DC_motor.h"
#include "../MCAL/PWM.h"

void DcMotor_Init(void)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	//make Motor pins output
	SetupPinDirection(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,OUTPUT_PIN);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,OUTPUT_PIN);
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>

//write the motor LOW to turn off it
	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
	Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>


}
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <DcMotor_Rotate+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <DcMotor_Rotate+0x8>
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	6a 83       	std	Y+2, r22	; 0x02
switch(state)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3c 83       	std	Y+4, r19	; 0x04
    1756:	2b 83       	std	Y+3, r18	; 0x03
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	b9 f0       	breq	.+46     	; 0x1790 <DcMotor_Rotate+0x52>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	01 f1       	breq	.+64     	; 0x17ac <DcMotor_Rotate+0x6e>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	49 f5       	brne	.+82     	; 0x17c6 <DcMotor_Rotate+0x88>
{
case OFF:
	// case Off mean that pins is low and pwm duty cycle 0
	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
		Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
		PWM_Timer0_START(speed);
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	0e 94 b9 08 	call	0x1172	; 0x1172 <PWM_Timer0_START>
    178e:	1b c0       	rjmp	.+54     	; 0x17c6 <DcMotor_Rotate+0x88>
		break;
case CW:
	// case CW mean that one pin is high and pwm as you want

	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
		Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_HIGH);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
		PWM_Timer0_START(speed);
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	0e 94 b9 08 	call	0x1172	; 0x1172 <PWM_Timer0_START>
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <DcMotor_Rotate+0x88>
		break;
case A_CW:
	// case CW mean that one pin is high and pwm as you want

	Write_Pin(DC_MOTOR_FIRST_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_HIGH);
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
		Write_Pin(DC_MOTOR_SECOND_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
		PWM_Timer0_START(speed);
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	0e 94 b9 08 	call	0x1172	; 0x1172 <PWM_Timer0_START>
		break;
}
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <EEPROM_writeByte+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <EEPROM_writeByte+0x8>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17e6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    17ea:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <EEPROM_writeByte+0x22>
        return ERROR;
    17f2:	1c 82       	std	Y+4, r1	; 0x04
    17f4:	28 c0       	rjmp	.+80     	; 0x1846 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	80 70       	andi	r24, 0x00	; 0
    17fc:	97 70       	andi	r25, 0x07	; 7
    17fe:	88 0f       	add	r24, r24
    1800:	89 2f       	mov	r24, r25
    1802:	88 1f       	adc	r24, r24
    1804:	99 0b       	sbc	r25, r25
    1806:	91 95       	neg	r25
    1808:	80 6a       	ori	r24, 0xA0	; 160
    180a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    180e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    1812:	88 31       	cpi	r24, 0x18	; 24
    1814:	11 f0       	breq	.+4      	; 0x181a <EEPROM_writeByte+0x46>
        return ERROR; 
    1816:	1c 82       	std	Y+4, r1	; 0x04
    1818:	16 c0       	rjmp	.+44     	; 0x1846 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1820:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    1824:	88 32       	cpi	r24, 0x28	; 40
    1826:	11 f0       	breq	.+4      	; 0x182c <EEPROM_writeByte+0x58>
        return ERROR;
    1828:	1c 82       	std	Y+4, r1	; 0x04
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1832:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    1836:	88 32       	cpi	r24, 0x28	; 40
    1838:	11 f0       	breq	.+4      	; 0x183e <EEPROM_writeByte+0x6a>
        return ERROR;
    183a:	1c 82       	std	Y+4, r1	; 0x04
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    183e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TWI_stop>
	
    return SUCCESS;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8c 83       	std	Y+4, r24	; 0x04
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <EEPROM_readByte+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <EEPROM_readByte+0x8>
    185e:	0f 92       	push	r0
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	7c 83       	std	Y+4, r23	; 0x04
    186a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    186c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1870:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    1874:	88 30       	cpi	r24, 0x08	; 8
    1876:	11 f0       	breq	.+4      	; 0x187c <EEPROM_readByte+0x26>
        return ERROR;
    1878:	1d 82       	std	Y+5, r1	; 0x05
    187a:	44 c0       	rjmp	.+136    	; 0x1904 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	80 70       	andi	r24, 0x00	; 0
    1882:	97 70       	andi	r25, 0x07	; 7
    1884:	88 0f       	add	r24, r24
    1886:	89 2f       	mov	r24, r25
    1888:	88 1f       	adc	r24, r24
    188a:	99 0b       	sbc	r25, r25
    188c:	91 95       	neg	r25
    188e:	80 6a       	ori	r24, 0xA0	; 160
    1890:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1894:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    1898:	88 31       	cpi	r24, 0x18	; 24
    189a:	11 f0       	breq	.+4      	; 0x18a0 <EEPROM_readByte+0x4a>
        return ERROR;
    189c:	1d 82       	std	Y+5, r1	; 0x05
    189e:	32 c0       	rjmp	.+100    	; 0x1904 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18a6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    18aa:	88 32       	cpi	r24, 0x28	; 40
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <EEPROM_readByte+0x5c>
        return ERROR;
    18ae:	1d 82       	std	Y+5, r1	; 0x05
    18b0:	29 c0       	rjmp	.+82     	; 0x1904 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18b2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18b6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    18ba:	80 31       	cpi	r24, 0x10	; 16
    18bc:	11 f0       	breq	.+4      	; 0x18c2 <EEPROM_readByte+0x6c>
        return ERROR;
    18be:	1d 82       	std	Y+5, r1	; 0x05
    18c0:	21 c0       	rjmp	.+66     	; 0x1904 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	80 70       	andi	r24, 0x00	; 0
    18c8:	97 70       	andi	r25, 0x07	; 7
    18ca:	88 0f       	add	r24, r24
    18cc:	89 2f       	mov	r24, r25
    18ce:	88 1f       	adc	r24, r24
    18d0:	99 0b       	sbc	r25, r25
    18d2:	91 95       	neg	r25
    18d4:	81 6a       	ori	r24, 0xA1	; 161
    18d6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    18da:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    18de:	80 34       	cpi	r24, 0x40	; 64
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <EEPROM_readByte+0x90>
        return ERROR;
    18e2:	1d 82       	std	Y+5, r1	; 0x05
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    18e6:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_readByteWithNACK>
    18ea:	eb 81       	ldd	r30, Y+3	; 0x03
    18ec:	fc 81       	ldd	r31, Y+4	; 0x04
    18ee:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    18f0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <TWI_getStatus>
    18f4:	88 35       	cpi	r24, 0x58	; 88
    18f6:	11 f0       	breq	.+4      	; 0x18fc <EEPROM_readByte+0xa6>
        return ERROR;
    18f8:	1d 82       	std	Y+5, r1	; 0x05
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    18fc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TWI_stop>

    return SUCCESS;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <main>:

/******************************************************************************************
 	 	 	 	 	 	 	     Main function
 ******************************************************************************************/
int main(void)
{
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	cd 59       	subi	r28, 0x9D	; 157
    1924:	d0 40       	sbci	r29, 0x00	; 0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
	/***************************************initializations***************************************************/

	SREG |=(1<<7);//enable global interrupt
    1930:	af e5       	ldi	r26, 0x5F	; 95
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ef e5       	ldi	r30, 0x5F	; 95
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 68       	ori	r24, 0x80	; 128
    193c:	8c 93       	st	X, r24

	uint8 i/*for loop parameter*/,match/*to compar two arrays*/,ret;

	UART_ConfigType uart={_8_Bit_Mode,Disabled,_1_Stop_Bit,Rate3};//configuration of uart with 8 bit character Arr_Size ,1 stop bit ,no parity bit and Baud rate 9600
    193e:	ce 01       	movw	r24, r28
    1940:	80 57       	subi	r24, 0x70	; 112
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	c7 56       	subi	r28, 0x67	; 103
    1946:	df 4f       	sbci	r29, 0xFF	; 255
    1948:	99 83       	std	Y+1, r25	; 0x01
    194a:	88 83       	st	Y, r24
    194c:	c9 59       	subi	r28, 0x99	; 153
    194e:	d0 40       	sbci	r29, 0x00	; 0
    1950:	2e e6       	ldi	r18, 0x6E	; 110
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	c5 56       	subi	r28, 0x65	; 101
    1956:	df 4f       	sbci	r29, 0xFF	; 255
    1958:	39 83       	std	Y+1, r19	; 0x01
    195a:	28 83       	st	Y, r18
    195c:	cb 59       	subi	r28, 0x9B	; 155
    195e:	d0 40       	sbci	r29, 0x00	; 0
    1960:	35 e0       	ldi	r19, 0x05	; 5
    1962:	c3 56       	subi	r28, 0x63	; 99
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	38 83       	st	Y, r19
    1968:	cd 59       	subi	r28, 0x9D	; 157
    196a:	d0 40       	sbci	r29, 0x00	; 0
    196c:	c5 56       	subi	r28, 0x65	; 101
    196e:	df 4f       	sbci	r29, 0xFF	; 255
    1970:	e8 81       	ld	r30, Y
    1972:	f9 81       	ldd	r31, Y+1	; 0x01
    1974:	cb 59       	subi	r28, 0x9B	; 155
    1976:	d0 40       	sbci	r29, 0x00	; 0
    1978:	00 80       	ld	r0, Z
    197a:	c5 56       	subi	r28, 0x65	; 101
    197c:	df 4f       	sbci	r29, 0xFF	; 255
    197e:	28 81       	ld	r18, Y
    1980:	39 81       	ldd	r19, Y+1	; 0x01
    1982:	cb 59       	subi	r28, 0x9B	; 155
    1984:	d0 40       	sbci	r29, 0x00	; 0
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	c5 56       	subi	r28, 0x65	; 101
    198c:	df 4f       	sbci	r29, 0xFF	; 255
    198e:	39 83       	std	Y+1, r19	; 0x01
    1990:	28 83       	st	Y, r18
    1992:	cb 59       	subi	r28, 0x9B	; 155
    1994:	d0 40       	sbci	r29, 0x00	; 0
    1996:	c7 56       	subi	r28, 0x67	; 103
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	e8 81       	ld	r30, Y
    199c:	f9 81       	ldd	r31, Y+1	; 0x01
    199e:	c9 59       	subi	r28, 0x99	; 153
    19a0:	d0 40       	sbci	r29, 0x00	; 0
    19a2:	00 82       	st	Z, r0
    19a4:	c7 56       	subi	r28, 0x67	; 103
    19a6:	df 4f       	sbci	r29, 0xFF	; 255
    19a8:	28 81       	ld	r18, Y
    19aa:	39 81       	ldd	r19, Y+1	; 0x01
    19ac:	c9 59       	subi	r28, 0x99	; 153
    19ae:	d0 40       	sbci	r29, 0x00	; 0
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	c7 56       	subi	r28, 0x67	; 103
    19b6:	df 4f       	sbci	r29, 0xFF	; 255
    19b8:	39 83       	std	Y+1, r19	; 0x01
    19ba:	28 83       	st	Y, r18
    19bc:	c9 59       	subi	r28, 0x99	; 153
    19be:	d0 40       	sbci	r29, 0x00	; 0
    19c0:	c3 56       	subi	r28, 0x63	; 99
    19c2:	df 4f       	sbci	r29, 0xFF	; 255
    19c4:	38 81       	ld	r19, Y
    19c6:	cd 59       	subi	r28, 0x9D	; 157
    19c8:	d0 40       	sbci	r29, 0x00	; 0
    19ca:	31 50       	subi	r19, 0x01	; 1
    19cc:	c3 56       	subi	r28, 0x63	; 99
    19ce:	df 4f       	sbci	r29, 0xFF	; 255
    19d0:	38 83       	st	Y, r19
    19d2:	cd 59       	subi	r28, 0x9D	; 157
    19d4:	d0 40       	sbci	r29, 0x00	; 0
    19d6:	c3 56       	subi	r28, 0x63	; 99
    19d8:	df 4f       	sbci	r29, 0xFF	; 255
    19da:	88 81       	ld	r24, Y
    19dc:	cd 59       	subi	r28, 0x9D	; 157
    19de:	d0 40       	sbci	r29, 0x00	; 0
    19e0:	88 23       	and	r24, r24
    19e2:	21 f6       	brne	.-120    	; 0x196c <main+0x56>

	TWI_ConfigType twi;//configuration for twi with address 0x01 and bit rate 400,000 kbps
	twi.address.address=0x01;//my address is 0x01
    19e4:	fe 01       	movw	r30, r28
    19e6:	eb 56       	subi	r30, 0x6B	; 107
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 83       	st	Z, r24
	twi.bit_rate.bit_rate=0x02;//bit rate 400 kbps
    19ee:	fe 01       	movw	r30, r28
    19f0:	eb 56       	subi	r30, 0x6B	; 107
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	81 83       	std	Z+1, r24	; 0x01
	UART_init(&uart);//initialize UART with the address of uart object
    19f8:	ce 01       	movw	r24, r28
    19fa:	80 57       	subi	r24, 0x70	; 112
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UART_init>
	TWI_init(&twi);//initialize twi with the address of twi object
    1a02:	ce 01       	movw	r24, r28
    1a04:	8b 56       	subi	r24, 0x6B	; 107
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	0e 94 ba 09 	call	0x1374	; 0x1374 <TWI_init>
	DcMotor_Init();
    1a0c:	0e 94 84 0b 	call	0x1708	; 0x1708 <DcMotor_Init>
	BuzzerInit();
    1a10:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <BuzzerInit>

	/***********************************************Super Loop************************************************/

	while(1)//super loop
	{//start super loop
		step=UART_recieveByte();//receive the step from HMI_MCU to keep on track
    1a14:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    1a18:	80 93 76 00 	sts	0x0076, r24
		switch(step)//switch step cases
    1a1c:	80 91 76 00 	lds	r24, 0x0076
    1a20:	e8 2f       	mov	r30, r24
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	c9 56       	subi	r28, 0x69	; 105
    1a26:	df 4f       	sbci	r29, 0xFF	; 255
    1a28:	f9 83       	std	Y+1, r31	; 0x01
    1a2a:	e8 83       	st	Y, r30
    1a2c:	c7 59       	subi	r28, 0x97	; 151
    1a2e:	d0 40       	sbci	r29, 0x00	; 0
    1a30:	c9 56       	subi	r28, 0x69	; 105
    1a32:	df 4f       	sbci	r29, 0xFF	; 255
    1a34:	28 81       	ld	r18, Y
    1a36:	39 81       	ldd	r19, Y+1	; 0x01
    1a38:	c7 59       	subi	r28, 0x97	; 151
    1a3a:	d0 40       	sbci	r29, 0x00	; 0
    1a3c:	23 30       	cpi	r18, 0x03	; 3
    1a3e:	31 05       	cpc	r19, r1
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <main+0x12e>
    1a42:	2d c4       	rjmp	.+2138   	; 0x229e <main+0x988>
    1a44:	c9 56       	subi	r28, 0x69	; 105
    1a46:	df 4f       	sbci	r29, 0xFF	; 255
    1a48:	88 81       	ld	r24, Y
    1a4a:	99 81       	ldd	r25, Y+1	; 0x01
    1a4c:	c7 59       	subi	r28, 0x97	; 151
    1a4e:	d0 40       	sbci	r29, 0x00	; 0
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	91 05       	cpc	r25, r1
    1a54:	9c f4       	brge	.+38     	; 0x1a7c <main+0x166>
    1a56:	c9 56       	subi	r28, 0x69	; 105
    1a58:	df 4f       	sbci	r29, 0xFF	; 255
    1a5a:	e8 81       	ld	r30, Y
    1a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5e:	c7 59       	subi	r28, 0x97	; 151
    1a60:	d0 40       	sbci	r29, 0x00	; 0
    1a62:	e1 30       	cpi	r30, 0x01	; 1
    1a64:	f1 05       	cpc	r31, r1
    1a66:	f1 f0       	breq	.+60     	; 0x1aa4 <main+0x18e>
    1a68:	c9 56       	subi	r28, 0x69	; 105
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	28 81       	ld	r18, Y
    1a6e:	39 81       	ldd	r19, Y+1	; 0x01
    1a70:	c7 59       	subi	r28, 0x97	; 151
    1a72:	d0 40       	sbci	r29, 0x00	; 0
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	c1 f1       	breq	.+112    	; 0x1aea <main+0x1d4>
    1a7a:	cc cf       	rjmp	.-104    	; 0x1a14 <main+0xfe>
    1a7c:	c9 56       	subi	r28, 0x69	; 105
    1a7e:	df 4f       	sbci	r29, 0xFF	; 255
    1a80:	88 81       	ld	r24, Y
    1a82:	99 81       	ldd	r25, Y+1	; 0x01
    1a84:	c7 59       	subi	r28, 0x97	; 151
    1a86:	d0 40       	sbci	r29, 0x00	; 0
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	19 f2       	breq	.-122    	; 0x1a14 <main+0xfe>
    1a8e:	c9 56       	subi	r28, 0x69	; 105
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	e8 81       	ld	r30, Y
    1a94:	f9 81       	ldd	r31, Y+1	; 0x01
    1a96:	c7 59       	subi	r28, 0x97	; 151
    1a98:	d0 40       	sbci	r29, 0x00	; 0
    1a9a:	e5 30       	cpi	r30, 0x05	; 5
    1a9c:	f1 05       	cpc	r31, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <main+0x18c>
    1aa0:	bb c6       	rjmp	.+3446   	; 0x2818 <main+0xf02>
    1aa2:	b8 cf       	rjmp	.-144    	; 0x1a14 <main+0xfe>
		{//start switch step
		////////////////////////case 1/////////////////////////////////////
		case 1://case step 1
			for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e1 57       	subi	r30, 0x71	; 113
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	10 82       	st	Z, r1
    1aac:	15 c0       	rjmp	.+42     	; 0x1ad8 <main+0x1c2>
			{//start for arr_pass
				arr_pass[i]=UART_recieveByte();//fill the arr_pass with the password
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e1 57       	subi	r30, 0x71	; 113
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	08 2f       	mov	r16, r24
    1ab8:	10 e0       	ldi	r17, 0x00	; 0
    1aba:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    1abe:	f8 01       	movw	r30, r16
    1ac0:	e3 58       	subi	r30, 0x83	; 131
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 83       	st	Z, r24
		step=UART_recieveByte();//receive the step from HMI_MCU to keep on track
		switch(step)//switch step cases
		{//start switch step
		////////////////////////case 1/////////////////////////////////////
		case 1://case step 1
			for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass
    1ac6:	de 01       	movw	r26, r28
    1ac8:	a1 57       	subi	r26, 0x71	; 113
    1aca:	bf 4f       	sbci	r27, 0xFF	; 255
    1acc:	fe 01       	movw	r30, r28
    1ace:	e1 57       	subi	r30, 0x71	; 113
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	8c 93       	st	X, r24
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e1 57       	subi	r30, 0x71	; 113
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	28 f3       	brcs	.-54     	; 0x1aae <main+0x198>
			{//start for arr_pass
				arr_pass[i]=UART_recieveByte();//fill the arr_pass with the password
			}//end for arr_pass

			step=0;//do not come to step 1 again
    1ae4:	10 92 76 00 	sts	0x0076, r1
    1ae8:	95 cf       	rjmp	.-214    	; 0x1a14 <main+0xfe>

			break;//break case step 1
			///////////////////////////////////case 2//////////////////////////////////////////
		case 2://case step 2

			for(i=0;i<(Arr_Size-1);i++)//loop in arr_confirm
    1aea:	fe 01       	movw	r30, r28
    1aec:	e1 57       	subi	r30, 0x71	; 113
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	10 82       	st	Z, r1
    1af2:	15 c0       	rjmp	.+42     	; 0x1b1e <main+0x208>
			{//start for arr_pass
				arr_confirm[i]=UART_recieveByte();//fill the arr_confirm with the password
    1af4:	fe 01       	movw	r30, r28
    1af6:	e1 57       	subi	r30, 0x71	; 113
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	08 2f       	mov	r16, r24
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    1b04:	f8 01       	movw	r30, r16
    1b06:	ee 57       	subi	r30, 0x7E	; 126
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 83       	st	Z, r24

			break;//break case step 1
			///////////////////////////////////case 2//////////////////////////////////////////
		case 2://case step 2

			for(i=0;i<(Arr_Size-1);i++)//loop in arr_confirm
    1b0c:	de 01       	movw	r26, r28
    1b0e:	a1 57       	subi	r26, 0x71	; 113
    1b10:	bf 4f       	sbci	r27, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	e1 57       	subi	r30, 0x71	; 113
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	8c 93       	st	X, r24
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e1 57       	subi	r30, 0x71	; 113
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	28 f3       	brcs	.-54     	; 0x1af4 <main+0x1de>
			{//start for arr_pass
				arr_confirm[i]=UART_recieveByte();//fill the arr_confirm with the password
			}//end for arr_pass
			match=pass_match();//compare two arrays
    1b2a:	0e 94 28 14 	call	0x2850	; 0x2850 <pass_match>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e2 57       	subi	r30, 0x72	; 114
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 83       	st	Z, r24
			UART_sendByte(match);//send 0 if two passwords not matched 1 if matched
    1b36:	fe 01       	movw	r30, r28
    1b38:	e2 57       	subi	r30, 0x72	; 114
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>

			if(match==1)//if the two passwords match
    1b42:	fe 01       	movw	r30, r28
    1b44:	e2 57       	subi	r30, 0x72	; 114
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <main+0x23a>
    1b4e:	a4 c3       	rjmp	.+1864   	; 0x2298 <main+0x982>
			{//start if match

				EEPROM_writeByte(0x0011,arr_confirm[0]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
    1b50:	20 91 82 00 	lds	r18, 0x0082
    1b54:	81 e1       	ldi	r24, 0x11	; 17
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	62 2f       	mov	r22, r18
    1b5a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EEPROM_writeByte>
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e7 57       	subi	r30, 0x77	; 119
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a8 e4       	ldi	r26, 0x48	; 72
    1b6a:	b2 e4       	ldi	r27, 0x42	; 66
    1b6c:	80 83       	st	Z, r24
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	a2 83       	std	Z+2, r26	; 0x02
    1b72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	8e 01       	movw	r16, r28
    1b76:	0b 57       	subi	r16, 0x7B	; 123
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e7 57       	subi	r30, 0x77	; 119
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a ef       	ldi	r20, 0xFA	; 250
    1b8e:	54 e4       	ldi	r21, 0x44	; 68
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 83       	st	Z, r24
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	a2 83       	std	Z+2, r26	; 0x02
    1ba0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 57       	subi	r30, 0x7B	; 123
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	44 f4       	brge	.+16     	; 0x1bd0 <main+0x2ba>
		__ticks = 1;
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ed 57       	subi	r30, 0x7D	; 125
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
    1bce:	64 c0       	rjmp	.+200    	; 0x1c98 <main+0x382>
	else if (__tmp > 65535)
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	eb 57       	subi	r30, 0x7B	; 123
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	0c f0       	brlt	.+2      	; 0x1bf0 <main+0x2da>
    1bee:	43 c0       	rjmp	.+134    	; 0x1c76 <main+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e7 57       	subi	r30, 0x77	; 119
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8e 01       	movw	r16, r28
    1c10:	0d 57       	subi	r16, 0x7D	; 125
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	f8 01       	movw	r30, r16
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	1f c0       	rjmp	.+62     	; 0x1c66 <main+0x350>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ef 57       	subi	r30, 0x7F	; 127
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	88 ec       	ldi	r24, 0xC8	; 200
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c36:	fe 01       	movw	r30, r28
    1c38:	ef 57       	subi	r30, 0x7F	; 127
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <main+0x32a>
    1c44:	fe 01       	movw	r30, r28
    1c46:	ef 57       	subi	r30, 0x7F	; 127
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	de 01       	movw	r26, r28
    1c50:	ad 57       	subi	r26, 0x7D	; 125
    1c52:	bf 4f       	sbci	r27, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	ed 57       	subi	r30, 0x7D	; 125
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 81       	ld	r24, Z
    1c5c:	91 81       	ldd	r25, Z+1	; 0x01
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	11 96       	adiw	r26, 0x01	; 1
    1c62:	9c 93       	st	X, r25
    1c64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	fe 01       	movw	r30, r28
    1c68:	ed 57       	subi	r30, 0x7D	; 125
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	d1 f6       	brne	.-76     	; 0x1c28 <main+0x312>
    1c74:	27 c0       	rjmp	.+78     	; 0x1cc4 <main+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	8e 01       	movw	r16, r28
    1c78:	0d 57       	subi	r16, 0x7D	; 125
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	eb 57       	subi	r30, 0x7B	; 123
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	f8 01       	movw	r30, r16
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
    1c98:	de 01       	movw	r26, r28
    1c9a:	a1 58       	subi	r26, 0x81	; 129
    1c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 57       	subi	r30, 0x7D	; 125
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	8d 93       	st	X+, r24
    1caa:	9c 93       	st	X, r25
    1cac:	fe 01       	movw	r30, r28
    1cae:	e1 58       	subi	r30, 0x81	; 129
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <main+0x3a0>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e1 58       	subi	r30, 0x81	; 129
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
				_delay_ms(50);
				EEPROM_writeByte(0x0012,arr_confirm[1]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
    1cc4:	20 91 83 00 	lds	r18, 0x0083
    1cc8:	82 e1       	ldi	r24, 0x12	; 18
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	62 2f       	mov	r22, r18
    1cce:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EEPROM_writeByte>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e5 58       	subi	r30, 0x85	; 133
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a8 e4       	ldi	r26, 0x48	; 72
    1cde:	b2 e4       	ldi	r27, 0x42	; 66
    1ce0:	80 83       	st	Z, r24
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	a2 83       	std	Z+2, r26	; 0x02
    1ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	8e 01       	movw	r16, r28
    1cea:	09 58       	subi	r16, 0x89	; 137
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e5 58       	subi	r30, 0x85	; 133
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	80 83       	st	Z, r24
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	a2 83       	std	Z+2, r26	; 0x02
    1d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d16:	fe 01       	movw	r30, r28
    1d18:	e9 58       	subi	r30, 0x89	; 137
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	44 f4       	brge	.+16     	; 0x1d44 <main+0x42e>
		__ticks = 1;
    1d34:	fe 01       	movw	r30, r28
    1d36:	eb 58       	subi	r30, 0x8B	; 139
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	64 c0       	rjmp	.+200    	; 0x1e0c <main+0x4f6>
	else if (__tmp > 65535)
    1d44:	fe 01       	movw	r30, r28
    1d46:	e9 58       	subi	r30, 0x89	; 137
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <main+0x44e>
    1d62:	43 c0       	rjmp	.+134    	; 0x1dea <main+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	fe 01       	movw	r30, r28
    1d66:	e5 58       	subi	r30, 0x85	; 133
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8e 01       	movw	r16, r28
    1d84:	0b 58       	subi	r16, 0x8B	; 139
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	f8 01       	movw	r30, r16
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
    1d9a:	1f c0       	rjmp	.+62     	; 0x1dda <main+0x4c4>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ed 58       	subi	r30, 0x8D	; 141
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	88 ec       	ldi	r24, 0xC8	; 200
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	fe 01       	movw	r30, r28
    1dac:	ed 58       	subi	r30, 0x8D	; 141
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <main+0x49e>
    1db8:	fe 01       	movw	r30, r28
    1dba:	ed 58       	subi	r30, 0x8D	; 141
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	de 01       	movw	r26, r28
    1dc4:	ab 58       	subi	r26, 0x8B	; 139
    1dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	eb 58       	subi	r30, 0x8B	; 139
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	9c 93       	st	X, r25
    1dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	eb 58       	subi	r30, 0x8B	; 139
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	d1 f6       	brne	.-76     	; 0x1d9c <main+0x486>
    1de8:	27 c0       	rjmp	.+78     	; 0x1e38 <main+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	8e 01       	movw	r16, r28
    1dec:	0b 58       	subi	r16, 0x8B	; 139
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e9 58       	subi	r30, 0x89	; 137
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	de 01       	movw	r26, r28
    1e0e:	af 58       	subi	r26, 0x8F	; 143
    1e10:	bf 4f       	sbci	r27, 0xFF	; 255
    1e12:	fe 01       	movw	r30, r28
    1e14:	eb 58       	subi	r30, 0x8B	; 139
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	8d 93       	st	X+, r24
    1e1e:	9c 93       	st	X, r25
    1e20:	fe 01       	movw	r30, r28
    1e22:	ef 58       	subi	r30, 0x8F	; 143
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <main+0x514>
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ef 58       	subi	r30, 0x8F	; 143
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
				_delay_ms(50);

				EEPROM_writeByte(0x0031,arr_confirm[2]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
    1e38:	20 91 84 00 	lds	r18, 0x0084
    1e3c:	81 e3       	ldi	r24, 0x31	; 49
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	62 2f       	mov	r22, r18
    1e42:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EEPROM_writeByte>
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 59       	subi	r30, 0x93	; 147
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a8 e4       	ldi	r26, 0x48	; 72
    1e52:	b2 e4       	ldi	r27, 0x42	; 66
    1e54:	80 83       	st	Z, r24
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	a2 83       	std	Z+2, r26	; 0x02
    1e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	07 59       	subi	r16, 0x97	; 151
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e3 59       	subi	r30, 0x93	; 147
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e7 59       	subi	r30, 0x97	; 151
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	44 f4       	brge	.+16     	; 0x1eb8 <main+0x5a2>
		__ticks = 1;
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e9 59       	subi	r30, 0x99	; 153
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
    1eb6:	64 c0       	rjmp	.+200    	; 0x1f80 <main+0x66a>
	else if (__tmp > 65535)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 59       	subi	r30, 0x97	; 151
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <main+0x5c2>
    1ed6:	43 c0       	rjmp	.+134    	; 0x1f5e <main+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e3 59       	subi	r30, 0x93	; 147
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	09 59       	subi	r16, 0x99	; 153
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	1f c0       	rjmp	.+62     	; 0x1f4e <main+0x638>
    1f10:	fe 01       	movw	r30, r28
    1f12:	eb 59       	subi	r30, 0x9B	; 155
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	88 ec       	ldi	r24, 0xC8	; 200
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	fe 01       	movw	r30, r28
    1f20:	eb 59       	subi	r30, 0x9B	; 155
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <main+0x612>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	eb 59       	subi	r30, 0x9B	; 155
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	de 01       	movw	r26, r28
    1f38:	a9 59       	subi	r26, 0x99	; 153
    1f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e9 59       	subi	r30, 0x99	; 153
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e9 59       	subi	r30, 0x99	; 153
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	d1 f6       	brne	.-76     	; 0x1f10 <main+0x5fa>
    1f5c:	27 c0       	rjmp	.+78     	; 0x1fac <main+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	09 59       	subi	r16, 0x99	; 153
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e7 59       	subi	r30, 0x97	; 151
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	de 01       	movw	r26, r28
    1f82:	ad 59       	subi	r26, 0x9D	; 157
    1f84:	bf 4f       	sbci	r27, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	e9 59       	subi	r30, 0x99	; 153
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	8d 93       	st	X+, r24
    1f92:	9c 93       	st	X, r25
    1f94:	fe 01       	movw	r30, r28
    1f96:	ed 59       	subi	r30, 0x9D	; 157
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <main+0x688>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ed 59       	subi	r30, 0x9D	; 157
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
				_delay_ms(50);

				EEPROM_writeByte(0x0041,arr_confirm[3]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
    1fac:	20 91 85 00 	lds	r18, 0x0085
    1fb0:	81 e4       	ldi	r24, 0x41	; 65
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	62 2f       	mov	r22, r18
    1fb6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EEPROM_writeByte>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e1 5a       	subi	r30, 0xA1	; 161
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a8 e4       	ldi	r26, 0x48	; 72
    1fc6:	b2 e4       	ldi	r27, 0x42	; 66
    1fc8:	80 83       	st	Z, r24
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	a2 83       	std	Z+2, r26	; 0x02
    1fce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	05 5a       	subi	r16, 0xA5	; 165
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e1 5a       	subi	r30, 0xA1	; 161
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	80 83       	st	Z, r24
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	a2 83       	std	Z+2, r26	; 0x02
    1ffc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ffe:	fe 01       	movw	r30, r28
    2000:	e5 5a       	subi	r30, 0xA5	; 165
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	44 f4       	brge	.+16     	; 0x202c <main+0x716>
		__ticks = 1;
    201c:	fe 01       	movw	r30, r28
    201e:	e7 5a       	subi	r30, 0xA7	; 167
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	64 c0       	rjmp	.+200    	; 0x20f4 <main+0x7de>
	else if (__tmp > 65535)
    202c:	fe 01       	movw	r30, r28
    202e:	e5 5a       	subi	r30, 0xA5	; 165
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	0c f0       	brlt	.+2      	; 0x204c <main+0x736>
    204a:	43 c0       	rjmp	.+134    	; 0x20d2 <main+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	fe 01       	movw	r30, r28
    204e:	e1 5a       	subi	r30, 0xA1	; 161
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8e 01       	movw	r16, r28
    206c:	07 5a       	subi	r16, 0xA7	; 167
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	f8 01       	movw	r30, r16
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	1f c0       	rjmp	.+62     	; 0x20c2 <main+0x7ac>
    2084:	fe 01       	movw	r30, r28
    2086:	e9 5a       	subi	r30, 0xA9	; 169
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	88 ec       	ldi	r24, 0xC8	; 200
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	80 83       	st	Z, r24
    2092:	fe 01       	movw	r30, r28
    2094:	e9 5a       	subi	r30, 0xA9	; 169
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <main+0x786>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e9 5a       	subi	r30, 0xA9	; 169
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	de 01       	movw	r26, r28
    20ac:	a7 5a       	subi	r26, 0xA7	; 167
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 5a       	subi	r30, 0xA7	; 167
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	11 96       	adiw	r26, 0x01	; 1
    20be:	9c 93       	st	X, r25
    20c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	fe 01       	movw	r30, r28
    20c4:	e7 5a       	subi	r30, 0xA7	; 167
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	d1 f6       	brne	.-76     	; 0x2084 <main+0x76e>
    20d0:	27 c0       	rjmp	.+78     	; 0x2120 <main+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d2:	8e 01       	movw	r16, r28
    20d4:	07 5a       	subi	r16, 0xA7	; 167
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	fe 01       	movw	r30, r28
    20da:	e5 5a       	subi	r30, 0xA5	; 165
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	de 01       	movw	r26, r28
    20f6:	ab 5a       	subi	r26, 0xAB	; 171
    20f8:	bf 4f       	sbci	r27, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	e7 5a       	subi	r30, 0xA7	; 167
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	8d 93       	st	X+, r24
    2106:	9c 93       	st	X, r25
    2108:	fe 01       	movw	r30, r28
    210a:	eb 5a       	subi	r30, 0xAB	; 171
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <main+0x7fc>
    2116:	fe 01       	movw	r30, r28
    2118:	eb 5a       	subi	r30, 0xAB	; 171
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
				_delay_ms(50);

				EEPROM_writeByte(0x0051,arr_confirm[4]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
    2120:	20 91 86 00 	lds	r18, 0x0086
    2124:	81 e5       	ldi	r24, 0x51	; 81
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	62 2f       	mov	r22, r18
    212a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EEPROM_writeByte>
    212e:	fe 01       	movw	r30, r28
    2130:	ef 5a       	subi	r30, 0xAF	; 175
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a8 e4       	ldi	r26, 0x48	; 72
    213a:	b2 e4       	ldi	r27, 0x42	; 66
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	a2 83       	std	Z+2, r26	; 0x02
    2142:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	8e 01       	movw	r16, r28
    2146:	03 5b       	subi	r16, 0xB3	; 179
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	ef 5a       	subi	r30, 0xAF	; 175
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	f8 01       	movw	r30, r16
    216a:	80 83       	st	Z, r24
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	a2 83       	std	Z+2, r26	; 0x02
    2170:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2172:	fe 01       	movw	r30, r28
    2174:	e3 5b       	subi	r30, 0xB3	; 179
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	44 f4       	brge	.+16     	; 0x21a0 <main+0x88a>
		__ticks = 1;
    2190:	fe 01       	movw	r30, r28
    2192:	e5 5b       	subi	r30, 0xB5	; 181
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
    219e:	64 c0       	rjmp	.+200    	; 0x2268 <main+0x952>
	else if (__tmp > 65535)
    21a0:	fe 01       	movw	r30, r28
    21a2:	e3 5b       	subi	r30, 0xB3	; 179
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	0c f0       	brlt	.+2      	; 0x21c0 <main+0x8aa>
    21be:	43 c0       	rjmp	.+134    	; 0x2246 <main+0x930>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	fe 01       	movw	r30, r28
    21c2:	ef 5a       	subi	r30, 0xAF	; 175
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8e 01       	movw	r16, r28
    21e0:	05 5b       	subi	r16, 0xB5	; 181
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	f8 01       	movw	r30, r16
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	1f c0       	rjmp	.+62     	; 0x2236 <main+0x920>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e7 5b       	subi	r30, 0xB7	; 183
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	fe 01       	movw	r30, r28
    2208:	e7 5b       	subi	r30, 0xB7	; 183
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <main+0x8fa>
    2214:	fe 01       	movw	r30, r28
    2216:	e7 5b       	subi	r30, 0xB7	; 183
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221e:	de 01       	movw	r26, r28
    2220:	a5 5b       	subi	r26, 0xB5	; 181
    2222:	bf 4f       	sbci	r27, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e5 5b       	subi	r30, 0xB5	; 181
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	9c 93       	st	X, r25
    2234:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	fe 01       	movw	r30, r28
    2238:	e5 5b       	subi	r30, 0xB5	; 181
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	d1 f6       	brne	.-76     	; 0x21f8 <main+0x8e2>
    2244:	e7 cb       	rjmp	.-2098   	; 0x1a14 <main+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	8e 01       	movw	r16, r28
    2248:	05 5b       	subi	r16, 0xB5	; 181
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	e3 5b       	subi	r30, 0xB3	; 179
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	de 01       	movw	r26, r28
    226a:	a9 5b       	subi	r26, 0xB9	; 185
    226c:	bf 4f       	sbci	r27, 0xFF	; 255
    226e:	fe 01       	movw	r30, r28
    2270:	e5 5b       	subi	r30, 0xB5	; 181
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	11 96       	adiw	r26, 0x01	; 1
    227a:	9c 93       	st	X, r25
    227c:	8e 93       	st	-X, r24
    227e:	fe 01       	movw	r30, r28
    2280:	e9 5b       	subi	r30, 0xB9	; 185
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <main+0x972>
    228c:	fe 01       	movw	r30, r28
    228e:	e9 5b       	subi	r30, 0xB9	; 185
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
    2296:	be cb       	rjmp	.-2180   	; 0x1a14 <main+0xfe>

			}//end if match
			//for to reset two arrays
			else//if not match
			{//start if not match
				step=0;//no step
    2298:	10 92 76 00 	sts	0x0076, r1
    229c:	bb cb       	rjmp	.-2186   	; 0x1a14 <main+0xfe>
			break;//break case step 2
			//////////////////////////////////////////////////////////////////////////////////////

		case  3://start case step 3

			for(i=0;i<(Arr_Size-1);i++)//loop in arr_confirm
    229e:	fe 01       	movw	r30, r28
    22a0:	e1 57       	subi	r30, 0x71	; 113
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	10 82       	st	Z, r1
    22a6:	15 c0       	rjmp	.+42     	; 0x22d2 <main+0x9bc>
			{//start for confirm_eeprom
				confirm_eeprom[i]=UART_recieveByte();//fill the confirm_eeprom with the password
    22a8:	fe 01       	movw	r30, r28
    22aa:	e1 57       	subi	r30, 0x71	; 113
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	08 2f       	mov	r16, r24
    22b2:	10 e0       	ldi	r17, 0x00	; 0
    22b4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    22b8:	f8 01       	movw	r30, r16
    22ba:	e8 58       	subi	r30, 0x88	; 136
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 83       	st	Z, r24
			break;//break case step 2
			//////////////////////////////////////////////////////////////////////////////////////

		case  3://start case step 3

			for(i=0;i<(Arr_Size-1);i++)//loop in arr_confirm
    22c0:	de 01       	movw	r26, r28
    22c2:	a1 57       	subi	r26, 0x71	; 113
    22c4:	bf 4f       	sbci	r27, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	e1 57       	subi	r30, 0x71	; 113
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	8c 93       	st	X, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	e1 57       	subi	r30, 0x71	; 113
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	28 f3       	brcs	.-54     	; 0x22a8 <main+0x992>

			}//end for confirm_eeprom
			//////////////////////////////////////////////
			//////////////////////////////////////////////

			EEPROM_readByte(0x0011,&arr_eeprom[0]);//read the value from address 0x0011  and put it in arr_eeprom[i]
    22de:	27 e8       	ldi	r18, 0x87	; 135
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	81 e1       	ldi	r24, 0x11	; 17
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <EEPROM_readByte>
    22ec:	fe 01       	movw	r30, r28
    22ee:	ed 5b       	subi	r30, 0xBD	; 189
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a8 e4       	ldi	r26, 0x48	; 72
    22f8:	b2 e4       	ldi	r27, 0x42	; 66
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	01 5c       	subi	r16, 0xC1	; 193
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	ed 5b       	subi	r30, 0xBD	; 189
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a ef       	ldi	r20, 0xFA	; 250
    231c:	54 e4       	ldi	r21, 0x44	; 68
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	ff 96       	adiw	r30, 0x3f	; 63
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <main+0xa40>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9e af       	std	Y+62, r25	; 0x3e
    2352:	8d af       	std	Y+61, r24	; 0x3d
    2354:	46 c0       	rjmp	.+140    	; 0x23e2 <main+0xacc>
	else if (__tmp > 65535)
    2356:	fe 01       	movw	r30, r28
    2358:	ff 96       	adiw	r30, 0x3f	; 63
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	64 f5       	brge	.+88     	; 0x23ca <main+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	fe 01       	movw	r30, r28
    2374:	ed 5b       	subi	r30, 0xBD	; 189
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e af       	std	Y+62, r25	; 0x3e
    239e:	8d af       	std	Y+61, r24	; 0x3d
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <main+0xaaa>
    23a2:	88 ec       	ldi	r24, 0xC8	; 200
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c af       	std	Y+60, r25	; 0x3c
    23a8:	8b af       	std	Y+59, r24	; 0x3b
    23aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    23ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <main+0xa98>
    23b2:	9c af       	std	Y+60, r25	; 0x3c
    23b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9e af       	std	Y+62, r25	; 0x3e
    23be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <main+0xa8c>
    23c8:	16 c0       	rjmp	.+44     	; 0x23f6 <main+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	fe 01       	movw	r30, r28
    23cc:	ff 96       	adiw	r30, 0x3f	; 63
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e af       	std	Y+62, r25	; 0x3e
    23e0:	8d af       	std	Y+61, r24	; 0x3d
    23e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e6:	9a af       	std	Y+58, r25	; 0x3a
    23e8:	89 af       	std	Y+57, r24	; 0x39
    23ea:	89 ad       	ldd	r24, Y+57	; 0x39
    23ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <main+0xad8>
    23f2:	9a af       	std	Y+58, r25	; 0x3a
    23f4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(50);

			EEPROM_readByte(0x0012,&(arr_eeprom[1]));//read the value from address 0x0012  and put it in arr_eeprom[i]
    23f6:	28 e8       	ldi	r18, 0x88	; 136
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	82 e1       	ldi	r24, 0x12	; 18
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	b9 01       	movw	r22, r18
    2400:	0e 94 2b 0c 	call	0x1856	; 0x1856 <EEPROM_readByte>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a8 e4       	ldi	r26, 0x48	; 72
    240a:	b2 e4       	ldi	r27, 0x42	; 66
    240c:	8d ab       	std	Y+53, r24	; 0x35
    240e:	9e ab       	std	Y+54, r25	; 0x36
    2410:	af ab       	std	Y+55, r26	; 0x37
    2412:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	6d a9       	ldd	r22, Y+53	; 0x35
    2416:	7e a9       	ldd	r23, Y+54	; 0x36
    2418:	8f a9       	ldd	r24, Y+55	; 0x37
    241a:	98 ad       	ldd	r25, Y+56	; 0x38
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	89 ab       	std	Y+49, r24	; 0x31
    242e:	9a ab       	std	Y+50, r25	; 0x32
    2430:	ab ab       	std	Y+51, r26	; 0x33
    2432:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2434:	69 a9       	ldd	r22, Y+49	; 0x31
    2436:	7a a9       	ldd	r23, Y+50	; 0x32
    2438:	8b a9       	ldd	r24, Y+51	; 0x33
    243a:	9c a9       	ldd	r25, Y+52	; 0x34
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <main+0xb40>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <main+0xbbe>
	else if (__tmp > 65535)
    2456:	69 a9       	ldd	r22, Y+49	; 0x31
    2458:	7a a9       	ldd	r23, Y+50	; 0x32
    245a:	8b a9       	ldd	r24, Y+51	; 0x33
    245c:	9c a9       	ldd	r25, Y+52	; 0x34
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <main+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	6d a9       	ldd	r22, Y+53	; 0x35
    2470:	7e a9       	ldd	r23, Y+54	; 0x36
    2472:	8f a9       	ldd	r24, Y+55	; 0x37
    2474:	98 ad       	ldd	r25, Y+56	; 0x38
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	98 ab       	std	Y+48, r25	; 0x30
    2494:	8f a7       	std	Y+47, r24	; 0x2f
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <main+0xba0>
    2498:	88 ec       	ldi	r24, 0xC8	; 200
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9e a7       	std	Y+46, r25	; 0x2e
    249e:	8d a7       	std	Y+45, r24	; 0x2d
    24a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <main+0xb8e>
    24a8:	9e a7       	std	Y+46, r25	; 0x2e
    24aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ae:	98 a9       	ldd	r25, Y+48	; 0x30
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	98 ab       	std	Y+48, r25	; 0x30
    24b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <main+0xb82>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <main+0xbd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	69 a9       	ldd	r22, Y+49	; 0x31
    24c2:	7a a9       	ldd	r23, Y+50	; 0x32
    24c4:	8b a9       	ldd	r24, Y+51	; 0x33
    24c6:	9c a9       	ldd	r25, Y+52	; 0x34
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	98 ab       	std	Y+48, r25	; 0x30
    24d2:	8f a7       	std	Y+47, r24	; 0x2f
    24d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d6:	98 a9       	ldd	r25, Y+48	; 0x30
    24d8:	9c a7       	std	Y+44, r25	; 0x2c
    24da:	8b a7       	std	Y+43, r24	; 0x2b
    24dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24de:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <main+0xbca>
    24e4:	9c a7       	std	Y+44, r25	; 0x2c
    24e6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);

			EEPROM_readByte(0x0031,&(arr_eeprom[2]));//read the value from address 0x0031  and put it in arr_eeprom[i]
    24e8:	29 e8       	ldi	r18, 0x89	; 137
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e3       	ldi	r24, 0x31	; 49
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	b9 01       	movw	r22, r18
    24f2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <EEPROM_readByte>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a8 e4       	ldi	r26, 0x48	; 72
    24fc:	b2 e4       	ldi	r27, 0x42	; 66
    24fe:	8f a3       	std	Y+39, r24	; 0x27
    2500:	98 a7       	std	Y+40, r25	; 0x28
    2502:	a9 a7       	std	Y+41, r26	; 0x29
    2504:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6f a1       	ldd	r22, Y+39	; 0x27
    2508:	78 a5       	ldd	r23, Y+40	; 0x28
    250a:	89 a5       	ldd	r24, Y+41	; 0x29
    250c:	9a a5       	ldd	r25, Y+42	; 0x2a
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8b a3       	std	Y+35, r24	; 0x23
    2520:	9c a3       	std	Y+36, r25	; 0x24
    2522:	ad a3       	std	Y+37, r26	; 0x25
    2524:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2526:	6b a1       	ldd	r22, Y+35	; 0x23
    2528:	7c a1       	ldd	r23, Y+36	; 0x24
    252a:	8d a1       	ldd	r24, Y+37	; 0x25
    252c:	9e a1       	ldd	r25, Y+38	; 0x26
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <main+0xc32>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9a a3       	std	Y+34, r25	; 0x22
    2544:	89 a3       	std	Y+33, r24	; 0x21
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <main+0xcb0>
	else if (__tmp > 65535)
    2548:	6b a1       	ldd	r22, Y+35	; 0x23
    254a:	7c a1       	ldd	r23, Y+36	; 0x24
    254c:	8d a1       	ldd	r24, Y+37	; 0x25
    254e:	9e a1       	ldd	r25, Y+38	; 0x26
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <main+0xc9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6f a1       	ldd	r22, Y+39	; 0x27
    2562:	78 a5       	ldd	r23, Y+40	; 0x28
    2564:	89 a5       	ldd	r24, Y+41	; 0x29
    2566:	9a a5       	ldd	r25, Y+42	; 0x2a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9a a3       	std	Y+34, r25	; 0x22
    2586:	89 a3       	std	Y+33, r24	; 0x21
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <main+0xc92>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	98 a3       	std	Y+32, r25	; 0x20
    2590:	8f 8f       	std	Y+31, r24	; 0x1f
    2592:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2594:	98 a1       	ldd	r25, Y+32	; 0x20
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <main+0xc80>
    259a:	98 a3       	std	Y+32, r25	; 0x20
    259c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	89 a1       	ldd	r24, Y+33	; 0x21
    25a0:	9a a1       	ldd	r25, Y+34	; 0x22
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9a a3       	std	Y+34, r25	; 0x22
    25a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	9a a1       	ldd	r25, Y+34	; 0x22
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <main+0xc74>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <main+0xcc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6b a1       	ldd	r22, Y+35	; 0x23
    25b4:	7c a1       	ldd	r23, Y+36	; 0x24
    25b6:	8d a1       	ldd	r24, Y+37	; 0x25
    25b8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
    25c6:	89 a1       	ldd	r24, Y+33	; 0x21
    25c8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	8d 8f       	std	Y+29, r24	; 0x1d
    25ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <main+0xcbc>
    25d6:	9e 8f       	std	Y+30, r25	; 0x1e
    25d8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);

			EEPROM_readByte(0x0041,&(arr_eeprom[3]));//read the value from address 0x0041  and put it in arr_eeprom[i]
    25da:	2a e8       	ldi	r18, 0x8A	; 138
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	81 e4       	ldi	r24, 0x41	; 65
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	b9 01       	movw	r22, r18
    25e4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <EEPROM_readByte>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a8 e4       	ldi	r26, 0x48	; 72
    25ee:	b2 e4       	ldi	r27, 0x42	; 66
    25f0:	89 8f       	std	Y+25, r24	; 0x19
    25f2:	9a 8f       	std	Y+26, r25	; 0x1a
    25f4:	ab 8f       	std	Y+27, r26	; 0x1b
    25f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f8:	69 8d       	ldd	r22, Y+25	; 0x19
    25fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a ef       	ldi	r20, 0xFA	; 250
    2606:	54 e4       	ldi	r21, 0x44	; 68
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	8d 8b       	std	Y+21, r24	; 0x15
    2612:	9e 8b       	std	Y+22, r25	; 0x16
    2614:	af 8b       	std	Y+23, r26	; 0x17
    2616:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	2c f4       	brge	.+10     	; 0x263a <main+0xd24>
		__ticks = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
    2638:	3f c0       	rjmp	.+126    	; 0x26b8 <main+0xda2>
	else if (__tmp > 65535)
    263a:	6d 89       	ldd	r22, Y+21	; 0x15
    263c:	7e 89       	ldd	r23, Y+22	; 0x16
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	4c f5       	brge	.+82     	; 0x26a4 <main+0xd8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	69 8d       	ldd	r22, Y+25	; 0x19
    2654:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	0f c0       	rjmp	.+30     	; 0x269a <main+0xd84>
    267c:	88 ec       	ldi	r24, 0xC8	; 200
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
    2684:	89 89       	ldd	r24, Y+17	; 0x11
    2686:	9a 89       	ldd	r25, Y+18	; 0x12
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <main+0xd72>
    268c:	9a 8b       	std	Y+18, r25	; 0x12
    268e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	8b 89       	ldd	r24, Y+19	; 0x13
    2692:	9c 89       	ldd	r25, Y+20	; 0x14
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	9c 8b       	std	Y+20, r25	; 0x14
    2698:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <main+0xd66>
    26a2:	14 c0       	rjmp	.+40     	; 0x26cc <main+0xdb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	98 8b       	std	Y+16, r25	; 0x10
    26be:	8f 87       	std	Y+15, r24	; 0x0f
    26c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c2:	98 89       	ldd	r25, Y+16	; 0x10
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <main+0xdae>
    26c8:	98 8b       	std	Y+16, r25	; 0x10
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);

			EEPROM_readByte(0x0051,&(arr_eeprom[4]));//read the value from address 0x0051  and put it in arr_eeprom[i]
    26cc:	2b e8       	ldi	r18, 0x8B	; 139
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	81 e5       	ldi	r24, 0x51	; 81
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	b9 01       	movw	r22, r18
    26d6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <EEPROM_readByte>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a8 e4       	ldi	r26, 0x48	; 72
    26e0:	b2 e4       	ldi	r27, 0x42	; 66
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a ef       	ldi	r20, 0xFA	; 250
    26f8:	54 e4       	ldi	r21, 0x44	; 68
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <main+0xe16>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <main+0xe94>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <main+0xe80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <main+0xe76>
    276e:	88 ec       	ldi	r24, 0xC8	; 200
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <main+0xe64>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <main+0xe58>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <main+0xea8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <main+0xea0>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);

			//////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////

			match=eeprom_match();//compare between two arrays
    27be:	0e 94 50 14 	call	0x28a0	; 0x28a0 <eeprom_match>
    27c2:	fe 01       	movw	r30, r28
    27c4:	e2 57       	subi	r30, 0x72	; 114
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 83       	st	Z, r24
			UART_sendByte(match);//send the result of compare to HMI_MCU
    27ca:	fe 01       	movw	r30, r28
    27cc:	e2 57       	subi	r30, 0x72	; 114
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
			step=UART_recieveByte();//now what??
    27d6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    27da:	80 93 76 00 	sts	0x0076, r24
			if(step==4)//now if step =4 open the motor and display unlocking message
    27de:	80 91 76 00 	lds	r24, 0x0076
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	81 f4       	brne	.+32     	; 0x2806 <main+0xef0>
			{//start if step=4
				Time1_SetCallBack(Motor_CW);//set the timer callback function to  Motor_CW
    27e6:	8d ec       	ldi	r24, 0xCD	; 205
    27e8:	94 e1       	ldi	r25, 0x14	; 20
    27ea:	0e 94 a8 09 	call	0x1350	; 0x1350 <Time1_SetCallBack>
				Timer1_Init(&Timer);//start timer
    27ee:	88 e6       	ldi	r24, 0x68	; 104
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 39 09 	call	0x1272	; 0x1272 <Timer1_Init>
				DcMotor_Rotate(CW,255);//start Dc Motor : direction clockwise and 255 speed full speed
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	6f ef       	ldi	r22, 0xFF	; 255
    27fa:	0e 94 9f 0b 	call	0x173e	; 0x173e <DcMotor_Rotate>
				UART_sendByte(1);//send one to make HMI_ECU display the unlocking message
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
    2804:	07 c9       	rjmp	.-3570   	; 0x1a14 <main+0xfe>
			}//end if step=4

			else if(step==0)//if step=0 not match turn on buzzer
    2806:	80 91 76 00 	lds	r24, 0x0076
    280a:	88 23       	and	r24, r24
    280c:	09 f0       	breq	.+2      	; 0x2810 <main+0xefa>
    280e:	02 c9       	rjmp	.-3580   	; 0x1a14 <main+0xfe>
			{//start if step=0
				step=5;//go to step 5
    2810:	85 e0       	ldi	r24, 0x05	; 5
    2812:	80 93 76 00 	sts	0x0076, r24
    2816:	fe c8       	rjmp	.-3588   	; 0x1a14 <main+0xfe>
			break;////////////////////end of case step 4
			///////////////////////////////////////////////////
			//////////////////////////////////////////////////
		case 5 ://start case 5
			/////////////////////////////
			ret=UART_recieveByte();//what now ?
    2818:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <UART_recieveByte>
    281c:	fe 01       	movw	r30, r28
    281e:	e3 57       	subi	r30, 0x73	; 115
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 83       	st	Z, r24

			if(ret==1)//now turn the buzzer on
    2824:	fe 01       	movw	r30, r28
    2826:	e3 57       	subi	r30, 0x73	; 115
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	19 f4       	brne	.+6      	; 0x2836 <main+0xf20>
			{
				BuzzerOn();//buzzer on
    2830:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <BuzzerOn>
    2834:	ef c8       	rjmp	.-3618   	; 0x1a14 <main+0xfe>
			}


			else if(ret==2)//now turn the buzzer off and return to the main step
    2836:	fe 01       	movw	r30, r28
    2838:	e3 57       	subi	r30, 0x73	; 115
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	09 f0       	breq	.+2      	; 0x2844 <main+0xf2e>
    2842:	e8 c8       	rjmp	.-3632   	; 0x1a14 <main+0xfe>
			{
				step=3;//go to step 3
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	80 93 76 00 	sts	0x0076, r24
				BuzzerOff();//buzzer off
    284a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <BuzzerOff>
    284e:	e2 c8       	rjmp	.-3644   	; 0x1a14 <main+0xfe>

00002850 <pass_match>:
/****************************************************************************
 *                          Function Body
 *****************************************************************************/

uint8 pass_match()//fuction to check if the to passwords are match or not
{//start pass_match func
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <pass_match+0x6>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
    285a:	1a 82       	std	Y+2, r1	; 0x02
    285c:	18 c0       	rjmp	.+48     	; 0x288e <pass_match+0x3e>
	{//start for loop
		if(arr_pass[i] == arr_confirm[i])//if not match
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	fc 01       	movw	r30, r24
    2866:	e3 58       	subi	r30, 0x83	; 131
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	20 81       	ld	r18, Z
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	fc 01       	movw	r30, r24
    2874:	ee 57       	subi	r30, 0x7E	; 126
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	28 17       	cp	r18, r24
    287c:	31 f4       	brne	.+12     	; 0x288a <pass_match+0x3a>
		{//start if not match
			ret= 1;//return false
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	89 83       	std	Y+1, r24	; 0x01
 *****************************************************************************/

uint8 pass_match()//fuction to check if the to passwords are match or not
{//start pass_match func
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	8a 83       	std	Y+2, r24	; 0x02
    2888:	02 c0       	rjmp	.+4      	; 0x288e <pass_match+0x3e>
		if(arr_pass[i] == arr_confirm[i])//if not match
		{//start if not match
			ret= 1;//return false
		}//end if not match
		else{
			ret=0;
    288a:	19 82       	std	Y+1, r1	; 0x01
    288c:	03 c0       	rjmp	.+6      	; 0x2894 <pass_match+0x44>
 *****************************************************************************/

uint8 pass_match()//fuction to check if the to passwords are match or not
{//start pass_match func
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	84 30       	cpi	r24, 0x04	; 4
    2892:	28 f3       	brcs	.-54     	; 0x285e <pass_match+0xe>
		else{
			ret=0;
			break;
		}
	}//end for loop
	return ret;//return true if matched
    2894:	89 81       	ldd	r24, Y+1	; 0x01
}//end pass_match func
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <eeprom_match>:



uint8 eeprom_match()
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <eeprom_match+0x6>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
    28aa:	1a 82       	std	Y+2, r1	; 0x02
    28ac:	18 c0       	rjmp	.+48     	; 0x28de <eeprom_match+0x3e>
	{//start for loop
		if(arr_eeprom[i] == confirm_eeprom[i])//if not match
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	fc 01       	movw	r30, r24
    28b6:	e9 57       	subi	r30, 0x79	; 121
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	20 81       	ld	r18, Z
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	fc 01       	movw	r30, r24
    28c4:	e8 58       	subi	r30, 0x88	; 136
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	28 17       	cp	r18, r24
    28cc:	31 f4       	brne	.+12     	; 0x28da <eeprom_match+0x3a>
		{//start if not match
			ret= 1;//return false
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	89 83       	std	Y+1, r24	; 0x01


uint8 eeprom_match()
{
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	8a 83       	std	Y+2, r24	; 0x02
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <eeprom_match+0x3e>
		if(arr_eeprom[i] == confirm_eeprom[i])//if not match
		{//start if not match
			ret= 1;//return false
		}//end if not match
		else{
			ret=0;
    28da:	19 82       	std	Y+1, r1	; 0x01
    28dc:	03 c0       	rjmp	.+6      	; 0x28e4 <eeprom_match+0x44>


uint8 eeprom_match()
{
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	84 30       	cpi	r24, 0x04	; 4
    28e2:	28 f3       	brcs	.-54     	; 0x28ae <eeprom_match+0xe>
		else{
			ret=0;
			break;
		}
	}//end for loop
	return ret;//return true if matched
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
}//end pass_match func
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <Motor_End>:

//---------------------------------------callback function----------------------------------------------//

void Motor_End(void)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
	TFlag++;
    28f8:	80 91 77 00 	lds	r24, 0x0077
    28fc:	8f 5f       	subi	r24, 0xFF	; 255
    28fe:	80 93 77 00 	sts	0x0077, r24
		if(TFlag==1)
    2902:	80 91 77 00 	lds	r24, 0x0077
    2906:	81 30       	cpi	r24, 0x01	; 1
    2908:	59 f4       	brne	.+22     	; 0x2920 <Motor_End+0x30>
		{

	Timer1_DeInit();//stop the timer
    290a:	0e 94 9e 09 	call	0x133c	; 0x133c <Timer1_DeInit>
	DcMotor_Rotate(OFF,0);//stop the dc motor
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	0e 94 9f 0b 	call	0x173e	; 0x173e <DcMotor_Rotate>
	UART_sendByte(4);//back to the main page
    2916:	84 e0       	ldi	r24, 0x04	; 4
    2918:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
	TFlag=0;
    291c:	10 92 77 00 	sts	0x0077, r1
		}}
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <Motor_ACW>:



void Motor_ACW(void)
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
	TFlag++;
    292e:	80 91 77 00 	lds	r24, 0x0077
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	80 93 77 00 	sts	0x0077, r24
	if(TFlag==1)
    2938:	80 91 77 00 	lds	r24, 0x0077
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	69 f4       	brne	.+26     	; 0x295a <Motor_ACW+0x34>
	{
		DcMotor_Rotate(A_CW,255);//dc motor direction Anti clockwise and speed 255 full speed
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	6f ef       	ldi	r22, 0xFF	; 255
    2944:	0e 94 9f 0b 	call	0x173e	; 0x173e <DcMotor_Rotate>
		UART_sendByte(3);//locking message
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
		Time1_SetCallBack(Motor_End);//set the timer callback function to Motor_End
    294e:	88 e7       	ldi	r24, 0x78	; 120
    2950:	94 e1       	ldi	r25, 0x14	; 20
    2952:	0e 94 a8 09 	call	0x1350	; 0x1350 <Time1_SetCallBack>
		TFlag=0;//reset the tflag for the next time
    2956:	10 92 77 00 	sts	0x0077, r1

	}}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <Motor_stop>:


void Motor_stop(void)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
	TFlag++;
    2968:	80 91 77 00 	lds	r24, 0x0077
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	80 93 77 00 	sts	0x0077, r24
	if(TFlag==1)
    2972:	80 91 77 00 	lds	r24, 0x0077
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	69 f4       	brne	.+26     	; 0x2994 <Motor_stop+0x34>
	{
		DcMotor_Rotate(OFF,0);//stop the dc motor
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	0e 94 9f 0b 	call	0x173e	; 0x173e <DcMotor_Rotate>
		UART_sendByte(2);//Holding message
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
		Time1_SetCallBack(Motor_ACW);////set the timer callback function to Motor_ACW
    2988:	83 e9       	ldi	r24, 0x93	; 147
    298a:	94 e1       	ldi	r25, 0x14	; 20
    298c:	0e 94 a8 09 	call	0x1350	; 0x1350 <Time1_SetCallBack>
		TFlag=0;//reset the tflag for the next time
    2990:	10 92 77 00 	sts	0x0077, r1

	}}
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <Motor_CW>:


void Motor_CW(void)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
	TFlag++;
    29a2:	80 91 77 00 	lds	r24, 0x0077
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	80 93 77 00 	sts	0x0077, r24
	if(TFlag==2)
    29ac:	80 91 77 00 	lds	r24, 0x0077
    29b0:	82 30       	cpi	r24, 0x02	; 2
    29b2:	69 f4       	brne	.+26     	; 0x29ce <Motor_CW+0x34>
	{
		DcMotor_Rotate(CW,255);//dc motor direction clockwise and speed 255 full speed
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	6f ef       	ldi	r22, 0xFF	; 255
    29b8:	0e 94 9f 0b 	call	0x173e	; 0x173e <DcMotor_Rotate>
		UART_sendByte(1);//unlocking message
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_sendByte>
		Time1_SetCallBack(Motor_stop);//set the timer callback function to Motor_stop
    29c2:	80 eb       	ldi	r24, 0xB0	; 176
    29c4:	94 e1       	ldi	r25, 0x14	; 20
    29c6:	0e 94 a8 09 	call	0x1350	; 0x1350 <Time1_SetCallBack>
		TFlag=0;//reset the tflag for the next time
    29ca:	10 92 77 00 	sts	0x0077, r1
	}}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <__udivmodsi4>:
    29d4:	a1 e2       	ldi	r26, 0x21	; 33
    29d6:	1a 2e       	mov	r1, r26
    29d8:	aa 1b       	sub	r26, r26
    29da:	bb 1b       	sub	r27, r27
    29dc:	fd 01       	movw	r30, r26
    29de:	0d c0       	rjmp	.+26     	; 0x29fa <__udivmodsi4_ep>

000029e0 <__udivmodsi4_loop>:
    29e0:	aa 1f       	adc	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	ee 1f       	adc	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	a2 17       	cp	r26, r18
    29ea:	b3 07       	cpc	r27, r19
    29ec:	e4 07       	cpc	r30, r20
    29ee:	f5 07       	cpc	r31, r21
    29f0:	20 f0       	brcs	.+8      	; 0x29fa <__udivmodsi4_ep>
    29f2:	a2 1b       	sub	r26, r18
    29f4:	b3 0b       	sbc	r27, r19
    29f6:	e4 0b       	sbc	r30, r20
    29f8:	f5 0b       	sbc	r31, r21

000029fa <__udivmodsi4_ep>:
    29fa:	66 1f       	adc	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	1a 94       	dec	r1
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <__udivmodsi4_loop>
    2a06:	60 95       	com	r22
    2a08:	70 95       	com	r23
    2a0a:	80 95       	com	r24
    2a0c:	90 95       	com	r25
    2a0e:	9b 01       	movw	r18, r22
    2a10:	ac 01       	movw	r20, r24
    2a12:	bd 01       	movw	r22, r26
    2a14:	cf 01       	movw	r24, r30
    2a16:	08 95       	ret

00002a18 <__prologue_saves__>:
    2a18:	2f 92       	push	r2
    2a1a:	3f 92       	push	r3
    2a1c:	4f 92       	push	r4
    2a1e:	5f 92       	push	r5
    2a20:	6f 92       	push	r6
    2a22:	7f 92       	push	r7
    2a24:	8f 92       	push	r8
    2a26:	9f 92       	push	r9
    2a28:	af 92       	push	r10
    2a2a:	bf 92       	push	r11
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	ca 1b       	sub	r28, r26
    2a42:	db 0b       	sbc	r29, r27
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	09 94       	ijmp

00002a50 <__epilogue_restores__>:
    2a50:	2a 88       	ldd	r2, Y+18	; 0x12
    2a52:	39 88       	ldd	r3, Y+17	; 0x11
    2a54:	48 88       	ldd	r4, Y+16	; 0x10
    2a56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a62:	b9 84       	ldd	r11, Y+9	; 0x09
    2a64:	c8 84       	ldd	r12, Y+8	; 0x08
    2a66:	df 80       	ldd	r13, Y+7	; 0x07
    2a68:	ee 80       	ldd	r14, Y+6	; 0x06
    2a6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a70:	aa 81       	ldd	r26, Y+2	; 0x02
    2a72:	b9 81       	ldd	r27, Y+1	; 0x01
    2a74:	ce 0f       	add	r28, r30
    2a76:	d1 1d       	adc	r29, r1
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	ed 01       	movw	r28, r26
    2a84:	08 95       	ret

00002a86 <_exit>:
    2a86:	f8 94       	cli

00002a88 <__stop_program>:
    2a88:	ff cf       	rjmp	.-2      	; 0x2a88 <__stop_program>
