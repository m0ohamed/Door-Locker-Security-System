
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00004d6c  00004e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080010c  0080010c  00004eac  2**0
                  ALLOC
  3 .stab         00003f54  00000000  00000000  00004eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019f8  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e779  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 11 	call	0x228a	; 0x228a <main>
      8a:	0c 94 b4 26 	jmp	0x4d68	; 0x4d68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 26 	jmp	0x4ca8	; 0x4ca8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 26 	jmp	0x4ca8	; 0x4ca8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SetupPinDirection>:
#include "My_GPIO.h"

//pin input or output direction
//if number of port or the number of pins invalid ,do nothing
void SetupPinDirection(uint8 port_num,uint8 pin_num,uint8 direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <SetupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <SetupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <SetupPinDirection+0x2a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <SetupPinDirection+0xb0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <SetupPinDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <SetupPinDirection+0x58>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <SetupPinDirection+0x1b6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <SetupPinDirection+0x4a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <SetupPinDirection+0x108>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <SetupPinDirection+0x56>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <SetupPinDirection+0x160>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <SetupPinDirection+0x1b6>
	{
	case PORTA_ID:
		if(direction==OUTPUT_PIN)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <SetupPinDirection+0x86>
		{
		SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <SetupPinDirection+0x7c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <SetupPinDirection+0x78>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <SetupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <SetupPinDirection+0xa4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <SetupPinDirection+0xa0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <SetupPinDirection+0x1b6>
		}
		break;
	case PORTB_ID:
		if(direction==OUTPUT_PIN)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <SetupPinDirection+0xde>
				{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <SetupPinDirection+0xd4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <SetupPinDirection+0xd0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <SetupPinDirection+0x1b6>
				}
				else
				{
					CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <SetupPinDirection+0xfc>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <SetupPinDirection+0xf8>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <SetupPinDirection+0x1b6>
				}
		break;
	case PORTC_ID:
		if(direction==OUTPUT_PIN)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <SetupPinDirection+0x136>
						{
						SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <SetupPinDirection+0x12c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <SetupPinDirection+0x128>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <SetupPinDirection+0x1b6>
						}
						else
						{
							CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <SetupPinDirection+0x154>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <SetupPinDirection+0x150>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <SetupPinDirection+0x1b6>
						}
		break;
	case PORTD_ID:
		if(direction==OUTPUT_PIN)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <SetupPinDirection+0x18e>
						{
						SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <SetupPinDirection+0x184>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <SetupPinDirection+0x180>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <SetupPinDirection+0x1b6>
						}
						else
						{
							CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <SetupPinDirection+0x1ac>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <SetupPinDirection+0x1a8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
						}
		break;
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <Write_Pin>:

//pin HIGH or LOW direction
//if number of port or the number of pins invalid ,do nothing
void Write_Pin(uint8 port_num ,uint8 pin_num ,uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <Write_Pin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <Write_Pin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	3d 83       	std	Y+5, r19	; 0x05
     d28:	2c 83       	std	Y+4, r18	; 0x04
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	9d 81       	ldd	r25, Y+5	; 0x05
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <Write_Pin+0x2a>
     d34:	43 c0       	rjmp	.+134    	; 0xdbc <Write_Pin+0xb0>
     d36:	2c 81       	ldd	r18, Y+4	; 0x04
     d38:	3d 81       	ldd	r19, Y+5	; 0x05
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	2c f4       	brge	.+10     	; 0xd4a <Write_Pin+0x3e>
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	71 f0       	breq	.+28     	; 0xd64 <Write_Pin+0x58>
     d48:	bc c0       	rjmp	.+376    	; 0xec2 <Write_Pin+0x1b6>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <Write_Pin+0x4a>
     d54:	5f c0       	rjmp	.+190    	; 0xe14 <Write_Pin+0x108>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <Write_Pin+0x56>
     d60:	85 c0       	rjmp	.+266    	; 0xe6c <Write_Pin+0x160>
     d62:	af c0       	rjmp	.+350    	; 0xec2 <Write_Pin+0x1b6>
	{
	case PORTA_ID:
		if(value==LOGIC_HIGH)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <Write_Pin+0x86>
		{	SET_BIT(PORTA,pin_num);}
     d6a:	ab e3       	ldi	r26, 0x3B	; 59
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb e3       	ldi	r30, 0x3B	; 59
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <Write_Pin+0x7c>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <Write_Pin+0x78>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	98 c0       	rjmp	.+304    	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTA,pin_num);}
     d92:	ab e3       	ldi	r26, 0x3B	; 59
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e3       	ldi	r30, 0x3B	; 59
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Write_Pin+0xa4>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <Write_Pin+0xa0>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	83 c0       	rjmp	.+262    	; 0xec2 <Write_Pin+0x1b6>
		break;
	case PORTB_ID:
		if(value==LOGIC_HIGH)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	a1 f4       	brne	.+40     	; 0xdea <Write_Pin+0xde>
		{	SET_BIT(PORTB,pin_num);}
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <Write_Pin+0xd4>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <Write_Pin+0xd0>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	6c c0       	rjmp	.+216    	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTB,pin_num);}
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <Write_Pin+0xfc>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <Write_Pin+0xf8>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	57 c0       	rjmp	.+174    	; 0xec2 <Write_Pin+0x1b6>
		break;
	case PORTC_ID:
		if(value==LOGIC_HIGH)
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <Write_Pin+0x136>
		{	SET_BIT(PORTC,pin_num);}
     e1a:	a5 e3       	ldi	r26, 0x35	; 53
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e3       	ldi	r30, 0x35	; 53
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <Write_Pin+0x12c>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <Write_Pin+0x128>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	40 c0       	rjmp	.+128    	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTC,pin_num);}
     e42:	a5 e3       	ldi	r26, 0x35	; 53
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e5 e3       	ldi	r30, 0x35	; 53
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <Write_Pin+0x154>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <Write_Pin+0x150>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	2b c0       	rjmp	.+86     	; 0xec2 <Write_Pin+0x1b6>
		break;
	case PORTD_ID:
		if(value==LOGIC_HIGH)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f4       	brne	.+40     	; 0xe9a <Write_Pin+0x18e>
		{	SET_BIT(PORTD,pin_num);}
     e72:	a2 e3       	ldi	r26, 0x32	; 50
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <Write_Pin+0x184>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <Write_Pin+0x180>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <Write_Pin+0x1b6>
		else{CLEAR_BIT(PORTD,pin_num);}
     e9a:	a2 e3       	ldi	r26, 0x32	; 50
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <Write_Pin+0x1ac>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <Write_Pin+0x1a8>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
		break;
	}
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <Read_Pin>:
//return the value of pin_num
//if number of port or the number of pins invalid ,return 0
uint8 Read_Pin(uint8 port_num ,uint8 pin_num)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <Read_Pin+0x6>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Read_Pin+0x8>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	8a 83       	std	Y+2, r24	; 0x02
     ee2:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pinvalue=0;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUMBER_OF_PORTS) && (pin_num>=NUMBER_OF_PINS))
	{
		//do nothing
	}
	switch(port_num)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3d 83       	std	Y+5, r19	; 0x05
     eee:	2c 83       	std	Y+4, r18	; 0x04
     ef0:	4c 81       	ldd	r20, Y+4	; 0x04
     ef2:	5d 81       	ldd	r21, Y+5	; 0x05
     ef4:	41 30       	cpi	r20, 0x01	; 1
     ef6:	51 05       	cpc	r21, r1
     ef8:	71 f1       	breq	.+92     	; 0xf56 <Read_Pin+0x84>
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	91 05       	cpc	r25, r1
     f02:	34 f4       	brge	.+12     	; 0xf10 <Read_Pin+0x3e>
     f04:	2c 81       	ldd	r18, Y+4	; 0x04
     f06:	3d 81       	ldd	r19, Y+5	; 0x05
     f08:	21 15       	cp	r18, r1
     f0a:	31 05       	cpc	r19, r1
     f0c:	69 f0       	breq	.+26     	; 0xf28 <Read_Pin+0x56>
     f0e:	64 c0       	rjmp	.+200    	; 0xfd8 <Read_Pin+0x106>
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	42 30       	cpi	r20, 0x02	; 2
     f16:	51 05       	cpc	r21, r1
     f18:	a1 f1       	breq	.+104    	; 0xf82 <Read_Pin+0xb0>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	91 05       	cpc	r25, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <Read_Pin+0x54>
     f24:	44 c0       	rjmp	.+136    	; 0xfae <Read_Pin+0xdc>
     f26:	58 c0       	rjmp	.+176    	; 0xfd8 <Read_Pin+0x106>
	{
	case PORTA_ID:
		if(BIT_IS_SET(PINA,pin_num)){pinvalue=1;}
     f28:	e9 e3       	ldi	r30, 0x39	; 57
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <Read_Pin+0x6e>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	8a 95       	dec	r24
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <Read_Pin+0x6a>
     f44:	ca 01       	movw	r24, r20
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	90 70       	andi	r25, 0x00	; 0
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <Read_Pin+0x7e>
     f4e:	44 c0       	rjmp	.+136    	; 0xfd8 <Read_Pin+0x106>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	41 c0       	rjmp	.+130    	; 0xfd8 <Read_Pin+0x106>
		break;
	case PORTB_ID:
		if(BIT_IS_SET(PINB,pin_num)){pinvalue=1;}
     f56:	e6 e3       	ldi	r30, 0x36	; 54
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <Read_Pin+0x9c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <Read_Pin+0x98>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	71 f1       	breq	.+92     	; 0xfd8 <Read_Pin+0x106>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	2b c0       	rjmp	.+86     	; 0xfd8 <Read_Pin+0x106>
		break;
	case PORTC_ID:
		if(BIT_IS_SET(PINC,pin_num)){pinvalue=1;}
     f82:	e3 e3       	ldi	r30, 0x33	; 51
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <Read_Pin+0xc8>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <Read_Pin+0xc4>
     f9e:	ca 01       	movw	r24, r20
     fa0:	81 70       	andi	r24, 0x01	; 1
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	88 23       	and	r24, r24
     fa6:	c1 f0       	breq	.+48     	; 0xfd8 <Read_Pin+0x106>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	15 c0       	rjmp	.+42     	; 0xfd8 <Read_Pin+0x106>
		break;
	case PORTD_ID:
		if(BIT_IS_SET(PIND,pin_num)){pinvalue=1;}
     fae:	e0 e3       	ldi	r30, 0x30	; 48
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <Read_Pin+0xf4>
     fc2:	55 95       	asr	r21
     fc4:	47 95       	ror	r20
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <Read_Pin+0xf0>
     fca:	ca 01       	movw	r24, r20
     fcc:	81 70       	andi	r24, 0x01	; 1
     fce:	90 70       	andi	r25, 0x00	; 0
     fd0:	88 23       	and	r24, r24
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <Read_Pin+0x106>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return pinvalue;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <SetupPortDirection>:

//port input or output direction
//if number of port invalid ,do nothing
void SetupPortDirection(uint8 port_num ,uint8 direction)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <SetupPortDirection+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <SetupPortDirection+0x8>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}

	switch(port_num)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3c 83       	std	Y+4, r19	; 0x04
    1002:	2b 83       	std	Y+3, r18	; 0x03
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	d1 f0       	breq	.+52     	; 0x1042 <SetupPortDirection+0x58>
    100e:	2b 81       	ldd	r18, Y+3	; 0x03
    1010:	3c 81       	ldd	r19, Y+4	; 0x04
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <SetupPortDirection+0x38>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	61 f0       	breq	.+24     	; 0x1038 <SetupPortDirection+0x4e>
    1020:	1e c0       	rjmp	.+60     	; 0x105e <SetupPortDirection+0x74>
    1022:	2b 81       	ldd	r18, Y+3	; 0x03
    1024:	3c 81       	ldd	r19, Y+4	; 0x04
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	81 f0       	breq	.+32     	; 0x104c <SetupPortDirection+0x62>
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	81 f0       	breq	.+32     	; 0x1056 <SetupPortDirection+0x6c>
    1036:	13 c0       	rjmp	.+38     	; 0x105e <SetupPortDirection+0x74>
	{
	case PORTA_ID:
		DDRA=direction;
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	80 83       	st	Z, r24
    1040:	0e c0       	rjmp	.+28     	; 0x105e <SetupPortDirection+0x74>
		break;
	case PORTB_ID:
		DDRB=direction;
    1042:	e7 e3       	ldi	r30, 0x37	; 55
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	80 83       	st	Z, r24
    104a:	09 c0       	rjmp	.+18     	; 0x105e <SetupPortDirection+0x74>
		break;
	case PORTC_ID:
		DDRC=direction;
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	80 83       	st	Z, r24
    1054:	04 c0       	rjmp	.+8      	; 0x105e <SetupPortDirection+0x74>
		break;
	case PORTD_ID:
		DDRD=direction;
    1056:	e1 e3       	ldi	r30, 0x31	; 49
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	80 83       	st	Z, r24
		break;
	}
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Write_Port>:

//port HIGH or LOW
//if number of port invalid ,do nothing
void Write_Port(uint8 port_num ,uint8 value)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <Write_Port+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <Write_Port+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}

	switch(port_num)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	d1 f0       	breq	.+52     	; 0x10c4 <Write_Port+0x58>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <Write_Port+0x38>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	61 f0       	breq	.+24     	; 0x10ba <Write_Port+0x4e>
    10a2:	1e c0       	rjmp	.+60     	; 0x10e0 <Write_Port+0x74>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	81 f0       	breq	.+32     	; 0x10ce <Write_Port+0x62>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <Write_Port+0x6c>
    10b8:	13 c0       	rjmp	.+38     	; 0x10e0 <Write_Port+0x74>
	{
	case PORTA_ID:
		PORTA=value;
    10ba:	eb e3       	ldi	r30, 0x3B	; 59
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <Write_Port+0x74>
		break;
	case PORTB_ID:
		PORTB=value;
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <Write_Port+0x74>
		break;
	case PORTC_ID:
		PORTC=value;
    10ce:	e5 e3       	ldi	r30, 0x35	; 53
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <Write_Port+0x74>
		break;
	case PORTD_ID:
		PORTD=value;
    10d8:	e2 e3       	ldi	r30, 0x32	; 50
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
		break;
	}
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <Read_Port>:

//return the vlaue of port
//if number of port invalid ,return 0
uint8 Read_Port(uint8 port_num)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <Read_Port+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <Read_Port+0x8>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portvalue=0;
    10fc:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUMBER_OF_PORTS))
	{
		//do nothing
	}
	switch(port_num)
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3c 83       	std	Y+4, r19	; 0x04
    1106:	2b 83       	std	Y+3, r18	; 0x03
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	d1 f0       	breq	.+52     	; 0x1146 <Read_Port+0x58>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <Read_Port+0x38>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	61 f0       	breq	.+24     	; 0x113c <Read_Port+0x4e>
    1124:	1e c0       	rjmp	.+60     	; 0x1162 <Read_Port+0x74>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <Read_Port+0x62>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	81 f0       	breq	.+32     	; 0x115a <Read_Port+0x6c>
    113a:	13 c0       	rjmp	.+38     	; 0x1162 <Read_Port+0x74>
	{
	case PORTA_ID:
		portvalue=PINA;
    113c:	e9 e3       	ldi	r30, 0x39	; 57
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <Read_Port+0x74>
		break;
	case PORTB_ID:
		portvalue=PINB;
    1146:	e6 e3       	ldi	r30, 0x36	; 54
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <Read_Port+0x74>
		break;
	case PORTC_ID:
		portvalue=PINC;
    1150:	e3 e3       	ldi	r30, 0x33	; 51
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <Read_Port+0x74>
		break;
	case PORTD_ID:
		portvalue=PIND;
    115a:	e0 e3       	ldi	r30, 0x30	; 48
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return portvalue;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <__vector_9>:
/*global variable to save the address of the call back function */
static void (*g_callBackPtr)(void) = Null_ptr;

/*ISR of timer 1 when overflow occurs */
ISR(TIMER1_OVF_vect)
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != Null_ptr)
    119c:	80 91 0c 01 	lds	r24, 0x010C
    11a0:	90 91 0d 01 	lds	r25, 0x010D
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <__vector_9+0x40>
			{
				/* Call the Call Back function in the application */
				(*g_callBackPtr)();
    11a8:	e0 91 0c 01 	lds	r30, 0x010C
    11ac:	f0 91 0d 01 	lds	r31, 0x010D
    11b0:	09 95       	icall
			}
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_7>:


/*ISR of timer 1 when compare match occurs */

ISR(TIMER1_COMPA_vect)
{
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	6f 93       	push	r22
    11ec:	7f 93       	push	r23
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	ef 93       	push	r30
    11f8:	ff 93       	push	r31
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != Null_ptr)
    1202:	80 91 0c 01 	lds	r24, 0x010C
    1206:	90 91 0d 01 	lds	r25, 0x010D
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	29 f0       	breq	.+10     	; 0x1218 <__vector_7+0x40>
			{
				/* Call the Call Back function in the application */
				(*g_callBackPtr)();
    120e:	e0 91 0c 01 	lds	r30, 0x010C
    1212:	f0 91 0d 01 	lds	r31, 0x010D
    1216:	09 95       	icall
			}
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <Timer1_Init>:



//initialization of timer 1 with overflow and compare match modes
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <Timer1_Init+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =Config_Ptr->initial_value;//Put the initial value in TCNT1
    124c:	ac e4       	ldi	r26, 0x4C	; 76
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
	OCR1A =Config_Ptr->compare_value;//Put the compare value in OCR1A
    125e:	aa e4       	ldi	r26, 0x4A	; 74
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e9 81       	ldd	r30, Y+1	; 0x01
    1264:	fa 81       	ldd	r31, Y+2	; 0x02
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
	if((Config_Ptr->Mode)==Normal)//if overflow mode
    1270:	e9 81       	ldd	r30, Y+1	; 0x01
    1272:	fa 81       	ldd	r31, Y+2	; 0x02
    1274:	85 81       	ldd	r24, Z+5	; 0x05
    1276:	88 23       	and	r24, r24
    1278:	d9 f4       	brne	.+54     	; 0x12b0 <Timer1_Init+0x72>
	{
		TCCR1A=0x0C;//WGM10 and WGM11 are cleared.... FOC1A and FOC1B set (Non-PWM Mode)
    127a:	ef e4       	ldi	r30, 0x4F	; 79
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8c e0       	ldi	r24, 0x0C	; 12
    1280:	80 83       	st	Z, r24
		TCCR1B=0x00;//WGM12 and WGM13 are cleared
    1282:	ee e4       	ldi	r30, 0x4E	; 78
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	10 82       	st	Z, r1
		TCCR1B= (TCCR1B & 0xF8) | ((uint8)(Config_Ptr->prescaler));//put the value of prescaler in CS10 ,CS11 and CS12
    1288:	ae e4       	ldi	r26, 0x4E	; 78
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ee e4       	ldi	r30, 0x4E	; 78
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	98 2f       	mov	r25, r24
    1294:	98 7f       	andi	r25, 0xF8	; 248
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	84 81       	ldd	r24, Z+4	; 0x04
    129c:	89 2b       	or	r24, r25
    129e:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE1);//enable overflow interrupt
    12a0:	a9 e5       	ldi	r26, 0x59	; 89
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e9 e5       	ldi	r30, 0x59	; 89
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	84 60       	ori	r24, 0x04	; 4
    12ac:	8c 93       	st	X, r24
    12ae:	20 c0       	rjmp	.+64     	; 0x12f0 <Timer1_Init+0xb2>
	}
	else if((Config_Ptr->Mode)==CTC)
    12b0:	e9 81       	ldd	r30, Y+1	; 0x01
    12b2:	fa 81       	ldd	r31, Y+2	; 0x02
    12b4:	85 81       	ldd	r24, Z+5	; 0x05
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	d9 f4       	brne	.+54     	; 0x12f0 <Timer1_Init+0xb2>
	{
		TCCR1A=0x0C;//WGM10 and WGM11 are cleared.... FOC1A and FOC1B set (Non-PWM Mode)
    12ba:	ef e4       	ldi	r30, 0x4F	; 79
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8c e0       	ldi	r24, 0x0C	; 12
    12c0:	80 83       	st	Z, r24
		TCCR1B=0x08;//WGM12=1 and WGM13 is cleared
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	88 e0       	ldi	r24, 0x08	; 8
    12c8:	80 83       	st	Z, r24
		TCCR1B= (TCCR1B & 0xF8) | ((uint8)(Config_Ptr->prescaler));//put the value of prescaler in CS10 ,CS11 and CS12
    12ca:	ae e4       	ldi	r26, 0x4E	; 78
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ee e4       	ldi	r30, 0x4E	; 78
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	98 2f       	mov	r25, r24
    12d6:	98 7f       	andi	r25, 0xF8	; 248
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	84 81       	ldd	r24, Z+4	; 0x04
    12de:	89 2b       	or	r24, r25
    12e0:	8c 93       	st	X, r24
		TIMSK |=(1<< OCIE1A);//enable compare match interrupt
    12e2:	a9 e5       	ldi	r26, 0x59	; 89
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e9 e5       	ldi	r30, 0x59	; 89
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 61       	ori	r24, 0x10	; 16
    12ee:	8c 93       	st	X, r24


	}
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <Timer1_DeInit>:

//stop the timer/counter
void Timer1_DeInit(void)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;//No clock source
    1302:	ee e4       	ldi	r30, 0x4E	; 78
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	10 82       	st	Z, r1
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <Time1_SetCallBack>:


void Time1_SetCallBack(void (*a_Ptr) (void))
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <Time1_SetCallBack+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr=a_Ptr;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	90 93 0d 01 	sts	0x010D, r25
    1324:	80 93 0c 01 	sts	0x010C, r24
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <UART_init+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <UART_init+0x8>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1342:	1a 82       	std	Y+2, r1	; 0x02
    1344:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (UCSRA & 0xFD) | (1<<1);
    1346:	ab e2       	ldi	r26, 0x2B	; 43
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e2       	ldi	r30, 0x2B	; 43
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	82 60       	ori	r24, 0x02	; 2
    1352:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1354:	ea e2       	ldi	r30, 0x2A	; 42
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	88 e1       	ldi	r24, 0x18	; 24
    135a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL)  | ((UCSRC & 0xCF) | ((Config_Ptr->Parity)<<4)) | ((UCSRC & 0xF7) | ((Config_Ptr->Stop_Bit)<<3))  | ((UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1));
    135c:	a0 e4       	ldi	r26, 0x40	; 64
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e0 e4       	ldi	r30, 0x40	; 64
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	2f 7c       	andi	r18, 0xCF	; 207
    136a:	eb 81       	ldd	r30, Y+3	; 0x03
    136c:	fc 81       	ldd	r31, Y+4	; 0x04
    136e:	81 81       	ldd	r24, Z+1	; 0x01
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	82 95       	swap	r24
    1376:	92 95       	swap	r25
    1378:	90 7f       	andi	r25, 0xF0	; 240
    137a:	98 27       	eor	r25, r24
    137c:	80 7f       	andi	r24, 0xF0	; 240
    137e:	98 27       	eor	r25, r24
    1380:	82 2b       	or	r24, r18
    1382:	38 2f       	mov	r19, r24
    1384:	30 68       	ori	r19, 0x80	; 128
    1386:	e0 e4       	ldi	r30, 0x40	; 64
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	27 7f       	andi	r18, 0xF7	; 247
    1390:	eb 81       	ldd	r30, Y+3	; 0x03
    1392:	fc 81       	ldd	r31, Y+4	; 0x04
    1394:	82 81       	ldd	r24, Z+2	; 0x02
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	82 2b       	or	r24, r18
    13a8:	38 2b       	or	r19, r24
    13aa:	e0 e4       	ldi	r30, 0x40	; 64
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	29 7f       	andi	r18, 0xF9	; 249
    13b4:	eb 81       	ldd	r30, Y+3	; 0x03
    13b6:	fc 81       	ldd	r31, Y+4	; 0x04
    13b8:	80 81       	ld	r24, Z
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	82 2b       	or	r24, r18
    13c4:	83 2b       	or	r24, r19
    13c6:	8c 93       	st	X, r24
	if((Config_Ptr->bit_data)==_9_Bit_Mode)
    13c8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ca:	fc 81       	ldd	r31, Y+4	; 0x04
    13cc:	80 81       	ld	r24, Z
    13ce:	87 30       	cpi	r24, 0x07	; 7
    13d0:	39 f4       	brne	.+14     	; 0x13e0 <UART_init+0xae>
	{
		UCSRB |= (1<<2);
    13d2:	aa e2       	ldi	r26, 0x2A	; 42
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e2       	ldi	r30, 0x2A	; 42
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	84 60       	ori	r24, 0x04	; 4
    13de:	8c 93       	st	X, r24
	}

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( (Config_Ptr->BaudeRate)* 8UL))) - 1);
    13e0:	eb 81       	ldd	r30, Y+3	; 0x03
    13e2:	fc 81       	ldd	r31, Y+4	; 0x04
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	94 81       	ldd	r25, Z+4	; 0x04
    13e8:	cc 01       	movw	r24, r24
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	aa 1f       	adc	r26, r26
    13f4:	bb 1f       	adc	r27, r27
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	aa 1f       	adc	r26, r26
    13fc:	bb 1f       	adc	r27, r27
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	aa 1f       	adc	r26, r26
    1404:	bb 1f       	adc	r27, r27
    1406:	9c 01       	movw	r18, r24
    1408:	ad 01       	movw	r20, r26
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	92 e1       	ldi	r25, 0x12	; 18
    140e:	aa e7       	ldi	r26, 0x7A	; 122
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__udivmodsi4>
    141a:	da 01       	movw	r26, r20
    141c:	c9 01       	movw	r24, r18
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1424:	e0 e4       	ldi	r30, 0x40	; 64
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	89 2f       	mov	r24, r25
    142e:	99 27       	eor	r25, r25
    1430:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1432:	e9 e2       	ldi	r30, 0x29	; 41
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	80 83       	st	Z, r24
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1454:	eb e2       	ldi	r30, 0x2B	; 43
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	80 72       	andi	r24, 0x20	; 32
    1460:	90 70       	andi	r25, 0x00	; 0
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	b9 f3       	breq	.-18     	; 0x1454 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1466:	ec e2       	ldi	r30, 0x2C	; 44
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){};
    147e:	eb e2       	ldi	r30, 0x2B	; 43
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	88 23       	and	r24, r24
    1486:	dc f7       	brge	.-10     	; 0x147e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1488:	ec e2       	ldi	r30, 0x2C	; 44
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <UART_sendString+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9b 83       	std	Y+3, r25	; 0x03
    14a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	0e c0       	rjmp	.+28     	; 0x14c4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	fc 01       	movw	r30, r24
    14b4:	e2 0f       	add	r30, r18
    14b6:	f3 1f       	adc	r31, r19
    14b8:	80 81       	ld	r24, Z
    14ba:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
		i++;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	9b 81       	ldd	r25, Y+3	; 0x03
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	80 81       	ld	r24, Z
    14d6:	88 23       	and	r24, r24
    14d8:	39 f7       	brne	.-50     	; 0x14a8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <UART_receiveString+0xa>
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	9b 83       	std	Y+3, r25	; 0x03
    14f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14fa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	8c 01       	movw	r16, r24
    1508:	02 0f       	add	r16, r18
    150a:	13 1f       	adc	r17, r19
    150c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_recieveByte>
    1510:	f8 01       	movw	r30, r16
    1512:	80 83       	st	Z, r24
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	9b 81       	ldd	r25, Y+3	; 0x03
    1526:	8c 01       	movw	r16, r24
    1528:	02 0f       	add	r16, r18
    152a:	13 1f       	adc	r17, r19
    152c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_recieveByte>
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	fc 01       	movw	r30, r24
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	80 81       	ld	r24, Z
    1546:	83 32       	cpi	r24, 0x23	; 35
    1548:	31 f7       	brne	.-52     	; 0x1516 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	9b 81       	ldd	r25, Y+3	; 0x03
    1554:	fc 01       	movw	r30, r24
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	10 82       	st	Z, r1
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <LCD_init>:
#include <util/delay.h>
#include <stdlib.h>

#include "../MCAL/My_GPIO.h"
void LCD_init(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	2e 97       	sbiw	r28, 0x0e	; 14
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
	SetupPinDirection(LCD_RS_BIT_PORT_ID,LCD_RS_BIT_PIN_ID,OUTPUT_PIN);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,OUTPUT_PIN);
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	62 e0       	ldi	r22, 0x02	; 2
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 ea       	ldi	r26, 0xA0	; 160
    159a:	b1 e4       	ldi	r27, 0x41	; 65
    159c:	8b 87       	std	Y+11, r24	; 0x0b
    159e:	9c 87       	std	Y+12, r25	; 0x0c
    15a0:	ad 87       	std	Y+13, r26	; 0x0d
    15a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a ef       	ldi	r20, 0xFA	; 250
    15b2:	54 e4       	ldi	r21, 0x44	; 68
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8f 83       	std	Y+7, r24	; 0x07
    15be:	98 87       	std	Y+8, r25	; 0x08
    15c0:	a9 87       	std	Y+9, r26	; 0x09
    15c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <LCD_init+0x7a>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <LCD_init+0xf8>
	else if (__tmp > 65535)
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e2       	ldi	r20, 0x20	; 32
    160c:	51 e4       	ldi	r21, 0x41	; 65
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <LCD_init+0xda>
    1628:	88 ec       	ldi	r24, 0xC8	; 200
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_init+0xc8>
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f7       	brne	.-38     	; 0x1628 <LCD_init+0xbc>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_init+0x104>
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
	SetupPinDirection(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN3_ID,OUTPUT_PIN);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#elif (LCD_DATA_BITS_MODE==8)
	SetupPortDirection(DATA_BUS_PORT_ID,OUTPUT_PORT);
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	0e 94 f5 07 	call	0xfea	; 0xfea <SetupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1680:	88 e3       	ldi	r24, 0x38	; 56
    1682:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    1686:	8c e0       	ldi	r24, 0x0C	; 12
    1688:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>

}
    1692:	2e 96       	adiw	r28, 0x0e	; 14
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <LCD_sendCommand>:



void LCD_sendCommand (uint8 command)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	6d 97       	sbiw	r28, 0x1d	; 29
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	8d 8f       	std	Y+29, r24	; 0x1d
	Write_Pin(LCD_RS_BIT_PORT_ID,LCD_RS_BIT_PIN_ID,LOGIC_LOW);
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a0 e8       	ldi	r26, 0x80	; 128
    16ca:	bf e3       	ldi	r27, 0x3F	; 63
    16cc:	89 8f       	std	Y+25, r24	; 0x19
    16ce:	9a 8f       	std	Y+26, r25	; 0x1a
    16d0:	ab 8f       	std	Y+27, r26	; 0x1b
    16d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d4:	69 8d       	ldd	r22, Y+25	; 0x19
    16d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4a ef       	ldi	r20, 0xFA	; 250
    16e2:	54 e4       	ldi	r21, 0x44	; 68
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	8d 8b       	std	Y+21, r24	; 0x15
    16ee:	9e 8b       	std	Y+22, r25	; 0x16
    16f0:	af 8b       	std	Y+23, r26	; 0x17
    16f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16f4:	6d 89       	ldd	r22, Y+21	; 0x15
    16f6:	7e 89       	ldd	r23, Y+22	; 0x16
    16f8:	8f 89       	ldd	r24, Y+23	; 0x17
    16fa:	98 8d       	ldd	r25, Y+24	; 0x18
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	2c f4       	brge	.+10     	; 0x1716 <LCD_sendCommand+0x72>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c 8b       	std	Y+20, r25	; 0x14
    1712:	8b 8b       	std	Y+19, r24	; 0x13
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1716:	6d 89       	ldd	r22, Y+21	; 0x15
    1718:	7e 89       	ldd	r23, Y+22	; 0x16
    171a:	8f 89       	ldd	r24, Y+23	; 0x17
    171c:	98 8d       	ldd	r25, Y+24	; 0x18
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	57 e4       	ldi	r21, 0x47	; 71
    1726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172a:	18 16       	cp	r1, r24
    172c:	4c f5       	brge	.+82     	; 0x1780 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172e:	69 8d       	ldd	r22, Y+25	; 0x19
    1730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9c 8b       	std	Y+20, r25	; 0x14
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <LCD_sendCommand+0xd2>
    1758:	88 ec       	ldi	r24, 0xC8	; 200
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9a 8b       	std	Y+18, r25	; 0x12
    175e:	89 8b       	std	Y+17, r24	; 0x11
    1760:	89 89       	ldd	r24, Y+17	; 0x11
    1762:	9a 89       	ldd	r25, Y+18	; 0x12
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_sendCommand+0xc0>
    1768:	9a 8b       	std	Y+18, r25	; 0x12
    176a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1776:	8b 89       	ldd	r24, Y+19	; 0x13
    1778:	9c 89       	ldd	r25, Y+20	; 0x14
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	69 f7       	brne	.-38     	; 0x1758 <LCD_sendCommand+0xb4>
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	6d 89       	ldd	r22, Y+21	; 0x15
    1782:	7e 89       	ldd	r23, Y+22	; 0x16
    1784:	8f 89       	ldd	r24, Y+23	; 0x17
    1786:	98 8d       	ldd	r25, Y+24	; 0x18
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	98 8b       	std	Y+16, r25	; 0x10
    179a:	8f 87       	std	Y+15, r24	; 0x0f
    179c:	8f 85       	ldd	r24, Y+15	; 0x0f
    179e:	98 89       	ldd	r25, Y+16	; 0x10
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LCD_sendCommand+0xfc>
    17a4:	98 8b       	std	Y+16, r25	; 0x10
    17a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_HIGH);
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	62 e0       	ldi	r22, 0x02	; 2
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e8       	ldi	r26, 0x80	; 128
    17b8:	bf e3       	ldi	r27, 0x3F	; 63
    17ba:	8b 87       	std	Y+11, r24	; 0x0b
    17bc:	9c 87       	std	Y+12, r25	; 0x0c
    17be:	ad 87       	std	Y+13, r26	; 0x0d
    17c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a ef       	ldi	r20, 0xFA	; 250
    17d0:	54 e4       	ldi	r21, 0x44	; 68
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	8f 83       	std	Y+7, r24	; 0x07
    17dc:	98 87       	std	Y+8, r25	; 0x08
    17de:	a9 87       	std	Y+9, r26	; 0x09
    17e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e8       	ldi	r20, 0x80	; 128
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f6:	88 23       	and	r24, r24
    17f8:	2c f4       	brge	.+10     	; 0x1804 <LCD_sendCommand+0x160>
		__ticks = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	3f c0       	rjmp	.+126    	; 0x1882 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	4c f5       	brge	.+82     	; 0x186e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	6b 85       	ldd	r22, Y+11	; 0x0b
    181e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1820:	8d 85       	ldd	r24, Y+13	; 0x0d
    1822:	9e 85       	ldd	r25, Y+14	; 0x0e
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	8d 83       	std	Y+5, r24	; 0x05
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <LCD_sendCommand+0x1c0>
    1846:	88 ec       	ldi	r24, 0xC8	; 200
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_sendCommand+0x1ae>
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	69 f7       	brne	.-38     	; 0x1846 <LCD_sendCommand+0x1a2>
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	6f 81       	ldd	r22, Y+7	; 0x07
    1870:	78 85       	ldd	r23, Y+8	; 0x08
    1872:	89 85       	ldd	r24, Y+9	; 0x09
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_sendCommand+0x1ea>
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN2_ID,GET_BIT(command,2));
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN3_ID,GET_BIT(command,3));
_delay_ms(1);
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
#elif (LCD_DATA_BITS_MODE==8)
Write_Port(DATA_BUS_PORT_ID,command);
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	6d 8d       	ldd	r22, Y+29	; 0x1d
    189a:	0e 94 36 08 	call	0x106c	; 0x106c <Write_Port>
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
#endif
}
    18a8:	6d 96       	adiw	r28, 0x1d	; 29
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <LCD_sendCharacter>:
void LCD_sendCharacter (uint8 character)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	6d 97       	sbiw	r28, 0x1d	; 29
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d
	Write_Pin(LCD_RS_BIT_PORT_ID,LCD_RS_BIT_PIN_ID,LOGIC_HIGH);
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e8       	ldi	r26, 0x80	; 128
    18e0:	bf e3       	ldi	r27, 0x3F	; 63
    18e2:	89 8f       	std	Y+25, r24	; 0x19
    18e4:	9a 8f       	std	Y+26, r25	; 0x1a
    18e6:	ab 8f       	std	Y+27, r26	; 0x1b
    18e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	69 8d       	ldd	r22, Y+25	; 0x19
    18ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a ef       	ldi	r20, 0xFA	; 250
    18f8:	54 e4       	ldi	r21, 0x44	; 68
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8d 8b       	std	Y+21, r24	; 0x15
    1904:	9e 8b       	std	Y+22, r25	; 0x16
    1906:	af 8b       	std	Y+23, r26	; 0x17
    1908:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    190a:	6d 89       	ldd	r22, Y+21	; 0x15
    190c:	7e 89       	ldd	r23, Y+22	; 0x16
    190e:	8f 89       	ldd	r24, Y+23	; 0x17
    1910:	98 8d       	ldd	r25, Y+24	; 0x18
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <LCD_sendCharacter+0x72>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9c 8b       	std	Y+20, r25	; 0x14
    1928:	8b 8b       	std	Y+19, r24	; 0x13
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <LCD_sendCharacter+0xf0>
	else if (__tmp > 65535)
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <LCD_sendCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	69 8d       	ldd	r22, Y+25	; 0x19
    1946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9c 8b       	std	Y+20, r25	; 0x14
    196a:	8b 8b       	std	Y+19, r24	; 0x13
    196c:	0f c0       	rjmp	.+30     	; 0x198c <LCD_sendCharacter+0xd2>
    196e:	88 ec       	ldi	r24, 0xC8	; 200
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9a 8b       	std	Y+18, r25	; 0x12
    1974:	89 8b       	std	Y+17, r24	; 0x11
    1976:	89 89       	ldd	r24, Y+17	; 0x11
    1978:	9a 89       	ldd	r25, Y+18	; 0x12
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_sendCharacter+0xc0>
    197e:	9a 8b       	std	Y+18, r25	; 0x12
    1980:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	8b 89       	ldd	r24, Y+19	; 0x13
    1984:	9c 89       	ldd	r25, Y+20	; 0x14
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	8b 89       	ldd	r24, Y+19	; 0x13
    198e:	9c 89       	ldd	r25, Y+20	; 0x14
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <LCD_sendCharacter+0xb4>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <LCD_sendCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	6d 89       	ldd	r22, Y+21	; 0x15
    1998:	7e 89       	ldd	r23, Y+22	; 0x16
    199a:	8f 89       	ldd	r24, Y+23	; 0x17
    199c:	98 8d       	ldd	r25, Y+24	; 0x18
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	98 8b       	std	Y+16, r25	; 0x10
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
    19b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b4:	98 89       	ldd	r25, Y+16	; 0x10
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_sendCharacter+0xfc>
    19ba:	98 8b       	std	Y+16, r25	; 0x10
    19bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_HIGH);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	62 e0       	ldi	r22, 0x02	; 2
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a0 e8       	ldi	r26, 0x80	; 128
    19ce:	bf e3       	ldi	r27, 0x3F	; 63
    19d0:	8b 87       	std	Y+11, r24	; 0x0b
    19d2:	9c 87       	std	Y+12, r25	; 0x0c
    19d4:	ad 87       	std	Y+13, r26	; 0x0d
    19d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a ef       	ldi	r20, 0xFA	; 250
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8f 83       	std	Y+7, r24	; 0x07
    19f2:	98 87       	std	Y+8, r25	; 0x08
    19f4:	a9 87       	std	Y+9, r26	; 0x09
    19f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f8:	6f 81       	ldd	r22, Y+7	; 0x07
    19fa:	78 85       	ldd	r23, Y+8	; 0x08
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <LCD_sendCharacter+0x160>
		__ticks = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	3f c0       	rjmp	.+126    	; 0x1a98 <LCD_sendCharacter+0x1de>
	else if (__tmp > 65535)
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	4c f5       	brge	.+82     	; 0x1a84 <LCD_sendCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e2       	ldi	r20, 0x20	; 32
    1a40:	51 e4       	ldi	r21, 0x41	; 65
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <LCD_sendCharacter+0x1c0>
    1a5c:	88 ec       	ldi	r24, 0xC8	; 200
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_sendCharacter+0x1ae>
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	69 f7       	brne	.-38     	; 0x1a5c <LCD_sendCharacter+0x1a2>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <LCD_sendCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <LCD_sendCharacter+0x1ea>
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN2_ID,GET_BIT(character,2));
	Write_Pin(DATA_BUS_PORT_ID,LCD_DATA_BUS_4BITMODE_PIN3_ID,GET_BIT(character,3));
_delay_ms(1);
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
#elif (LCD_DATA_BITS_MODE==8)
Write_Port(DATA_BUS_PORT_ID,character);
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ab0:	0e 94 36 08 	call	0x106c	; 0x106c <Write_Port>
Write_Pin(LCD_E_BIT_PORT_ID,LCD_E_BIT_PIN_ID,LOGIC_LOW);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>
#endif
}
    1abe:	6d 96       	adiw	r28, 0x1d	; 29
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <LCD_sendString>:


void LCD_sendString(const char *sptr)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <LCD_sendString+0x6>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <LCD_sendString+0x24>
	while(*sptr!='\0')
	{
		LCD_sendCharacter(*sptr);
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	80 81       	ld	r24, Z
    1ae6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_sendCharacter>
		sptr++;
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_sendString(const char *sptr)
{
	while(*sptr!='\0')
    1af4:	e9 81       	ldd	r30, Y+1	; 0x01
    1af6:	fa 81       	ldd	r31, Y+2	; 0x02
    1af8:	80 81       	ld	r24, Z
    1afa:	88 23       	and	r24, r24
    1afc:	89 f7       	brne	.-30     	; 0x1ae0 <LCD_sendString+0x10>
	{
		LCD_sendCharacter(*sptr);
		sptr++;
	}
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <LCD_moveCursor+0x6>
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <LCD_moveCursor+0x8>
    1b10:	0f 92       	push	r0
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3d 83       	std	Y+5, r19	; 0x05
    1b22:	2c 83       	std	Y+4, r18	; 0x04
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	c1 f0       	breq	.+48     	; 0x1b5e <LCD_moveCursor+0x56>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_moveCursor+0x3a>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <LCD_moveCursor+0x50>
    1b40:	19 c0       	rjmp	.+50     	; 0x1b74 <LCD_moveCursor+0x6c>
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
    1b44:	3d 81       	ldd	r19, Y+5	; 0x05
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	69 f0       	breq	.+26     	; 0x1b66 <LCD_moveCursor+0x5e>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <LCD_moveCursor+0x66>
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	0b c0       	rjmp	.+22     	; 0x1b74 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	80 5c       	subi	r24, 0xC0	; 192
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	80 5f       	subi	r24, 0xF0	; 240
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	80 5b       	subi	r24, 0xB0	; 176
    1b72:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	80 68       	ori	r24, 0x80	; 128
    1b78:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <LCD_displayStringRowColumn+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <LCD_displayStringRowColumn+0x8>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	6a 83       	std	Y+2, r22	; 0x02
    1b9c:	5c 83       	std	Y+4, r21	; 0x04
    1b9e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
	LCD_sendString(Str); /* display the string */
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendString>
}
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	62 97       	sbiw	r28, 0x12	; 18
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	9a 8b       	std	Y+18, r25	; 0x12
    1bd4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1bd6:	89 89       	ldd	r24, Y+17	; 0x11
    1bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bda:	9e 01       	movw	r18, r28
    1bdc:	2f 5f       	subi	r18, 0xFF	; 255
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	b9 01       	movw	r22, r18
    1be2:	4a e0       	ldi	r20, 0x0A	; 10
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	0e 94 6f 26 	call	0x4cde	; 0x4cde <itoa>
   LCD_sendString(buff); /* Display the string */
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendString>
}
    1bf2:	62 96       	adiw	r28, 0x12	; 18
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
}
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	60 97       	sbiw	r28, 0x10	; 16
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	SetupPinDirection(KEYPAD_ROWS_ID, KEYPAD_FIRST_ROW_PIN_ID, INPUT_PIN);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(KEYPAD_ROWS_ID, KEYPAD_FIRST_ROW_PIN_ID+1, INPUT_PIN);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(KEYPAD_ROWS_ID, KEYPAD_FIRST_ROW_PIN_ID+2, INPUT_PIN);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(KEYPAD_ROWS_ID, KEYPAD_FIRST_ROW_PIN_ID+3, INPUT_PIN);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	63 e0       	ldi	r22, 0x03	; 3
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>

	SetupPinDirection(KEYPAD_COLS_ID, KEYPAD_FIRST_COL_PIN_ID, INPUT_PIN);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	64 e0       	ldi	r22, 0x04	; 4
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(KEYPAD_COLS_ID, KEYPAD_FIRST_COL_PIN_ID+1, INPUT_PIN);
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	65 e0       	ldi	r22, 0x05	; 5
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
	SetupPinDirection(KEYPAD_COLS_ID, KEYPAD_FIRST_COL_PIN_ID+2, INPUT_PIN);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	66 e0       	ldi	r22, 0x06	; 6
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
#if(NUM_OF_COL == 4)
	SetupPinDirection(KEYPAD_COLS_ID, KEYPAD_FIRST_COL_PIN_ID+3, INPUT_PIN);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	67 e0       	ldi	r22, 0x07	; 7
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<NUM_OF_ROWS ; row++) /* loop for rows */
    1c7c:	1f 86       	std	Y+15, r1	; 0x0f
    1c7e:	ab c0       	rjmp	.+342    	; 0x1dd6 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			SetupPinDirection(KEYPAD_ROWS_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT_PIN);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>

			/* Set/Clear the row output pin */
			Write_Pin(KEYPAD_ROWS_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 86 06 	call	0xd0c	; 0xd0c <Write_Pin>

			for(col=0 ; col<NUM_OF_COL ; col++) /* loop for columns */
    1c94:	18 8a       	std	Y+16, r1	; 0x10
    1c96:	22 c0       	rjmp	.+68     	; 0x1cdc <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(Read_Pin(KEYPAD_COLS_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c98:	88 89       	ldd	r24, Y+16	; 0x10
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	9c 5f       	subi	r25, 0xFC	; 252
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	0e 94 69 07 	call	0xed2	; 0xed2 <Read_Pin>
    1ca6:	88 23       	and	r24, r24
    1ca8:	b1 f4       	brne	.+44     	; 0x1cd6 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (NUM_OF_COL == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*NUM_OF_COL)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COL)+col+1);
    1caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	98 2f       	mov	r25, r24
    1cba:	88 89       	ldd	r24, Y+16	; 0x10
    1cbc:	89 0f       	add	r24, r25
    1cbe:	8f 5f       	subi	r24, 0xFF	; 255
    1cc0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <KEYPAD_4x4_adjustKeyNumber>
			}
			SetupPinDirection(KEYPAD_ROWS_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT_PIN);
			_delay_ms(70); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1cc4:	60 96       	adiw	r28, 0x10	; 16
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret
			SetupPinDirection(KEYPAD_ROWS_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT_PIN);

			/* Set/Clear the row output pin */
			Write_Pin(KEYPAD_ROWS_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<NUM_OF_COL ; col++) /* loop for columns */
    1cd6:	88 89       	ldd	r24, Y+16	; 0x10
    1cd8:	8f 5f       	subi	r24, 0xFF	; 255
    1cda:	88 8b       	std	Y+16, r24	; 0x10
    1cdc:	88 89       	ldd	r24, Y+16	; 0x10
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	d8 f2       	brcs	.-74     	; 0x1c98 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COL)+col+1);
						#endif
					#endif
				}
			}
			SetupPinDirection(KEYPAD_ROWS_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT_PIN);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 a3 05 	call	0xb46	; 0xb46 <SetupPinDirection>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	ac e8       	ldi	r26, 0x8C	; 140
    1cf2:	b2 e4       	ldi	r27, 0x42	; 66
    1cf4:	8b 87       	std	Y+11, r24	; 0x0b
    1cf6:	9c 87       	std	Y+12, r25	; 0x0c
    1cf8:	ad 87       	std	Y+13, r26	; 0x0d
    1cfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a ef       	ldi	r20, 0xFA	; 250
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8f 83       	std	Y+7, r24	; 0x07
    1d16:	98 87       	std	Y+8, r25	; 0x08
    1d18:	a9 87       	std	Y+9, r26	; 0x09
    1d1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	3f c0       	rjmp	.+126    	; 0x1dbc <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	4c f5       	brge	.+82     	; 0x1da8 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <KEYPAD_getPressedKey+0x186>
    1d80:	88 ec       	ldi	r24, 0xC8	; 200
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <KEYPAD_getPressedKey+0x174>
    1d90:	9c 83       	std	Y+4, r25	; 0x04
    1d92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <KEYPAD_getPressedKey+0x168>
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <KEYPAD_getPressedKey+0x1b0>
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
#if(NUM_OF_COL == 4)
	SetupPinDirection(KEYPAD_COLS_ID, KEYPAD_FIRST_COL_PIN_ID+3, INPUT_PIN);
#endif
	while(1)
	{
		for(row=0 ; row<NUM_OF_ROWS ; row++) /* loop for rows */
    1dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	84 30       	cpi	r24, 0x04	; 4
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <KEYPAD_getPressedKey+0x1c6>
    1ddc:	51 cf       	rjmp	.-350    	; 0x1c80 <KEYPAD_getPressedKey+0x68>
    1dde:	4e cf       	rjmp	.-356    	; 0x1c7c <KEYPAD_getPressedKey+0x64>

00001de0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1dee:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3c 83       	std	Y+4, r19	; 0x04
    1df8:	2b 83       	std	Y+3, r18	; 0x03
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	88 30       	cpi	r24, 0x08	; 8
    1e00:	91 05       	cpc	r25, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e04:	70 c0       	rjmp	.+224    	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	29 30       	cpi	r18, 0x09	; 9
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	5c f5       	brge	.+86     	; 0x1e66 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e1a:	59 c0       	rjmp	.+178    	; 0x1ece <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	25 30       	cpi	r18, 0x05	; 5
    1e22:	31 05       	cpc	r19, r1
    1e24:	9c f4       	brge	.+38     	; 0x1e4c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e30:	48 c0       	rjmp	.+144    	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	23 30       	cpi	r18, 0x03	; 3
    1e38:	31 05       	cpc	r19, r1
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e3c:	45 c0       	rjmp	.+138    	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e48:	39 c0       	rjmp	.+114    	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e4a:	67 c0       	rjmp	.+206    	; 0x1f1a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	26 30       	cpi	r18, 0x06	; 6
    1e52:	31 05       	cpc	r19, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e56:	41 c0       	rjmp	.+130    	; 0x1eda <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	87 30       	cpi	r24, 0x07	; 7
    1e5e:	91 05       	cpc	r25, r1
    1e60:	0c f0       	brlt	.+2      	; 0x1e64 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e62:	3e c0       	rjmp	.+124    	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e64:	37 c0       	rjmp	.+110    	; 0x1ed4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	2c 30       	cpi	r18, 0x0C	; 12
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e70:	46 c0       	rjmp	.+140    	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	8d 30       	cpi	r24, 0x0D	; 13
    1e78:	91 05       	cpc	r25, r1
    1e7a:	5c f4       	brge	.+22     	; 0x1e92 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	2a 30       	cpi	r18, 0x0A	; 10
    1e82:	31 05       	cpc	r19, r1
    1e84:	b1 f1       	breq	.+108    	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	8b 30       	cpi	r24, 0x0B	; 11
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	a4 f5       	brge	.+104    	; 0x1ef8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e90:	2d c0       	rjmp	.+90     	; 0x1eec <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e92:	2b 81       	ldd	r18, Y+3	; 0x03
    1e94:	3c 81       	ldd	r19, Y+4	; 0x04
    1e96:	2e 30       	cpi	r18, 0x0E	; 14
    1e98:	31 05       	cpc	r19, r1
    1e9a:	b9 f1       	breq	.+110    	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	8e 30       	cpi	r24, 0x0E	; 14
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	7c f1       	brlt	.+94     	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	2f 30       	cpi	r18, 0x0F	; 15
    1eac:	31 05       	cpc	r19, r1
    1eae:	79 f1       	breq	.+94     	; 0x1f0e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	80 31       	cpi	r24, 0x10	; 16
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	69 f1       	breq	.+90     	; 0x1f14 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1eba:	2f c0       	rjmp	.+94     	; 0x1f1a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ebc:	87 e0       	ldi	r24, 0x07	; 7
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	2e c0       	rjmp	.+92     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ec2:	88 e0       	ldi	r24, 0x08	; 8
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	2b c0       	rjmp	.+86     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ec8:	89 e0       	ldi	r24, 0x09	; 9
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	28 c0       	rjmp	.+80     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ece:	85 e2       	ldi	r24, 0x25	; 37
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	25 c0       	rjmp	.+74     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	22 c0       	rjmp	.+68     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1eda:	85 e0       	ldi	r24, 0x05	; 5
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	1f c0       	rjmp	.+62     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ee0:	86 e0       	ldi	r24, 0x06	; 6
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	1c c0       	rjmp	.+56     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ee6:	8a e2       	ldi	r24, 0x2A	; 42
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	19 c0       	rjmp	.+50     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	16 c0       	rjmp	.+44     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	13 c0       	rjmp	.+38     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	10 c0       	rjmp	.+32     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1efe:	8d e2       	ldi	r24, 0x2D	; 45
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	0d c0       	rjmp	.+26     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f04:	8d e0       	ldi	r24, 0x0D	; 13
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	0a c0       	rjmp	.+20     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1f0a:	19 82       	std	Y+1, r1	; 0x01
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f0e:	8d e3       	ldi	r24, 0x3D	; 61
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f14:	8b e2       	ldi	r24, 0x2B	; 43
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <Timer>:
 * Timer is a callback function
 * used to tell the Control_MCU to turn off buzzer
 * and return to the normal flow of step 3 the main page
 * */
void Timer(void)
{//start Timer
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	2e 97       	sbiw	r28, 0x0e	; 14
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
	TFlag++;//increment TFlag to count 1 minute
    1f42:	80 91 0f 01 	lds	r24, 0x010F
    1f46:	8f 5f       	subi	r24, 0xFF	; 255
    1f48:	80 93 0f 01 	sts	0x010F, r24
	if(TFlag==2)//when TFlag =2
    1f4c:	80 91 0f 01 	lds	r24, 0x010F
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <Timer+0x28>
    1f54:	81 c0       	rjmp	.+258    	; 0x2058 <Timer+0x12a>
	{//start if TFlag =2
		UART_sendByte(5);//make Control_MCU to execute step 5
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 ea       	ldi	r26, 0xA0	; 160
    1f62:	b1 e4       	ldi	r27, 0x41	; 65
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
    1f66:	9c 87       	std	Y+12, r25	; 0x0c
    1f68:	ad 87       	std	Y+13, r26	; 0x0d
    1f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8f 83       	std	Y+7, r24	; 0x07
    1f86:	98 87       	std	Y+8, r25	; 0x08
    1f88:	a9 87       	std	Y+9, r26	; 0x09
    1f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <Timer+0x80>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <Timer+0xfe>
	else if (__tmp > 65535)
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <Timer+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <Timer+0xe0>
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <Timer+0xce>
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <Timer+0xc2>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <Timer+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <Timer+0x10a>
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);//some time to send the next byte
		UART_sendByte(2);//make the Control_MCU turn off the buzzer
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
		LCD_clearScreen();//clear the screen
    2046:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
		step=3;//return to step 3
    204a:	83 e0       	ldi	r24, 0x03	; 3
    204c:	80 93 0e 01 	sts	0x010E, r24
		Timer1_DeInit();//stop the timer
    2050:	0e 94 7d 09 	call	0x12fa	; 0x12fa <Timer1_DeInit>
		TFlag=0;//reset TFlag to the next time
    2054:	10 92 0f 01 	sts	0x010F, r1
	}//end of the if TFlag=2
}//end of timer
    2058:	2e 96       	adiw	r28, 0x0e	; 14
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <timer_function>:
 * used Display error message and to tell the Control_MCU to turn ON buzzer
 * and return to the normal flow of step 0 nothing to do during the error message
 * */

void timer_function(void)
{//start timer_function
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	6c 97       	sbiw	r28, 0x1c	; 28
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
	timer.initial_value=0;//set the initial value of the timer counter to 0
    207e:	10 92 01 01 	sts	0x0101, r1
    2082:	10 92 00 01 	sts	0x0100, r1
	UART_sendByte(5);////make Control_MCU to execute step 5
    2086:	85 e0       	ldi	r24, 0x05	; 5
    2088:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 ea       	ldi	r26, 0xA0	; 160
    2092:	b1 e4       	ldi	r27, 0x41	; 65
    2094:	89 8f       	std	Y+25, r24	; 0x19
    2096:	9a 8f       	std	Y+26, r25	; 0x1a
    2098:	ab 8f       	std	Y+27, r26	; 0x1b
    209a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	69 8d       	ldd	r22, Y+25	; 0x19
    209e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a ef       	ldi	r20, 0xFA	; 250
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	8d 8b       	std	Y+21, r24	; 0x15
    20b6:	9e 8b       	std	Y+22, r25	; 0x16
    20b8:	af 8b       	std	Y+23, r26	; 0x17
    20ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <timer_function+0x74>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <timer_function+0xf2>
	else if (__tmp > 65535)
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <timer_function+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	69 8d       	ldd	r22, Y+25	; 0x19
    20f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
    211e:	0f c0       	rjmp	.+30     	; 0x213e <timer_function+0xd4>
    2120:	88 ec       	ldi	r24, 0xC8	; 200
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9a 8b       	std	Y+18, r25	; 0x12
    2126:	89 8b       	std	Y+17, r24	; 0x11
    2128:	89 89       	ldd	r24, Y+17	; 0x11
    212a:	9a 89       	ldd	r25, Y+18	; 0x12
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <timer_function+0xc2>
    2130:	9a 8b       	std	Y+18, r25	; 0x12
    2132:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8b 89       	ldd	r24, Y+19	; 0x13
    2140:	9c 89       	ldd	r25, Y+20	; 0x14
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <timer_function+0xb6>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <timer_function+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9c 8b       	std	Y+20, r25	; 0x14
    215a:	8b 8b       	std	Y+19, r24	; 0x13
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	98 8b       	std	Y+16, r25	; 0x10
    2162:	8f 87       	std	Y+15, r24	; 0x0f
    2164:	8f 85       	ldd	r24, Y+15	; 0x0f
    2166:	98 89       	ldd	r25, Y+16	; 0x10
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <timer_function+0xfe>
    216c:	98 8b       	std	Y+16, r25	; 0x10
    216e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);//some time to send the next byte
	UART_sendByte(1);//make the Control_MCU turn ON the buzzer
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
	LCD_clearScreen();//clear the screen
    2176:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,3,"ERROR...");//display first message on screen
    217a:	20 e6       	ldi	r18, 0x60	; 96
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	63 e0       	ldi	r22, 0x03	; 3
    2182:	a9 01       	movw	r20, r18
    2184:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a8 ec       	ldi	r26, 0xC8	; 200
    218e:	b2 e4       	ldi	r27, 0x42	; 66
    2190:	8b 87       	std	Y+11, r24	; 0x0b
    2192:	9c 87       	std	Y+12, r25	; 0x0c
    2194:	ad 87       	std	Y+13, r26	; 0x0d
    2196:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8f 83       	std	Y+7, r24	; 0x07
    21b2:	98 87       	std	Y+8, r25	; 0x08
    21b4:	a9 87       	std	Y+9, r26	; 0x09
    21b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <timer_function+0x170>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <timer_function+0x1ee>
	else if (__tmp > 65535)
    21da:	6f 81       	ldd	r22, Y+7	; 0x07
    21dc:	78 85       	ldd	r23, Y+8	; 0x08
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <timer_function+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
    221a:	0f c0       	rjmp	.+30     	; 0x223a <timer_function+0x1d0>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9c 83       	std	Y+4, r25	; 0x04
    2222:	8b 83       	std	Y+3, r24	; 0x03
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <timer_function+0x1be>
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <timer_function+0x1b2>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <timer_function+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <timer_function+0x1fa>
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	step=0;//return to the normal flow of step 0 nothing to do during the error message
    226c:	10 92 0e 01 	sts	0x010E, r1
	Time1_SetCallBack(Timer);//call Timer function the next overflow
    2270:	87 e9       	ldi	r24, 0x97	; 151
    2272:	9f e0       	ldi	r25, 0x0F	; 15
    2274:	0e 94 87 09 	call	0x130e	; 0x130e <Time1_SetCallBack>
}//end of timer_function
    2278:	6c 96       	adiw	r28, 0x1c	; 28
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <main>:
/******************************************************************************************
 	 	 	 	 	 	 	     main Function
 ******************************************************************************************/

int main(void)
{ //start main
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	c6 56       	subi	r28, 0x66	; 102
    2298:	d1 40       	sbci	r29, 0x01	; 1
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
	/***************************************initializations***************************************************/
	SREG |=(1<<7);//enable global interrupt
    22a4:	af e5       	ldi	r26, 0x5F	; 95
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e5       	ldi	r30, 0x5F	; 95
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	80 68       	ori	r24, 0x80	; 128
    22b0:	8c 93       	st	X, r24
	uint8 /*PIRto check PIR sensor,*/ counter=0/*count the number of times the password was incorrect */;
    22b2:	fe 01       	movw	r30, r28
    22b4:	e8 5a       	subi	r30, 0xA8	; 168
    22b6:	fe 4f       	sbci	r31, 0xFE	; 254
    22b8:	10 82       	st	Z, r1
	uint8 flag=0/*//to control LCD once display*/,flag2=0/*to control LCD in switch + - statement*/,key=0/*the number from key pad  */,key1=0/*store the number for switch + - statement*/,ret/*return value from function*/,i/*for loop*/,ret2/*return value from control MCU*/;
    22ba:	fe 01       	movw	r30, r28
    22bc:	e9 5a       	subi	r30, 0xA9	; 169
    22be:	fe 4f       	sbci	r31, 0xFE	; 254
    22c0:	10 82       	st	Z, r1
    22c2:	fe 01       	movw	r30, r28
    22c4:	ea 5a       	subi	r30, 0xAA	; 170
    22c6:	fe 4f       	sbci	r31, 0xFE	; 254
    22c8:	10 82       	st	Z, r1
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 5a       	subi	r30, 0xAB	; 171
    22ce:	fe 4f       	sbci	r31, 0xFE	; 254
    22d0:	10 82       	st	Z, r1
    22d2:	fe 01       	movw	r30, r28
    22d4:	ec 5a       	subi	r30, 0xAC	; 172
    22d6:	fe 4f       	sbci	r31, 0xFE	; 254
    22d8:	10 82       	st	Z, r1
	LCD_init();//initialize LCD
    22da:	0e 94 b6 0a 	call	0x156c	; 0x156c <LCD_init>
	UART_ConfigType uart={_8_Bit_Mode,Disabled,_1_Stop_Bit,Rate3};//configuration of uart with 8 bit character Arr_Size ,1 stop bit ,no parity bit and Baud rate 9600
    22de:	ce 01       	movw	r24, r28
    22e0:	87 5a       	subi	r24, 0xA7	; 167
    22e2:	9e 4f       	sbci	r25, 0xFE	; 254
    22e4:	ce 59       	subi	r28, 0x9E	; 158
    22e6:	de 4f       	sbci	r29, 0xFE	; 254
    22e8:	99 83       	std	Y+1, r25	; 0x01
    22ea:	88 83       	st	Y, r24
    22ec:	c2 56       	subi	r28, 0x62	; 98
    22ee:	d1 40       	sbci	r29, 0x01	; 1
    22f0:	26 e0       	ldi	r18, 0x06	; 6
    22f2:	31 e0       	ldi	r19, 0x01	; 1
    22f4:	cc 59       	subi	r28, 0x9C	; 156
    22f6:	de 4f       	sbci	r29, 0xFE	; 254
    22f8:	39 83       	std	Y+1, r19	; 0x01
    22fa:	28 83       	st	Y, r18
    22fc:	c4 56       	subi	r28, 0x64	; 100
    22fe:	d1 40       	sbci	r29, 0x01	; 1
    2300:	35 e0       	ldi	r19, 0x05	; 5
    2302:	ca 59       	subi	r28, 0x9A	; 154
    2304:	de 4f       	sbci	r29, 0xFE	; 254
    2306:	38 83       	st	Y, r19
    2308:	c6 56       	subi	r28, 0x66	; 102
    230a:	d1 40       	sbci	r29, 0x01	; 1
    230c:	cc 59       	subi	r28, 0x9C	; 156
    230e:	de 4f       	sbci	r29, 0xFE	; 254
    2310:	e8 81       	ld	r30, Y
    2312:	f9 81       	ldd	r31, Y+1	; 0x01
    2314:	c4 56       	subi	r28, 0x64	; 100
    2316:	d1 40       	sbci	r29, 0x01	; 1
    2318:	00 80       	ld	r0, Z
    231a:	cc 59       	subi	r28, 0x9C	; 156
    231c:	de 4f       	sbci	r29, 0xFE	; 254
    231e:	28 81       	ld	r18, Y
    2320:	39 81       	ldd	r19, Y+1	; 0x01
    2322:	c4 56       	subi	r28, 0x64	; 100
    2324:	d1 40       	sbci	r29, 0x01	; 1
    2326:	2f 5f       	subi	r18, 0xFF	; 255
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	cc 59       	subi	r28, 0x9C	; 156
    232c:	de 4f       	sbci	r29, 0xFE	; 254
    232e:	39 83       	std	Y+1, r19	; 0x01
    2330:	28 83       	st	Y, r18
    2332:	c4 56       	subi	r28, 0x64	; 100
    2334:	d1 40       	sbci	r29, 0x01	; 1
    2336:	ce 59       	subi	r28, 0x9E	; 158
    2338:	de 4f       	sbci	r29, 0xFE	; 254
    233a:	e8 81       	ld	r30, Y
    233c:	f9 81       	ldd	r31, Y+1	; 0x01
    233e:	c2 56       	subi	r28, 0x62	; 98
    2340:	d1 40       	sbci	r29, 0x01	; 1
    2342:	00 82       	st	Z, r0
    2344:	ce 59       	subi	r28, 0x9E	; 158
    2346:	de 4f       	sbci	r29, 0xFE	; 254
    2348:	28 81       	ld	r18, Y
    234a:	39 81       	ldd	r19, Y+1	; 0x01
    234c:	c2 56       	subi	r28, 0x62	; 98
    234e:	d1 40       	sbci	r29, 0x01	; 1
    2350:	2f 5f       	subi	r18, 0xFF	; 255
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	ce 59       	subi	r28, 0x9E	; 158
    2356:	de 4f       	sbci	r29, 0xFE	; 254
    2358:	39 83       	std	Y+1, r19	; 0x01
    235a:	28 83       	st	Y, r18
    235c:	c2 56       	subi	r28, 0x62	; 98
    235e:	d1 40       	sbci	r29, 0x01	; 1
    2360:	ca 59       	subi	r28, 0x9A	; 154
    2362:	de 4f       	sbci	r29, 0xFE	; 254
    2364:	38 81       	ld	r19, Y
    2366:	c6 56       	subi	r28, 0x66	; 102
    2368:	d1 40       	sbci	r29, 0x01	; 1
    236a:	31 50       	subi	r19, 0x01	; 1
    236c:	ca 59       	subi	r28, 0x9A	; 154
    236e:	de 4f       	sbci	r29, 0xFE	; 254
    2370:	38 83       	st	Y, r19
    2372:	c6 56       	subi	r28, 0x66	; 102
    2374:	d1 40       	sbci	r29, 0x01	; 1
    2376:	ca 59       	subi	r28, 0x9A	; 154
    2378:	de 4f       	sbci	r29, 0xFE	; 254
    237a:	88 81       	ld	r24, Y
    237c:	c6 56       	subi	r28, 0x66	; 102
    237e:	d1 40       	sbci	r29, 0x01	; 1
    2380:	88 23       	and	r24, r24
    2382:	21 f6       	brne	.-120    	; 0x230c <main+0x82>
	UART_init(&uart);//initialize UART with the address of uart object
    2384:	ce 01       	movw	r24, r28
    2386:	87 5a       	subi	r24, 0xA7	; 167
    2388:	9e 4f       	sbci	r25, 0xFE	; 254
    238a:	0e 94 99 09 	call	0x1332	; 0x1332 <UART_init>
	Time1_SetCallBack(timer_function);//set the callback pointer to timer_function
    238e:	85 e3       	ldi	r24, 0x35	; 53
    2390:	90 e1       	ldi	r25, 0x10	; 16
    2392:	0e 94 87 09 	call	0x130e	; 0x130e <Time1_SetCallBack>
	step=1;//start system
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	80 93 0e 01 	sts	0x010E, r24
	{//super loop start

		/////////////////////////////////////////////////////////////////////////////////////////////////////////


			switch(step)//start system step switch
    239c:	80 91 0e 01 	lds	r24, 0x010E
    23a0:	e8 2f       	mov	r30, r24
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	c0 5a       	subi	r28, 0xA0	; 160
    23a6:	de 4f       	sbci	r29, 0xFE	; 254
    23a8:	f9 83       	std	Y+1, r31	; 0x01
    23aa:	e8 83       	st	Y, r30
    23ac:	c0 56       	subi	r28, 0x60	; 96
    23ae:	d1 40       	sbci	r29, 0x01	; 1
    23b0:	c0 5a       	subi	r28, 0xA0	; 160
    23b2:	de 4f       	sbci	r29, 0xFE	; 254
    23b4:	28 81       	ld	r18, Y
    23b6:	39 81       	ldd	r19, Y+1	; 0x01
    23b8:	c0 56       	subi	r28, 0x60	; 96
    23ba:	d1 40       	sbci	r29, 0x01	; 1
    23bc:	22 30       	cpi	r18, 0x02	; 2
    23be:	31 05       	cpc	r19, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <main+0x13a>
    23c2:	7e c3       	rjmp	.+1788   	; 0x2ac0 <main+0x836>
    23c4:	c0 5a       	subi	r28, 0xA0	; 160
    23c6:	de 4f       	sbci	r29, 0xFE	; 254
    23c8:	88 81       	ld	r24, Y
    23ca:	99 81       	ldd	r25, Y+1	; 0x01
    23cc:	c0 56       	subi	r28, 0x60	; 96
    23ce:	d1 40       	sbci	r29, 0x01	; 1
    23d0:	83 30       	cpi	r24, 0x03	; 3
    23d2:	91 05       	cpc	r25, r1
    23d4:	54 f4       	brge	.+20     	; 0x23ea <main+0x160>
    23d6:	c0 5a       	subi	r28, 0xA0	; 160
    23d8:	de 4f       	sbci	r29, 0xFE	; 254
    23da:	e8 81       	ld	r30, Y
    23dc:	f9 81       	ldd	r31, Y+1	; 0x01
    23de:	c0 56       	subi	r28, 0x60	; 96
    23e0:	d1 40       	sbci	r29, 0x01	; 1
    23e2:	e1 30       	cpi	r30, 0x01	; 1
    23e4:	f1 05       	cpc	r31, r1
    23e6:	b9 f0       	breq	.+46     	; 0x2416 <main+0x18c>
    23e8:	d9 cf       	rjmp	.-78     	; 0x239c <main+0x112>
    23ea:	c0 5a       	subi	r28, 0xA0	; 160
    23ec:	de 4f       	sbci	r29, 0xFE	; 254
    23ee:	28 81       	ld	r18, Y
    23f0:	39 81       	ldd	r19, Y+1	; 0x01
    23f2:	c0 56       	subi	r28, 0x60	; 96
    23f4:	d1 40       	sbci	r29, 0x01	; 1
    23f6:	23 30       	cpi	r18, 0x03	; 3
    23f8:	31 05       	cpc	r19, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <main+0x174>
    23fc:	87 c7       	rjmp	.+3854   	; 0x330c <main+0x1082>
    23fe:	c0 5a       	subi	r28, 0xA0	; 160
    2400:	de 4f       	sbci	r29, 0xFE	; 254
    2402:	88 81       	ld	r24, Y
    2404:	99 81       	ldd	r25, Y+1	; 0x01
    2406:	c0 56       	subi	r28, 0x60	; 96
    2408:	d1 40       	sbci	r29, 0x01	; 1
    240a:	84 30       	cpi	r24, 0x04	; 4
    240c:	91 05       	cpc	r25, r1
    240e:	11 f4       	brne	.+4      	; 0x2414 <main+0x18a>
    2410:	0c 94 ec 24 	jmp	0x49d8	; 0x49d8 <main+0x274e>
    2414:	c3 cf       	rjmp	.-122    	; 0x239c <main+0x112>
			/////////////////////////////////"step 1"////////////////////////////////////////////////

			case 1://case step 1
				//////////////////////

				if(flag==0)//display the message once
    2416:	fe 01       	movw	r30, r28
    2418:	e9 5a       	subi	r30, 0xA9	; 169
    241a:	fe 4f       	sbci	r31, 0xFE	; 254
    241c:	80 81       	ld	r24, Z
    241e:	88 23       	and	r24, r24
    2420:	91 f4       	brne	.+36     	; 0x2446 <main+0x1bc>
				{//start if flag
					LCD_clearScreen();//clear the screen
    2422:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Plz enter Pass:");//display first message on screen
    2426:	29 e6       	ldi	r18, 0x69	; 105
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	a9 01       	movw	r20, r18
    2430:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);//move the cursor to the second row
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
					flag=1;//do not get here again
    243c:	fe 01       	movw	r30, r28
    243e:	e9 5a       	subi	r30, 0xA9	; 169
    2440:	fe 4f       	sbci	r31, 0xFE	; 254
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	80 83       	st	Z, r24
				}//end if flag

				//////////////////////

				key=KEYPAD_getPressedKey();//get numbers from user
    2446:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
    244a:	fe 01       	movw	r30, r28
    244c:	eb 5a       	subi	r30, 0xAB	; 171
    244e:	fe 4f       	sbci	r31, 0xFE	; 254
    2450:	80 83       	st	Z, r24
    2452:	fe 01       	movw	r30, r28
    2454:	e3 5b       	subi	r30, 0xB3	; 179
    2456:	fe 4f       	sbci	r31, 0xFE	; 254
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a8 e4       	ldi	r26, 0x48	; 72
    245e:	b3 e4       	ldi	r27, 0x43	; 67
    2460:	80 83       	st	Z, r24
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	a2 83       	std	Z+2, r26	; 0x02
    2466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	8e 01       	movw	r16, r28
    246a:	07 5b       	subi	r16, 0xB7	; 183
    246c:	1e 4f       	sbci	r17, 0xFE	; 254
    246e:	fe 01       	movw	r30, r28
    2470:	e3 5b       	subi	r30, 0xB3	; 179
    2472:	fe 4f       	sbci	r31, 0xFE	; 254
    2474:	60 81       	ld	r22, Z
    2476:	71 81       	ldd	r23, Z+1	; 0x01
    2478:	82 81       	ldd	r24, Z+2	; 0x02
    247a:	93 81       	ldd	r25, Z+3	; 0x03
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a ef       	ldi	r20, 0xFA	; 250
    2482:	54 e4       	ldi	r21, 0x44	; 68
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	f8 01       	movw	r30, r16
    248e:	80 83       	st	Z, r24
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	a2 83       	std	Z+2, r26	; 0x02
    2494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5b       	subi	r30, 0xB7	; 183
    249a:	fe 4f       	sbci	r31, 0xFE	; 254
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	44 f4       	brge	.+16     	; 0x24c4 <main+0x23a>
		__ticks = 1;
    24b4:	fe 01       	movw	r30, r28
    24b6:	e9 5b       	subi	r30, 0xB9	; 185
    24b8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	64 c0       	rjmp	.+200    	; 0x258c <main+0x302>
	else if (__tmp > 65535)
    24c4:	fe 01       	movw	r30, r28
    24c6:	e7 5b       	subi	r30, 0xB7	; 183
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	0c f0       	brlt	.+2      	; 0x24e4 <main+0x25a>
    24e2:	43 c0       	rjmp	.+134    	; 0x256a <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 5b       	subi	r30, 0xB3	; 179
    24e8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8e 01       	movw	r16, r28
    2504:	09 5b       	subi	r16, 0xB9	; 185
    2506:	1e 4f       	sbci	r17, 0xFE	; 254
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	f8 01       	movw	r30, r16
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	1f c0       	rjmp	.+62     	; 0x255a <main+0x2d0>
    251c:	fe 01       	movw	r30, r28
    251e:	eb 5b       	subi	r30, 0xBB	; 187
    2520:	fe 4f       	sbci	r31, 0xFE	; 254
    2522:	88 ec       	ldi	r24, 0xC8	; 200
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
    252a:	fe 01       	movw	r30, r28
    252c:	eb 5b       	subi	r30, 0xBB	; 187
    252e:	fe 4f       	sbci	r31, 0xFE	; 254
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <main+0x2aa>
    2538:	fe 01       	movw	r30, r28
    253a:	eb 5b       	subi	r30, 0xBB	; 187
    253c:	fe 4f       	sbci	r31, 0xFE	; 254
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	de 01       	movw	r26, r28
    2544:	a9 5b       	subi	r26, 0xB9	; 185
    2546:	be 4f       	sbci	r27, 0xFE	; 254
    2548:	fe 01       	movw	r30, r28
    254a:	e9 5b       	subi	r30, 0xB9	; 185
    254c:	fe 4f       	sbci	r31, 0xFE	; 254
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	11 96       	adiw	r26, 0x01	; 1
    2556:	9c 93       	st	X, r25
    2558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	fe 01       	movw	r30, r28
    255c:	e9 5b       	subi	r30, 0xB9	; 185
    255e:	fe 4f       	sbci	r31, 0xFE	; 254
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	d1 f6       	brne	.-76     	; 0x251c <main+0x292>
    2568:	27 c0       	rjmp	.+78     	; 0x25b8 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	8e 01       	movw	r16, r28
    256c:	09 5b       	subi	r16, 0xB9	; 185
    256e:	1e 4f       	sbci	r17, 0xFE	; 254
    2570:	fe 01       	movw	r30, r28
    2572:	e7 5b       	subi	r30, 0xB7	; 183
    2574:	fe 4f       	sbci	r31, 0xFE	; 254
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	de 01       	movw	r26, r28
    258e:	ad 5b       	subi	r26, 0xBD	; 189
    2590:	be 4f       	sbci	r27, 0xFE	; 254
    2592:	fe 01       	movw	r30, r28
    2594:	e9 5b       	subi	r30, 0xB9	; 185
    2596:	fe 4f       	sbci	r31, 0xFE	; 254
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	8d 93       	st	X+, r24
    259e:	9c 93       	st	X, r25
    25a0:	fe 01       	movw	r30, r28
    25a2:	ed 5b       	subi	r30, 0xBD	; 189
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <main+0x320>
    25ae:	fe 01       	movw	r30, r28
    25b0:	ed 5b       	subi	r30, 0xBD	; 189
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
				_delay_ms(200);
				ret=First_Pass(key);//check the return
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 5a       	subi	r30, 0xAB	; 171
    25bc:	fe 4f       	sbci	r31, 0xFE	; 254
    25be:	80 81       	ld	r24, Z
    25c0:	0e 94 32 25 	call	0x4a64	; 0x4a64 <First_Pass>
    25c4:	fe 01       	movw	r30, r28
    25c6:	ed 5a       	subi	r30, 0xAD	; 173
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	80 83       	st	Z, r24
				//////////////////////

				if(ret==1)//if the key between 0 and 9 and array still not full
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 5a       	subi	r30, 0xAD	; 173
    25d0:	fe 4f       	sbci	r31, 0xFE	; 254
    25d2:	80 81       	ld	r24, Z
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	29 f4       	brne	.+10     	; 0x25e2 <main+0x358>
				{//start if ret =1
					LCD_sendString("*");//display '*'
    25d8:	89 e7       	ldi	r24, 0x79	; 121
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendString>
    25e0:	dd ce       	rjmp	.-582    	; 0x239c <main+0x112>
				}//end if ret =1

				//////////////////////

				else if(ret==2)//if the user submit but and array still not full
    25e2:	fe 01       	movw	r30, r28
    25e4:	ed 5a       	subi	r30, 0xAD	; 173
    25e6:	fe 4f       	sbci	r31, 0xFE	; 254
    25e8:	80 81       	ld	r24, Z
    25ea:	82 30       	cpi	r24, 0x02	; 2
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <main+0x366>
    25ee:	cd c0       	rjmp	.+410    	; 0x278a <main+0x500>
				{//start if ret= 2
					LCD_displayStringRowColumn(1,0,"               ");//clear row two
    25f0:	2b e7       	ldi	r18, 0x7B	; 123
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	a9 01       	movw	r20, r18
    25fa:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0,"Error pass");//display Error message
    25fe:	2b e8       	ldi	r18, 0x8B	; 139
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	a9 01       	movw	r20, r18
    2608:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    260c:	fe 01       	movw	r30, r28
    260e:	e1 5c       	subi	r30, 0xC1	; 193
    2610:	fe 4f       	sbci	r31, 0xFE	; 254
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a6 e1       	ldi	r26, 0x16	; 22
    2618:	b3 e4       	ldi	r27, 0x43	; 67
    261a:	80 83       	st	Z, r24
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	a2 83       	std	Z+2, r26	; 0x02
    2620:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	8e 01       	movw	r16, r28
    2624:	05 5c       	subi	r16, 0xC5	; 197
    2626:	1e 4f       	sbci	r17, 0xFE	; 254
    2628:	fe 01       	movw	r30, r28
    262a:	e1 5c       	subi	r30, 0xC1	; 193
    262c:	fe 4f       	sbci	r31, 0xFE	; 254
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a ef       	ldi	r20, 0xFA	; 250
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	f8 01       	movw	r30, r16
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2650:	fe 01       	movw	r30, r28
    2652:	e5 5c       	subi	r30, 0xC5	; 197
    2654:	fe 4f       	sbci	r31, 0xFE	; 254
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e8       	ldi	r20, 0x80	; 128
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266a:	88 23       	and	r24, r24
    266c:	44 f4       	brge	.+16     	; 0x267e <main+0x3f4>
		__ticks = 1;
    266e:	fe 01       	movw	r30, r28
    2670:	e7 5c       	subi	r30, 0xC7	; 199
    2672:	fe 4f       	sbci	r31, 0xFE	; 254
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
    267c:	64 c0       	rjmp	.+200    	; 0x2746 <main+0x4bc>
	else if (__tmp > 65535)
    267e:	fe 01       	movw	r30, r28
    2680:	e5 5c       	subi	r30, 0xC5	; 197
    2682:	fe 4f       	sbci	r31, 0xFE	; 254
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	3f ef       	ldi	r19, 0xFF	; 255
    2690:	4f e7       	ldi	r20, 0x7F	; 127
    2692:	57 e4       	ldi	r21, 0x47	; 71
    2694:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2698:	18 16       	cp	r1, r24
    269a:	0c f0       	brlt	.+2      	; 0x269e <main+0x414>
    269c:	43 c0       	rjmp	.+134    	; 0x2724 <main+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	fe 01       	movw	r30, r28
    26a0:	e1 5c       	subi	r30, 0xC1	; 193
    26a2:	fe 4f       	sbci	r31, 0xFE	; 254
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8e 01       	movw	r16, r28
    26be:	07 5c       	subi	r16, 0xC7	; 199
    26c0:	1e 4f       	sbci	r17, 0xFE	; 254
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	f8 01       	movw	r30, r16
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	1f c0       	rjmp	.+62     	; 0x2714 <main+0x48a>
    26d6:	fe 01       	movw	r30, r28
    26d8:	e9 5c       	subi	r30, 0xC9	; 201
    26da:	fe 4f       	sbci	r31, 0xFE	; 254
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	fe 01       	movw	r30, r28
    26e6:	e9 5c       	subi	r30, 0xC9	; 201
    26e8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <main+0x464>
    26f2:	fe 01       	movw	r30, r28
    26f4:	e9 5c       	subi	r30, 0xC9	; 201
    26f6:	fe 4f       	sbci	r31, 0xFE	; 254
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fc:	de 01       	movw	r26, r28
    26fe:	a7 5c       	subi	r26, 0xC7	; 199
    2700:	be 4f       	sbci	r27, 0xFE	; 254
    2702:	fe 01       	movw	r30, r28
    2704:	e7 5c       	subi	r30, 0xC7	; 199
    2706:	fe 4f       	sbci	r31, 0xFE	; 254
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	9c 93       	st	X, r25
    2712:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2714:	fe 01       	movw	r30, r28
    2716:	e7 5c       	subi	r30, 0xC7	; 199
    2718:	fe 4f       	sbci	r31, 0xFE	; 254
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	d1 f6       	brne	.-76     	; 0x26d6 <main+0x44c>
    2722:	27 c0       	rjmp	.+78     	; 0x2772 <main+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2724:	8e 01       	movw	r16, r28
    2726:	07 5c       	subi	r16, 0xC7	; 199
    2728:	1e 4f       	sbci	r17, 0xFE	; 254
    272a:	fe 01       	movw	r30, r28
    272c:	e5 5c       	subi	r30, 0xC5	; 197
    272e:	fe 4f       	sbci	r31, 0xFE	; 254
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	f8 01       	movw	r30, r16
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
    2746:	de 01       	movw	r26, r28
    2748:	ab 5c       	subi	r26, 0xCB	; 203
    274a:	be 4f       	sbci	r27, 0xFE	; 254
    274c:	fe 01       	movw	r30, r28
    274e:	e7 5c       	subi	r30, 0xC7	; 199
    2750:	fe 4f       	sbci	r31, 0xFE	; 254
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	8d 93       	st	X+, r24
    2758:	9c 93       	st	X, r25
    275a:	fe 01       	movw	r30, r28
    275c:	eb 5c       	subi	r30, 0xCB	; 203
    275e:	fe 4f       	sbci	r31, 0xFE	; 254
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <main+0x4da>
    2768:	fe 01       	movw	r30, r28
    276a:	eb 5c       	subi	r30, 0xCB	; 203
    276c:	fe 4f       	sbci	r31, 0xFE	; 254
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
					_delay_ms(150);//delay to make the user see the error
					LCD_displayStringRowColumn(1,0,"               ");//clear row two
    2772:	2b e7       	ldi	r18, 0x7B	; 123
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	a9 01       	movw	r20, r18
    277c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);//move the cursor to the second row
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
    2788:	09 ce       	rjmp	.-1006   	; 0x239c <main+0x112>
				}//end if ret= 2

				//////////////////////

				else if(ret==3)//if the user submit and the pass is valid
    278a:	fe 01       	movw	r30, r28
    278c:	ed 5a       	subi	r30, 0xAD	; 173
    278e:	fe 4f       	sbci	r31, 0xFE	; 254
    2790:	80 81       	ld	r24, Z
    2792:	83 30       	cpi	r24, 0x03	; 3
    2794:	09 f0       	breq	.+2      	; 0x2798 <main+0x50e>
    2796:	02 ce       	rjmp	.-1020   	; 0x239c <main+0x112>
				{//start if ret==3
					UART_sendByte(step);//send our step to Control_MCU
    2798:	80 91 0e 01 	lds	r24, 0x010E
    279c:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    27a0:	fe 01       	movw	r30, r28
    27a2:	ef 5c       	subi	r30, 0xCF	; 207
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 ea       	ldi	r26, 0xA0	; 160
    27ac:	b0 e4       	ldi	r27, 0x40	; 64
    27ae:	80 83       	st	Z, r24
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	a2 83       	std	Z+2, r26	; 0x02
    27b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	8e 01       	movw	r16, r28
    27b8:	03 5d       	subi	r16, 0xD3	; 211
    27ba:	1e 4f       	sbci	r17, 0xFE	; 254
    27bc:	fe 01       	movw	r30, r28
    27be:	ef 5c       	subi	r30, 0xCF	; 207
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	f8 01       	movw	r30, r16
    27dc:	80 83       	st	Z, r24
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	a2 83       	std	Z+2, r26	; 0x02
    27e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e4:	fe 01       	movw	r30, r28
    27e6:	e3 5d       	subi	r30, 0xD3	; 211
    27e8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	44 f4       	brge	.+16     	; 0x2812 <main+0x588>
		__ticks = 1;
    2802:	fe 01       	movw	r30, r28
    2804:	e5 5d       	subi	r30, 0xD5	; 213
    2806:	fe 4f       	sbci	r31, 0xFE	; 254
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
    2810:	64 c0       	rjmp	.+200    	; 0x28da <main+0x650>
	else if (__tmp > 65535)
    2812:	fe 01       	movw	r30, r28
    2814:	e3 5d       	subi	r30, 0xD3	; 211
    2816:	fe 4f       	sbci	r31, 0xFE	; 254
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	0c f0       	brlt	.+2      	; 0x2832 <main+0x5a8>
    2830:	43 c0       	rjmp	.+134    	; 0x28b8 <main+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	fe 01       	movw	r30, r28
    2834:	ef 5c       	subi	r30, 0xCF	; 207
    2836:	fe 4f       	sbci	r31, 0xFE	; 254
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8e 01       	movw	r16, r28
    2852:	05 5d       	subi	r16, 0xD5	; 213
    2854:	1e 4f       	sbci	r17, 0xFE	; 254
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	f8 01       	movw	r30, r16
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	80 83       	st	Z, r24
    2868:	1f c0       	rjmp	.+62     	; 0x28a8 <main+0x61e>
    286a:	fe 01       	movw	r30, r28
    286c:	e7 5d       	subi	r30, 0xD7	; 215
    286e:	fe 4f       	sbci	r31, 0xFE	; 254
    2870:	88 ec       	ldi	r24, 0xC8	; 200
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	80 83       	st	Z, r24
    2878:	fe 01       	movw	r30, r28
    287a:	e7 5d       	subi	r30, 0xD7	; 215
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <main+0x5f8>
    2886:	fe 01       	movw	r30, r28
    2888:	e7 5d       	subi	r30, 0xD7	; 215
    288a:	fe 4f       	sbci	r31, 0xFE	; 254
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	de 01       	movw	r26, r28
    2892:	a5 5d       	subi	r26, 0xD5	; 213
    2894:	be 4f       	sbci	r27, 0xFE	; 254
    2896:	fe 01       	movw	r30, r28
    2898:	e5 5d       	subi	r30, 0xD5	; 213
    289a:	fe 4f       	sbci	r31, 0xFE	; 254
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	11 96       	adiw	r26, 0x01	; 1
    28a4:	9c 93       	st	X, r25
    28a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a8:	fe 01       	movw	r30, r28
    28aa:	e5 5d       	subi	r30, 0xD5	; 213
    28ac:	fe 4f       	sbci	r31, 0xFE	; 254
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	d1 f6       	brne	.-76     	; 0x286a <main+0x5e0>
    28b6:	28 c0       	rjmp	.+80     	; 0x2908 <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	8e 01       	movw	r16, r28
    28ba:	05 5d       	subi	r16, 0xD5	; 213
    28bc:	1e 4f       	sbci	r17, 0xFE	; 254
    28be:	fe 01       	movw	r30, r28
    28c0:	e3 5d       	subi	r30, 0xD3	; 211
    28c2:	fe 4f       	sbci	r31, 0xFE	; 254
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
    28da:	de 01       	movw	r26, r28
    28dc:	a9 5d       	subi	r26, 0xD9	; 217
    28de:	be 4f       	sbci	r27, 0xFE	; 254
    28e0:	fe 01       	movw	r30, r28
    28e2:	e5 5d       	subi	r30, 0xD5	; 213
    28e4:	fe 4f       	sbci	r31, 0xFE	; 254
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	11 96       	adiw	r26, 0x01	; 1
    28ec:	9c 93       	st	X, r25
    28ee:	8e 93       	st	-X, r24
    28f0:	fe 01       	movw	r30, r28
    28f2:	e9 5d       	subi	r30, 0xD9	; 217
    28f4:	fe 4f       	sbci	r31, 0xFE	; 254
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <main+0x670>
    28fe:	fe 01       	movw	r30, r28
    2900:	e9 5d       	subi	r30, 0xD9	; 217
    2902:	fe 4f       	sbci	r31, 0xFE	; 254
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
					_delay_ms(5);//wait to send data

					for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    2908:	fe 01       	movw	r30, r28
    290a:	ee 5a       	subi	r30, 0xAE	; 174
    290c:	fe 4f       	sbci	r31, 0xFE	; 254
    290e:	10 82       	st	Z, r1
    2910:	c8 c0       	rjmp	.+400    	; 0x2aa2 <main+0x818>
					{//start for arr_pass
						UART_sendByte(arr_pass[i]);//send the password to control_MCU
    2912:	fe 01       	movw	r30, r28
    2914:	ee 5a       	subi	r30, 0xAE	; 174
    2916:	fe 4f       	sbci	r31, 0xFE	; 254
    2918:	80 81       	ld	r24, Z
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	fc 01       	movw	r30, r24
    2920:	e0 5f       	subi	r30, 0xF0	; 240
    2922:	fe 4f       	sbci	r31, 0xFE	; 254
    2924:	80 81       	ld	r24, Z
    2926:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    292a:	fe 01       	movw	r30, r28
    292c:	ed 5d       	subi	r30, 0xDD	; 221
    292e:	fe 4f       	sbci	r31, 0xFE	; 254
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 ea       	ldi	r26, 0xA0	; 160
    2936:	b1 e4       	ldi	r27, 0x41	; 65
    2938:	80 83       	st	Z, r24
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	a2 83       	std	Z+2, r26	; 0x02
    293e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2940:	8e 01       	movw	r16, r28
    2942:	01 5e       	subi	r16, 0xE1	; 225
    2944:	1e 4f       	sbci	r17, 0xFE	; 254
    2946:	fe 01       	movw	r30, r28
    2948:	ed 5d       	subi	r30, 0xDD	; 221
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a ef       	ldi	r20, 0xFA	; 250
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	f8 01       	movw	r30, r16
    2966:	80 83       	st	Z, r24
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	a2 83       	std	Z+2, r26	; 0x02
    296c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296e:	fe 01       	movw	r30, r28
    2970:	e1 5e       	subi	r30, 0xE1	; 225
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	44 f4       	brge	.+16     	; 0x299c <main+0x712>
		__ticks = 1;
    298c:	fe 01       	movw	r30, r28
    298e:	e3 5e       	subi	r30, 0xE3	; 227
    2990:	fe 4f       	sbci	r31, 0xFE	; 254
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	64 c0       	rjmp	.+200    	; 0x2a64 <main+0x7da>
	else if (__tmp > 65535)
    299c:	fe 01       	movw	r30, r28
    299e:	e1 5e       	subi	r30, 0xE1	; 225
    29a0:	fe 4f       	sbci	r31, 0xFE	; 254
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <main+0x732>
    29ba:	43 c0       	rjmp	.+134    	; 0x2a42 <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	fe 01       	movw	r30, r28
    29be:	ed 5d       	subi	r30, 0xDD	; 221
    29c0:	fe 4f       	sbci	r31, 0xFE	; 254
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8e 01       	movw	r16, r28
    29dc:	03 5e       	subi	r16, 0xE3	; 227
    29de:	1e 4f       	sbci	r17, 0xFE	; 254
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	1f c0       	rjmp	.+62     	; 0x2a32 <main+0x7a8>
    29f4:	fe 01       	movw	r30, r28
    29f6:	e5 5e       	subi	r30, 0xE5	; 229
    29f8:	fe 4f       	sbci	r31, 0xFE	; 254
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	fe 01       	movw	r30, r28
    2a04:	e5 5e       	subi	r30, 0xE5	; 229
    2a06:	fe 4f       	sbci	r31, 0xFE	; 254
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <main+0x782>
    2a10:	fe 01       	movw	r30, r28
    2a12:	e5 5e       	subi	r30, 0xE5	; 229
    2a14:	fe 4f       	sbci	r31, 0xFE	; 254
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	de 01       	movw	r26, r28
    2a1c:	a3 5e       	subi	r26, 0xE3	; 227
    2a1e:	be 4f       	sbci	r27, 0xFE	; 254
    2a20:	fe 01       	movw	r30, r28
    2a22:	e3 5e       	subi	r30, 0xE3	; 227
    2a24:	fe 4f       	sbci	r31, 0xFE	; 254
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	9c 93       	st	X, r25
    2a30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	fe 01       	movw	r30, r28
    2a34:	e3 5e       	subi	r30, 0xE3	; 227
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	d1 f6       	brne	.-76     	; 0x29f4 <main+0x76a>
    2a40:	27 c0       	rjmp	.+78     	; 0x2a90 <main+0x806>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	8e 01       	movw	r16, r28
    2a44:	03 5e       	subi	r16, 0xE3	; 227
    2a46:	1e 4f       	sbci	r17, 0xFE	; 254
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e1 5e       	subi	r30, 0xE1	; 225
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
    2a64:	de 01       	movw	r26, r28
    2a66:	a7 5e       	subi	r26, 0xE7	; 231
    2a68:	be 4f       	sbci	r27, 0xFE	; 254
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e3 5e       	subi	r30, 0xE3	; 227
    2a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	8d 93       	st	X+, r24
    2a76:	9c 93       	st	X, r25
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e7 5e       	subi	r30, 0xE7	; 231
    2a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <main+0x7f8>
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 5e       	subi	r30, 0xE7	; 231
    2a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
				else if(ret==3)//if the user submit and the pass is valid
				{//start if ret==3
					UART_sendByte(step);//send our step to Control_MCU
					_delay_ms(5);//wait to send data

					for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    2a90:	de 01       	movw	r26, r28
    2a92:	ae 5a       	subi	r26, 0xAE	; 174
    2a94:	be 4f       	sbci	r27, 0xFE	; 254
    2a96:	fe 01       	movw	r30, r28
    2a98:	ee 5a       	subi	r30, 0xAE	; 174
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	8c 93       	st	X, r24
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ee 5a       	subi	r30, 0xAE	; 174
    2aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa8:	80 81       	ld	r24, Z
    2aaa:	84 30       	cpi	r24, 0x04	; 4
    2aac:	08 f4       	brcc	.+2      	; 0x2ab0 <main+0x826>
    2aae:	31 cf       	rjmp	.-414    	; 0x2912 <main+0x688>
					{//start for arr_pass
						UART_sendByte(arr_pass[i]);//send the password to control_MCU
						_delay_ms(20);//wait to send data
					}//end for arr_pass

					step=2;//go to step 2
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	80 93 0e 01 	sts	0x010E, r24
					flag=0;//to enable displaying on screen
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e9 5a       	subi	r30, 0xA9	; 169
    2aba:	fe 4f       	sbci	r31, 0xFE	; 254
    2abc:	10 82       	st	Z, r1
    2abe:	6e cc       	rjmp	.-1828   	; 0x239c <main+0x112>
				/////////////////////////////////////case 2///////////////////////////////////////////

			case 2: //case step 2
				//////////////////////

				if(flag==0)//display the message once
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e9 5a       	subi	r30, 0xA9	; 169
    2ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac6:	80 81       	ld	r24, Z
    2ac8:	88 23       	and	r24, r24
    2aca:	91 f4       	brne	.+36     	; 0x2af0 <main+0x866>
				{//start if flag=1
					LCD_clearScreen();//clear the screen
    2acc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"confirm Pass:");//display first message on screen
    2ad0:	26 e9       	ldi	r18, 0x96	; 150
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	a9 01       	movw	r20, r18
    2ada:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);//move the cursor to the second row
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
					flag=1;//do not get here again
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e9 5a       	subi	r30, 0xA9	; 169
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 83       	st	Z, r24
				}//end if flag
				//////////////////////

				key=KEYPAD_getPressedKey();//get numbers from user
    2af0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
    2af4:	fe 01       	movw	r30, r28
    2af6:	eb 5a       	subi	r30, 0xAB	; 171
    2af8:	fe 4f       	sbci	r31, 0xFE	; 254
    2afa:	80 83       	st	Z, r24
    2afc:	fe 01       	movw	r30, r28
    2afe:	eb 5e       	subi	r30, 0xEB	; 235
    2b00:	fe 4f       	sbci	r31, 0xFE	; 254
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a8 e4       	ldi	r26, 0x48	; 72
    2b08:	b3 e4       	ldi	r27, 0x43	; 67
    2b0a:	80 83       	st	Z, r24
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	a2 83       	std	Z+2, r26	; 0x02
    2b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	8e 01       	movw	r16, r28
    2b14:	0f 5e       	subi	r16, 0xEF	; 239
    2b16:	1e 4f       	sbci	r17, 0xFE	; 254
    2b18:	fe 01       	movw	r30, r28
    2b1a:	eb 5e       	subi	r30, 0xEB	; 235
    2b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a ef       	ldi	r20, 0xFA	; 250
    2b2c:	54 e4       	ldi	r21, 0x44	; 68
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	f8 01       	movw	r30, r16
    2b38:	80 83       	st	Z, r24
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	a2 83       	std	Z+2, r26	; 0x02
    2b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b40:	fe 01       	movw	r30, r28
    2b42:	ef 5e       	subi	r30, 0xEF	; 239
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	60 81       	ld	r22, Z
    2b48:	71 81       	ldd	r23, Z+1	; 0x01
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	44 f4       	brge	.+16     	; 0x2b6e <main+0x8e4>
		__ticks = 1;
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e1 5f       	subi	r30, 0xF1	; 241
    2b62:	fe 4f       	sbci	r31, 0xFE	; 254
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	64 c0       	rjmp	.+200    	; 0x2c36 <main+0x9ac>
	else if (__tmp > 65535)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ef 5e       	subi	r30, 0xEF	; 239
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	0c f0       	brlt	.+2      	; 0x2b8e <main+0x904>
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <main+0x98a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	fe 01       	movw	r30, r28
    2b90:	eb 5e       	subi	r30, 0xEB	; 235
    2b92:	fe 4f       	sbci	r31, 0xFE	; 254
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	8e 01       	movw	r16, r28
    2bae:	01 5f       	subi	r16, 0xF1	; 241
    2bb0:	1e 4f       	sbci	r17, 0xFE	; 254
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	1f c0       	rjmp	.+62     	; 0x2c04 <main+0x97a>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e3 5f       	subi	r30, 0xF3	; 243
    2bca:	fe 4f       	sbci	r31, 0xFE	; 254
    2bcc:	88 ec       	ldi	r24, 0xC8	; 200
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	80 83       	st	Z, r24
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e3 5f       	subi	r30, 0xF3	; 243
    2bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <main+0x954>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e3 5f       	subi	r30, 0xF3	; 243
    2be6:	fe 4f       	sbci	r31, 0xFE	; 254
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	de 01       	movw	r26, r28
    2bee:	a1 5f       	subi	r26, 0xF1	; 241
    2bf0:	be 4f       	sbci	r27, 0xFE	; 254
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e1 5f       	subi	r30, 0xF1	; 241
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	11 96       	adiw	r26, 0x01	; 1
    2c00:	9c 93       	st	X, r25
    2c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	fe 01       	movw	r30, r28
    2c06:	e1 5f       	subi	r30, 0xF1	; 241
    2c08:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	d1 f6       	brne	.-76     	; 0x2bc6 <main+0x93c>
    2c12:	27 c0       	rjmp	.+78     	; 0x2c62 <main+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	8e 01       	movw	r16, r28
    2c16:	01 5f       	subi	r16, 0xF1	; 241
    2c18:	1e 4f       	sbci	r17, 0xFE	; 254
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ef 5e       	subi	r30, 0xEF	; 239
    2c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	f8 01       	movw	r30, r16
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
    2c36:	de 01       	movw	r26, r28
    2c38:	a5 5f       	subi	r26, 0xF5	; 245
    2c3a:	be 4f       	sbci	r27, 0xFE	; 254
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e1 5f       	subi	r30, 0xF1	; 241
    2c40:	fe 4f       	sbci	r31, 0xFE	; 254
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	8d 93       	st	X+, r24
    2c48:	9c 93       	st	X, r25
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e5 5f       	subi	r30, 0xF5	; 245
    2c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <main+0x9ca>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e5 5f       	subi	r30, 0xF5	; 245
    2c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
				_delay_ms(200);

				ret=Confirm_Pass(key);//check the return
    2c62:	fe 01       	movw	r30, r28
    2c64:	eb 5a       	subi	r30, 0xAB	; 171
    2c66:	fe 4f       	sbci	r31, 0xFE	; 254
    2c68:	80 81       	ld	r24, Z
    2c6a:	0e 94 7e 25 	call	0x4afc	; 0x4afc <Confirm_Pass>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ed 5a       	subi	r30, 0xAD	; 173
    2c72:	fe 4f       	sbci	r31, 0xFE	; 254
    2c74:	80 83       	st	Z, r24

				//////////////////////

				if(ret==1)//if the key between 0 and 9 and array still not full
    2c76:	fe 01       	movw	r30, r28
    2c78:	ed 5a       	subi	r30, 0xAD	; 173
    2c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7c:	80 81       	ld	r24, Z
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	29 f4       	brne	.+10     	; 0x2c8c <main+0xa02>
				{//start if ret =1
					LCD_sendString("*");//display '*'
    2c82:	89 e7       	ldi	r24, 0x79	; 121
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendString>
    2c8a:	88 cb       	rjmp	.-2288   	; 0x239c <main+0x112>
				}//end if ret =1

				//////////////////////

				else if(ret==2)//if the user submit but and array still not full
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 5a       	subi	r30, 0xAD	; 173
    2c90:	fe 4f       	sbci	r31, 0xFE	; 254
    2c92:	80 81       	ld	r24, Z
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <main+0xa10>
    2c98:	cd c0       	rjmp	.+410    	; 0x2e34 <main+0xbaa>
				{//start if ret= 2
					LCD_displayStringRowColumn(1,0,"               ");//clear row two
    2c9a:	2b e7       	ldi	r18, 0x7B	; 123
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	a9 01       	movw	r20, r18
    2ca4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0,"Error pass");//display Error message
    2ca8:	2b e8       	ldi	r18, 0x8B	; 139
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	a9 01       	movw	r20, r18
    2cb2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e9 5f       	subi	r30, 0xF9	; 249
    2cba:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a6 e1       	ldi	r26, 0x16	; 22
    2cc2:	b3 e4       	ldi	r27, 0x43	; 67
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	0d 5f       	subi	r16, 0xFD	; 253
    2cd0:	1e 4f       	sbci	r17, 0xFE	; 254
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e9 5f       	subi	r30, 0xF9	; 249
    2cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a ef       	ldi	r20, 0xFA	; 250
    2ce6:	54 e4       	ldi	r21, 0x44	; 68
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 5f       	subi	r30, 0xFD	; 253
    2cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	44 f4       	brge	.+16     	; 0x2d28 <main+0xa9e>
		__ticks = 1;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ef 5f       	subi	r30, 0xFF	; 255
    2d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	64 c0       	rjmp	.+200    	; 0x2df0 <main+0xb66>
	else if (__tmp > 65535)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ed 5f       	subi	r30, 0xFD	; 253
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	0c f0       	brlt	.+2      	; 0x2d48 <main+0xabe>
    2d46:	43 c0       	rjmp	.+134    	; 0x2dce <main+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e9 5f       	subi	r30, 0xF9	; 249
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8e 01       	movw	r16, r28
    2d68:	0f 5f       	subi	r16, 0xFF	; 255
    2d6a:	1e 4f       	sbci	r17, 0xFE	; 254
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	1f c0       	rjmp	.+62     	; 0x2dbe <main+0xb34>
    2d80:	fe 01       	movw	r30, r28
    2d82:	e1 50       	subi	r30, 0x01	; 1
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e1 50       	subi	r30, 0x01	; 1
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <main+0xb0e>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e1 50       	subi	r30, 0x01	; 1
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	de 01       	movw	r26, r28
    2da8:	af 5f       	subi	r26, 0xFF	; 255
    2daa:	be 4f       	sbci	r27, 0xFE	; 254
    2dac:	fe 01       	movw	r30, r28
    2dae:	ef 5f       	subi	r30, 0xFF	; 255
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	9c 93       	st	X, r25
    2dbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ef 5f       	subi	r30, 0xFF	; 255
    2dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	d1 f6       	brne	.-76     	; 0x2d80 <main+0xaf6>
    2dcc:	27 c0       	rjmp	.+78     	; 0x2e1c <main+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	8e 01       	movw	r16, r28
    2dd0:	0f 5f       	subi	r16, 0xFF	; 255
    2dd2:	1e 4f       	sbci	r17, 0xFE	; 254
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	ed 5f       	subi	r30, 0xFD	; 253
    2dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	f8 01       	movw	r30, r16
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	de 01       	movw	r26, r28
    2df2:	a3 50       	subi	r26, 0x03	; 3
    2df4:	bf 4f       	sbci	r27, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	ef 5f       	subi	r30, 0xFF	; 255
    2dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	8d 93       	st	X+, r24
    2e02:	9c 93       	st	X, r25
    2e04:	fe 01       	movw	r30, r28
    2e06:	e3 50       	subi	r30, 0x03	; 3
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <main+0xb84>
    2e12:	fe 01       	movw	r30, r28
    2e14:	e3 50       	subi	r30, 0x03	; 3
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
					_delay_ms(150);//delay to make the user see the error
					LCD_displayStringRowColumn(1,0,"               ");//clear row two
    2e1c:	2b e7       	ldi	r18, 0x7B	; 123
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	a9 01       	movw	r20, r18
    2e26:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);//move the cursor to the second row
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
    2e32:	b4 ca       	rjmp	.-2712   	; 0x239c <main+0x112>
				}//end if ret= 2

				//////////////////////

				else if(ret==3)//if the user submit and the pass is valid
    2e34:	fe 01       	movw	r30, r28
    2e36:	ed 5a       	subi	r30, 0xAD	; 173
    2e38:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3a:	80 81       	ld	r24, Z
    2e3c:	83 30       	cpi	r24, 0x03	; 3
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <main+0xbb8>
    2e40:	ad ca       	rjmp	.-2726   	; 0x239c <main+0x112>
				{//start if ret==3

					UART_sendByte(step);//send our step to Control_MCU
    2e42:	80 91 0e 01 	lds	r24, 0x010E
    2e46:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 50       	subi	r30, 0x07	; 7
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a0 ea       	ldi	r26, 0xA0	; 160
    2e56:	b0 e4       	ldi	r27, 0x40	; 64
    2e58:	80 83       	st	Z, r24
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	a2 83       	std	Z+2, r26	; 0x02
    2e5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	8e 01       	movw	r16, r28
    2e62:	0b 50       	subi	r16, 0x0B	; 11
    2e64:	1f 4f       	sbci	r17, 0xFF	; 255
    2e66:	fe 01       	movw	r30, r28
    2e68:	e7 50       	subi	r30, 0x07	; 7
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a ef       	ldi	r20, 0xFA	; 250
    2e7a:	54 e4       	ldi	r21, 0x44	; 68
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	f8 01       	movw	r30, r16
    2e86:	80 83       	st	Z, r24
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	a2 83       	std	Z+2, r26	; 0x02
    2e8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e8e:	fe 01       	movw	r30, r28
    2e90:	eb 50       	subi	r30, 0x0B	; 11
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	44 f4       	brge	.+16     	; 0x2ebc <main+0xc32>
		__ticks = 1;
    2eac:	fe 01       	movw	r30, r28
    2eae:	ed 50       	subi	r30, 0x0D	; 13
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	64 c0       	rjmp	.+200    	; 0x2f84 <main+0xcfa>
	else if (__tmp > 65535)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	eb 50       	subi	r30, 0x0B	; 11
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	3f ef       	ldi	r19, 0xFF	; 255
    2ece:	4f e7       	ldi	r20, 0x7F	; 127
    2ed0:	57 e4       	ldi	r21, 0x47	; 71
    2ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed6:	18 16       	cp	r1, r24
    2ed8:	0c f0       	brlt	.+2      	; 0x2edc <main+0xc52>
    2eda:	43 c0       	rjmp	.+134    	; 0x2f62 <main+0xcd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	fe 01       	movw	r30, r28
    2ede:	e7 50       	subi	r30, 0x07	; 7
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e2       	ldi	r20, 0x20	; 32
    2ef0:	51 e4       	ldi	r21, 0x41	; 65
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8e 01       	movw	r16, r28
    2efc:	0d 50       	subi	r16, 0x0D	; 13
    2efe:	1f 4f       	sbci	r17, 0xFF	; 255
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	1f c0       	rjmp	.+62     	; 0x2f52 <main+0xcc8>
    2f14:	fe 01       	movw	r30, r28
    2f16:	ef 50       	subi	r30, 0x0F	; 15
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	88 ec       	ldi	r24, 0xC8	; 200
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    2f22:	fe 01       	movw	r30, r28
    2f24:	ef 50       	subi	r30, 0x0F	; 15
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <main+0xca2>
    2f30:	fe 01       	movw	r30, r28
    2f32:	ef 50       	subi	r30, 0x0F	; 15
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3a:	de 01       	movw	r26, r28
    2f3c:	ad 50       	subi	r26, 0x0D	; 13
    2f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f40:	fe 01       	movw	r30, r28
    2f42:	ed 50       	subi	r30, 0x0D	; 13
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	11 96       	adiw	r26, 0x01	; 1
    2f4e:	9c 93       	st	X, r25
    2f50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	fe 01       	movw	r30, r28
    2f54:	ed 50       	subi	r30, 0x0D	; 13
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	d1 f6       	brne	.-76     	; 0x2f14 <main+0xc8a>
    2f60:	28 c0       	rjmp	.+80     	; 0x2fb2 <main+0xd28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f62:	8e 01       	movw	r16, r28
    2f64:	0d 50       	subi	r16, 0x0D	; 13
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	eb 50       	subi	r30, 0x0B	; 11
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	f8 01       	movw	r30, r16
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	de 01       	movw	r26, r28
    2f86:	a1 51       	subi	r26, 0x11	; 17
    2f88:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 50       	subi	r30, 0x0D	; 13
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	91 81       	ldd	r25, Z+1	; 0x01
    2f94:	11 96       	adiw	r26, 0x01	; 1
    2f96:	9c 93       	st	X, r25
    2f98:	8e 93       	st	-X, r24
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e1 51       	subi	r30, 0x11	; 17
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <main+0xd1a>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e1 51       	subi	r30, 0x11	; 17
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
					_delay_ms(5);//wait to send data

					//-------------------

					for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ee 5a       	subi	r30, 0xAE	; 174
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	10 82       	st	Z, r1
    2fba:	c8 c0       	rjmp	.+400    	; 0x314c <main+0xec2>
					{//start for arr_pass
						UART_sendByte(arr_confirm[i]);//send the password to control_MCU
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ee 5a       	subi	r30, 0xAE	; 174
    2fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	fc 01       	movw	r30, r24
    2fca:	eb 5e       	subi	r30, 0xEB	; 235
    2fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fce:	80 81       	ld	r24, Z
    2fd0:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e5 51       	subi	r30, 0x15	; 21
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	a0 ea       	ldi	r26, 0xA0	; 160
    2fe0:	b1 e4       	ldi	r27, 0x41	; 65
    2fe2:	80 83       	st	Z, r24
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	a2 83       	std	Z+2, r26	; 0x02
    2fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fea:	8e 01       	movw	r16, r28
    2fec:	09 51       	subi	r16, 0x19	; 25
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e5 51       	subi	r30, 0x15	; 21
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a ef       	ldi	r20, 0xFA	; 250
    3004:	54 e4       	ldi	r21, 0x44	; 68
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	f8 01       	movw	r30, r16
    3010:	80 83       	st	Z, r24
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	a2 83       	std	Z+2, r26	; 0x02
    3016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3018:	fe 01       	movw	r30, r28
    301a:	e9 51       	subi	r30, 0x19	; 25
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e8       	ldi	r20, 0x80	; 128
    302c:	5f e3       	ldi	r21, 0x3F	; 63
    302e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3032:	88 23       	and	r24, r24
    3034:	44 f4       	brge	.+16     	; 0x3046 <main+0xdbc>
		__ticks = 1;
    3036:	fe 01       	movw	r30, r28
    3038:	eb 51       	subi	r30, 0x1B	; 27
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	91 83       	std	Z+1, r25	; 0x01
    3042:	80 83       	st	Z, r24
    3044:	64 c0       	rjmp	.+200    	; 0x310e <main+0xe84>
	else if (__tmp > 65535)
    3046:	fe 01       	movw	r30, r28
    3048:	e9 51       	subi	r30, 0x19	; 25
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	3f ef       	ldi	r19, 0xFF	; 255
    3058:	4f e7       	ldi	r20, 0x7F	; 127
    305a:	57 e4       	ldi	r21, 0x47	; 71
    305c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3060:	18 16       	cp	r1, r24
    3062:	0c f0       	brlt	.+2      	; 0x3066 <main+0xddc>
    3064:	43 c0       	rjmp	.+134    	; 0x30ec <main+0xe62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	fe 01       	movw	r30, r28
    3068:	e5 51       	subi	r30, 0x15	; 21
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	60 81       	ld	r22, Z
    306e:	71 81       	ldd	r23, Z+1	; 0x01
    3070:	82 81       	ldd	r24, Z+2	; 0x02
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	8e 01       	movw	r16, r28
    3086:	0b 51       	subi	r16, 0x1B	; 27
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	f8 01       	movw	r30, r16
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
    309c:	1f c0       	rjmp	.+62     	; 0x30dc <main+0xe52>
    309e:	fe 01       	movw	r30, r28
    30a0:	ed 51       	subi	r30, 0x1D	; 29
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	88 ec       	ldi	r24, 0xC8	; 200
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 51       	subi	r30, 0x1D	; 29
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <main+0xe2c>
    30ba:	fe 01       	movw	r30, r28
    30bc:	ed 51       	subi	r30, 0x1D	; 29
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c4:	de 01       	movw	r26, r28
    30c6:	ab 51       	subi	r26, 0x1B	; 27
    30c8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	eb 51       	subi	r30, 0x1B	; 27
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	11 96       	adiw	r26, 0x01	; 1
    30d8:	9c 93       	st	X, r25
    30da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30dc:	fe 01       	movw	r30, r28
    30de:	eb 51       	subi	r30, 0x1B	; 27
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	d1 f6       	brne	.-76     	; 0x309e <main+0xe14>
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ec:	8e 01       	movw	r16, r28
    30ee:	0b 51       	subi	r16, 0x1B	; 27
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	fe 01       	movw	r30, r28
    30f4:	e9 51       	subi	r30, 0x19	; 25
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	60 81       	ld	r22, Z
    30fa:	71 81       	ldd	r23, Z+1	; 0x01
    30fc:	82 81       	ldd	r24, Z+2	; 0x02
    30fe:	93 81       	ldd	r25, Z+3	; 0x03
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	f8 01       	movw	r30, r16
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
    310e:	de 01       	movw	r26, r28
    3110:	af 51       	subi	r26, 0x1F	; 31
    3112:	bf 4f       	sbci	r27, 0xFF	; 255
    3114:	fe 01       	movw	r30, r28
    3116:	eb 51       	subi	r30, 0x1B	; 27
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	8d 93       	st	X+, r24
    3120:	9c 93       	st	X, r25
    3122:	fe 01       	movw	r30, r28
    3124:	ef 51       	subi	r30, 0x1F	; 31
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <main+0xea2>
    3130:	fe 01       	movw	r30, r28
    3132:	ef 51       	subi	r30, 0x1F	; 31
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
					UART_sendByte(step);//send our step to Control_MCU
					_delay_ms(5);//wait to send data

					//-------------------

					for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    313a:	de 01       	movw	r26, r28
    313c:	ae 5a       	subi	r26, 0xAE	; 174
    313e:	be 4f       	sbci	r27, 0xFE	; 254
    3140:	fe 01       	movw	r30, r28
    3142:	ee 5a       	subi	r30, 0xAE	; 174
    3144:	fe 4f       	sbci	r31, 0xFE	; 254
    3146:	80 81       	ld	r24, Z
    3148:	8f 5f       	subi	r24, 0xFF	; 255
    314a:	8c 93       	st	X, r24
    314c:	fe 01       	movw	r30, r28
    314e:	ee 5a       	subi	r30, 0xAE	; 174
    3150:	fe 4f       	sbci	r31, 0xFE	; 254
    3152:	80 81       	ld	r24, Z
    3154:	84 30       	cpi	r24, 0x04	; 4
    3156:	08 f4       	brcc	.+2      	; 0x315a <main+0xed0>
    3158:	31 cf       	rjmp	.-414    	; 0x2fbc <main+0xd32>
						_delay_ms(20);//wait to send data
					}//end for arr_pass

					//--------------------

					ret2=UART_recieveByte();
    315a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_recieveByte>
    315e:	fe 01       	movw	r30, r28
    3160:	ef 5a       	subi	r30, 0xAF	; 175
    3162:	fe 4f       	sbci	r31, 0xFE	; 254
    3164:	80 83       	st	Z, r24

					if(ret2)//if the received number from Control_MCU is true
    3166:	fe 01       	movw	r30, r28
    3168:	ef 5a       	subi	r30, 0xAF	; 175
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	80 81       	ld	r24, Z
    316e:	88 23       	and	r24, r24
    3170:	41 f0       	breq	.+16     	; 0x3182 <main+0xef8>
					{//start if //if the received number from Control_MCU is true

						step=3;//go to step 3
    3172:	83 e0       	ldi	r24, 0x03	; 3
    3174:	80 93 0e 01 	sts	0x010E, r24
						flag=0;//to enable displaying
    3178:	fe 01       	movw	r30, r28
    317a:	e9 5a       	subi	r30, 0xA9	; 169
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	10 82       	st	Z, r1
    3180:	0d c9       	rjmp	.-3558   	; 0x239c <main+0x112>
					}//end of //if the received number from Control_MCU is true

					else//if the received number from Control_MCU is False
					{//start of //if the received number from Control_MCU is False
						LCD_clearScreen();//clear the screen
    3182:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"pass not match");//display first message on screen
    3186:	24 ea       	ldi	r18, 0xA4	; 164
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	a9 01       	movw	r20, r18
    3190:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    3194:	fe 01       	movw	r30, r28
    3196:	e3 52       	subi	r30, 0x23	; 35
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	aa e7       	ldi	r26, 0x7A	; 122
    31a0:	b3 e4       	ldi	r27, 0x43	; 67
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	8e 01       	movw	r16, r28
    31ac:	07 52       	subi	r16, 0x27	; 39
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	e3 52       	subi	r30, 0x23	; 35
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d8:	fe 01       	movw	r30, r28
    31da:	e7 52       	subi	r30, 0x27	; 39
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	60 81       	ld	r22, Z
    31e0:	71 81       	ldd	r23, Z+1	; 0x01
    31e2:	82 81       	ldd	r24, Z+2	; 0x02
    31e4:	93 81       	ldd	r25, Z+3	; 0x03
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	44 f4       	brge	.+16     	; 0x3206 <main+0xf7c>
		__ticks = 1;
    31f6:	fe 01       	movw	r30, r28
    31f8:	e9 52       	subi	r30, 0x29	; 41
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	64 c0       	rjmp	.+200    	; 0x32ce <main+0x1044>
	else if (__tmp > 65535)
    3206:	fe 01       	movw	r30, r28
    3208:	e7 52       	subi	r30, 0x27	; 39
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	60 81       	ld	r22, Z
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	0c f0       	brlt	.+2      	; 0x3226 <main+0xf9c>
    3224:	43 c0       	rjmp	.+134    	; 0x32ac <main+0x1022>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	fe 01       	movw	r30, r28
    3228:	e3 52       	subi	r30, 0x23	; 35
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	60 81       	ld	r22, Z
    322e:	71 81       	ldd	r23, Z+1	; 0x01
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	93 81       	ldd	r25, Z+3	; 0x03
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8e 01       	movw	r16, r28
    3246:	09 52       	subi	r16, 0x29	; 41
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	f8 01       	movw	r30, r16
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	1f c0       	rjmp	.+62     	; 0x329c <main+0x1012>
    325e:	fe 01       	movw	r30, r28
    3260:	eb 52       	subi	r30, 0x2B	; 43
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	88 ec       	ldi	r24, 0xC8	; 200
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	fe 01       	movw	r30, r28
    326e:	eb 52       	subi	r30, 0x2B	; 43
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	80 81       	ld	r24, Z
    3274:	91 81       	ldd	r25, Z+1	; 0x01
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <main+0xfec>
    327a:	fe 01       	movw	r30, r28
    327c:	eb 52       	subi	r30, 0x2B	; 43
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	de 01       	movw	r26, r28
    3286:	a9 52       	subi	r26, 0x29	; 41
    3288:	bf 4f       	sbci	r27, 0xFF	; 255
    328a:	fe 01       	movw	r30, r28
    328c:	e9 52       	subi	r30, 0x29	; 41
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	11 96       	adiw	r26, 0x01	; 1
    3298:	9c 93       	st	X, r25
    329a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	fe 01       	movw	r30, r28
    329e:	e9 52       	subi	r30, 0x29	; 41
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	d1 f6       	brne	.-76     	; 0x325e <main+0xfd4>
    32aa:	28 c0       	rjmp	.+80     	; 0x32fc <main+0x1072>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ac:	8e 01       	movw	r16, r28
    32ae:	09 52       	subi	r16, 0x29	; 41
    32b0:	1f 4f       	sbci	r17, 0xFF	; 255
    32b2:	fe 01       	movw	r30, r28
    32b4:	e7 52       	subi	r30, 0x27	; 39
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	82 81       	ldd	r24, Z+2	; 0x02
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	f8 01       	movw	r30, r16
    32ca:	91 83       	std	Z+1, r25	; 0x01
    32cc:	80 83       	st	Z, r24
    32ce:	de 01       	movw	r26, r28
    32d0:	ad 52       	subi	r26, 0x2D	; 45
    32d2:	bf 4f       	sbci	r27, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e9 52       	subi	r30, 0x29	; 41
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	91 81       	ldd	r25, Z+1	; 0x01
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	9c 93       	st	X, r25
    32e2:	8e 93       	st	-X, r24
    32e4:	fe 01       	movw	r30, r28
    32e6:	ed 52       	subi	r30, 0x2D	; 45
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <main+0x1064>
    32f2:	fe 01       	movw	r30, r28
    32f4:	ed 52       	subi	r30, 0x2D	; 45
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
						_delay_ms(250);//delay to make user see teh message
						step=1;//go to step 1
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	80 93 0e 01 	sts	0x010E, r24
						flag=0;//enable displaying
    3302:	fe 01       	movw	r30, r28
    3304:	e9 5a       	subi	r30, 0xA9	; 169
    3306:	fe 4f       	sbci	r31, 0xFE	; 254
    3308:	10 82       	st	Z, r1
    330a:	48 c8       	rjmp	.-3952   	; 0x239c <main+0x112>
				/////////////////////////////////case 3////////////////////////////////////////////

			case 3://step 3 start
				//////////////////////

				if(flag==0)//display the message once
    330c:	fe 01       	movw	r30, r28
    330e:	e9 5a       	subi	r30, 0xA9	; 169
    3310:	fe 4f       	sbci	r31, 0xFE	; 254
    3312:	80 81       	ld	r24, Z
    3314:	88 23       	and	r24, r24
    3316:	09 f0       	breq	.+2      	; 0x331a <main+0x1090>
    3318:	cf c0       	rjmp	.+414    	; 0x34b8 <main+0x122e>
				{//start if flag=1
					LCD_clearScreen();//clear the screen
    331a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"+ :Open Door");//display first message on screen
    331e:	23 eb       	ldi	r18, 0xB3	; 179
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	a9 01       	movw	r20, r18
    3328:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0,"- :change pass");//display first message on screen
    332c:	20 ec       	ldi	r18, 0xC0	; 192
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	a9 01       	movw	r20, r18
    3336:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
					key1=KEYPAD_getPressedKey();//get numbers from user
    333a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
    333e:	fe 01       	movw	r30, r28
    3340:	ec 5a       	subi	r30, 0xAC	; 172
    3342:	fe 4f       	sbci	r31, 0xFE	; 254
    3344:	80 83       	st	Z, r24
    3346:	fe 01       	movw	r30, r28
    3348:	e1 53       	subi	r30, 0x31	; 49
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a8 e4       	ldi	r26, 0x48	; 72
    3352:	b3 e4       	ldi	r27, 0x43	; 67
    3354:	80 83       	st	Z, r24
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	a2 83       	std	Z+2, r26	; 0x02
    335a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335c:	8e 01       	movw	r16, r28
    335e:	05 53       	subi	r16, 0x35	; 53
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	fe 01       	movw	r30, r28
    3364:	e1 53       	subi	r30, 0x31	; 49
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	82 81       	ldd	r24, Z+2	; 0x02
    336e:	93 81       	ldd	r25, Z+3	; 0x03
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	4a ef       	ldi	r20, 0xFA	; 250
    3376:	54 e4       	ldi	r21, 0x44	; 68
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	80 83       	st	Z, r24
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	a2 83       	std	Z+2, r26	; 0x02
    3388:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    338a:	fe 01       	movw	r30, r28
    338c:	e5 53       	subi	r30, 0x35	; 53
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e8       	ldi	r20, 0x80	; 128
    339e:	5f e3       	ldi	r21, 0x3F	; 63
    33a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33a4:	88 23       	and	r24, r24
    33a6:	44 f4       	brge	.+16     	; 0x33b8 <main+0x112e>
		__ticks = 1;
    33a8:	fe 01       	movw	r30, r28
    33aa:	e7 53       	subi	r30, 0x37	; 55
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	64 c0       	rjmp	.+200    	; 0x3480 <main+0x11f6>
	else if (__tmp > 65535)
    33b8:	fe 01       	movw	r30, r28
    33ba:	e5 53       	subi	r30, 0x35	; 53
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <main+0x114e>
    33d6:	43 c0       	rjmp	.+134    	; 0x345e <main+0x11d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d8:	fe 01       	movw	r30, r28
    33da:	e1 53       	subi	r30, 0x31	; 49
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e2       	ldi	r20, 0x20	; 32
    33ec:	51 e4       	ldi	r21, 0x41	; 65
    33ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8e 01       	movw	r16, r28
    33f8:	07 53       	subi	r16, 0x37	; 55
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	f8 01       	movw	r30, r16
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	1f c0       	rjmp	.+62     	; 0x344e <main+0x11c4>
    3410:	fe 01       	movw	r30, r28
    3412:	e9 53       	subi	r30, 0x39	; 57
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	88 ec       	ldi	r24, 0xC8	; 200
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	fe 01       	movw	r30, r28
    3420:	e9 53       	subi	r30, 0x39	; 57
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <main+0x119e>
    342c:	fe 01       	movw	r30, r28
    342e:	e9 53       	subi	r30, 0x39	; 57
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3436:	de 01       	movw	r26, r28
    3438:	a7 53       	subi	r26, 0x37	; 55
    343a:	bf 4f       	sbci	r27, 0xFF	; 255
    343c:	fe 01       	movw	r30, r28
    343e:	e7 53       	subi	r30, 0x37	; 55
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	91 81       	ldd	r25, Z+1	; 0x01
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	11 96       	adiw	r26, 0x01	; 1
    344a:	9c 93       	st	X, r25
    344c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344e:	fe 01       	movw	r30, r28
    3450:	e7 53       	subi	r30, 0x37	; 55
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	d1 f6       	brne	.-76     	; 0x3410 <main+0x1186>
    345c:	28 c0       	rjmp	.+80     	; 0x34ae <main+0x1224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	8e 01       	movw	r16, r28
    3460:	07 53       	subi	r16, 0x37	; 55
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	fe 01       	movw	r30, r28
    3466:	e5 53       	subi	r30, 0x35	; 53
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	f8 01       	movw	r30, r16
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	de 01       	movw	r26, r28
    3482:	ab 53       	subi	r26, 0x3B	; 59
    3484:	bf 4f       	sbci	r27, 0xFF	; 255
    3486:	fe 01       	movw	r30, r28
    3488:	e7 53       	subi	r30, 0x37	; 55
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	11 96       	adiw	r26, 0x01	; 1
    3492:	9c 93       	st	X, r25
    3494:	8e 93       	st	-X, r24
    3496:	fe 01       	movw	r30, r28
    3498:	eb 53       	subi	r30, 0x3B	; 59
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <main+0x1216>
    34a4:	fe 01       	movw	r30, r28
    34a6:	eb 53       	subi	r30, 0x3B	; 59
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	80 83       	st	Z, r24
					_delay_ms(200);
					flag=1;//do not get here again
    34ae:	fe 01       	movw	r30, r28
    34b0:	e9 5a       	subi	r30, 0xA9	; 169
    34b2:	fe 4f       	sbci	r31, 0xFE	; 254
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	80 83       	st	Z, r24
				}//end if flag

				//////////////////////

				switch(key1)//check if key = '+' or '-'
    34b8:	fe 01       	movw	r30, r28
    34ba:	ec 5a       	subi	r30, 0xAC	; 172
    34bc:	fe 4f       	sbci	r31, 0xFE	; 254
    34be:	80 81       	ld	r24, Z
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	c2 5a       	subi	r28, 0xA2	; 162
    34c6:	de 4f       	sbci	r29, 0xFE	; 254
    34c8:	39 83       	std	Y+1, r19	; 0x01
    34ca:	28 83       	st	Y, r18
    34cc:	ce 55       	subi	r28, 0x5E	; 94
    34ce:	d1 40       	sbci	r29, 0x01	; 1
    34d0:	c2 5a       	subi	r28, 0xA2	; 162
    34d2:	de 4f       	sbci	r29, 0xFE	; 254
    34d4:	88 81       	ld	r24, Y
    34d6:	99 81       	ldd	r25, Y+1	; 0x01
    34d8:	ce 55       	subi	r28, 0x5E	; 94
    34da:	d1 40       	sbci	r29, 0x01	; 1
    34dc:	8b 32       	cpi	r24, 0x2B	; 43
    34de:	91 05       	cpc	r25, r1
    34e0:	61 f0       	breq	.+24     	; 0x34fa <main+0x1270>
    34e2:	c2 5a       	subi	r28, 0xA2	; 162
    34e4:	de 4f       	sbci	r29, 0xFE	; 254
    34e6:	e8 81       	ld	r30, Y
    34e8:	f9 81       	ldd	r31, Y+1	; 0x01
    34ea:	ce 55       	subi	r28, 0x5E	; 94
    34ec:	d1 40       	sbci	r29, 0x01	; 1
    34ee:	ed 32       	cpi	r30, 0x2D	; 45
    34f0:	f1 05       	cpc	r31, r1
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <main+0x126c>
    34f4:	84 c6       	rjmp	.+3336   	; 0x41fe <main+0x1f74>
    34f6:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <main+0x2742>
				case '+'://case + open door

					///////////////////////////////////////////////////////


					if(flag2==0)//display the message once
    34fa:	fe 01       	movw	r30, r28
    34fc:	ea 5a       	subi	r30, 0xAA	; 170
    34fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3500:	80 81       	ld	r24, Z
    3502:	88 23       	and	r24, r24
    3504:	91 f4       	brne	.+36     	; 0x352a <main+0x12a0>
					{//start if flag
						LCD_clearScreen();//clear the screen
    3506:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Plz enter Pass:");//display first message on screen
    350a:	29 e6       	ldi	r18, 0x69	; 105
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	a9 01       	movw	r20, r18
    3514:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
						LCD_moveCursor(1,0);//move the cursor to the second row
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
						flag2=1;//do not get here again
    3520:	fe 01       	movw	r30, r28
    3522:	ea 5a       	subi	r30, 0xAA	; 170
    3524:	fe 4f       	sbci	r31, 0xFE	; 254
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	80 83       	st	Z, r24
					}//end if flag

					//////////////////////

					key=KEYPAD_getPressedKey();//get numbers from user
    352a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
    352e:	fe 01       	movw	r30, r28
    3530:	eb 5a       	subi	r30, 0xAB	; 171
    3532:	fe 4f       	sbci	r31, 0xFE	; 254
    3534:	80 83       	st	Z, r24
    3536:	fe 01       	movw	r30, r28
    3538:	ef 53       	subi	r30, 0x3F	; 63
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	a8 e4       	ldi	r26, 0x48	; 72
    3542:	b3 e4       	ldi	r27, 0x43	; 67
    3544:	80 83       	st	Z, r24
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	a2 83       	std	Z+2, r26	; 0x02
    354a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354c:	8e 01       	movw	r16, r28
    354e:	03 54       	subi	r16, 0x43	; 67
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	fe 01       	movw	r30, r28
    3554:	ef 53       	subi	r30, 0x3F	; 63
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	4a ef       	ldi	r20, 0xFA	; 250
    3566:	54 e4       	ldi	r21, 0x44	; 68
    3568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	f8 01       	movw	r30, r16
    3572:	80 83       	st	Z, r24
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	a2 83       	std	Z+2, r26	; 0x02
    3578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    357a:	fe 01       	movw	r30, r28
    357c:	e3 54       	subi	r30, 0x43	; 67
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	82 81       	ldd	r24, Z+2	; 0x02
    3586:	93 81       	ldd	r25, Z+3	; 0x03
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e8       	ldi	r20, 0x80	; 128
    358e:	5f e3       	ldi	r21, 0x3F	; 63
    3590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3594:	88 23       	and	r24, r24
    3596:	44 f4       	brge	.+16     	; 0x35a8 <main+0x131e>
		__ticks = 1;
    3598:	fe 01       	movw	r30, r28
    359a:	e5 54       	subi	r30, 0x45	; 69
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	91 83       	std	Z+1, r25	; 0x01
    35a4:	80 83       	st	Z, r24
    35a6:	64 c0       	rjmp	.+200    	; 0x3670 <main+0x13e6>
	else if (__tmp > 65535)
    35a8:	fe 01       	movw	r30, r28
    35aa:	e3 54       	subi	r30, 0x43	; 67
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	3f ef       	ldi	r19, 0xFF	; 255
    35ba:	4f e7       	ldi	r20, 0x7F	; 127
    35bc:	57 e4       	ldi	r21, 0x47	; 71
    35be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35c2:	18 16       	cp	r1, r24
    35c4:	0c f0       	brlt	.+2      	; 0x35c8 <main+0x133e>
    35c6:	43 c0       	rjmp	.+134    	; 0x364e <main+0x13c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c8:	fe 01       	movw	r30, r28
    35ca:	ef 53       	subi	r30, 0x3F	; 63
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	60 81       	ld	r22, Z
    35d0:	71 81       	ldd	r23, Z+1	; 0x01
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	93 81       	ldd	r25, Z+3	; 0x03
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e2       	ldi	r20, 0x20	; 32
    35dc:	51 e4       	ldi	r21, 0x41	; 65
    35de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	8e 01       	movw	r16, r28
    35e8:	05 54       	subi	r16, 0x45	; 69
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	f8 01       	movw	r30, r16
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	80 83       	st	Z, r24
    35fe:	1f c0       	rjmp	.+62     	; 0x363e <main+0x13b4>
    3600:	fe 01       	movw	r30, r28
    3602:	e7 54       	subi	r30, 0x47	; 71
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	88 ec       	ldi	r24, 0xC8	; 200
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	80 83       	st	Z, r24
    360e:	fe 01       	movw	r30, r28
    3610:	e7 54       	subi	r30, 0x47	; 71
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <main+0x138e>
    361c:	fe 01       	movw	r30, r28
    361e:	e7 54       	subi	r30, 0x47	; 71
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3626:	de 01       	movw	r26, r28
    3628:	a5 54       	subi	r26, 0x45	; 69
    362a:	bf 4f       	sbci	r27, 0xFF	; 255
    362c:	fe 01       	movw	r30, r28
    362e:	e5 54       	subi	r30, 0x45	; 69
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	91 81       	ldd	r25, Z+1	; 0x01
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	11 96       	adiw	r26, 0x01	; 1
    363a:	9c 93       	st	X, r25
    363c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	fe 01       	movw	r30, r28
    3640:	e5 54       	subi	r30, 0x45	; 69
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	80 81       	ld	r24, Z
    3646:	91 81       	ldd	r25, Z+1	; 0x01
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	d1 f6       	brne	.-76     	; 0x3600 <main+0x1376>
    364c:	27 c0       	rjmp	.+78     	; 0x369c <main+0x1412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    364e:	8e 01       	movw	r16, r28
    3650:	05 54       	subi	r16, 0x45	; 69
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	fe 01       	movw	r30, r28
    3656:	e3 54       	subi	r30, 0x43	; 67
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	f8 01       	movw	r30, r16
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	de 01       	movw	r26, r28
    3672:	a9 54       	subi	r26, 0x49	; 73
    3674:	bf 4f       	sbci	r27, 0xFF	; 255
    3676:	fe 01       	movw	r30, r28
    3678:	e5 54       	subi	r30, 0x45	; 69
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	80 81       	ld	r24, Z
    367e:	91 81       	ldd	r25, Z+1	; 0x01
    3680:	8d 93       	st	X+, r24
    3682:	9c 93       	st	X, r25
    3684:	fe 01       	movw	r30, r28
    3686:	e9 54       	subi	r30, 0x49	; 73
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <main+0x1404>
    3692:	fe 01       	movw	r30, r28
    3694:	e9 54       	subi	r30, 0x49	; 73
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	80 83       	st	Z, r24
					_delay_ms(200);

					ret=eeprom_pass(key);//check the return
    369c:	fe 01       	movw	r30, r28
    369e:	eb 5a       	subi	r30, 0xAB	; 171
    36a0:	fe 4f       	sbci	r31, 0xFE	; 254
    36a2:	80 81       	ld	r24, Z
    36a4:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <eeprom_pass>
    36a8:	fe 01       	movw	r30, r28
    36aa:	ed 5a       	subi	r30, 0xAD	; 173
    36ac:	fe 4f       	sbci	r31, 0xFE	; 254
    36ae:	80 83       	st	Z, r24
					//////////////////////

					if(ret==1)//if the key between 0 and 9 and array still not full
    36b0:	fe 01       	movw	r30, r28
    36b2:	ed 5a       	subi	r30, 0xAD	; 173
    36b4:	fe 4f       	sbci	r31, 0xFE	; 254
    36b6:	80 81       	ld	r24, Z
    36b8:	81 30       	cpi	r24, 0x01	; 1
    36ba:	31 f4       	brne	.+12     	; 0x36c8 <main+0x143e>
					{//start if ret =1
						LCD_sendString("*");//display '*'
    36bc:	89 e7       	ldi	r24, 0x79	; 121
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendString>
    36c4:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}//end if ret =1

					//////////////////////

					else if(ret==2)//if the user submit but and array still not full
    36c8:	fe 01       	movw	r30, r28
    36ca:	ed 5a       	subi	r30, 0xAD	; 173
    36cc:	fe 4f       	sbci	r31, 0xFE	; 254
    36ce:	80 81       	ld	r24, Z
    36d0:	82 30       	cpi	r24, 0x02	; 2
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <main+0x144c>
    36d4:	ce c0       	rjmp	.+412    	; 0x3872 <main+0x15e8>
					{//start if ret= 2
						LCD_displayStringRowColumn(1,0,"               ");//clear row two
    36d6:	2b e7       	ldi	r18, 0x7B	; 123
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	a9 01       	movw	r20, r18
    36e0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"Error pass");//display Error message
    36e4:	2b e8       	ldi	r18, 0x8B	; 139
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	a9 01       	movw	r20, r18
    36ee:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    36f2:	fe 01       	movw	r30, r28
    36f4:	ed 54       	subi	r30, 0x4D	; 77
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a6 e1       	ldi	r26, 0x16	; 22
    36fe:	b3 e4       	ldi	r27, 0x43	; 67
    3700:	80 83       	st	Z, r24
    3702:	91 83       	std	Z+1, r25	; 0x01
    3704:	a2 83       	std	Z+2, r26	; 0x02
    3706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3708:	8e 01       	movw	r16, r28
    370a:	01 55       	subi	r16, 0x51	; 81
    370c:	1f 4f       	sbci	r17, 0xFF	; 255
    370e:	fe 01       	movw	r30, r28
    3710:	ed 54       	subi	r30, 0x4D	; 77
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	60 81       	ld	r22, Z
    3716:	71 81       	ldd	r23, Z+1	; 0x01
    3718:	82 81       	ldd	r24, Z+2	; 0x02
    371a:	93 81       	ldd	r25, Z+3	; 0x03
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	4a ef       	ldi	r20, 0xFA	; 250
    3722:	54 e4       	ldi	r21, 0x44	; 68
    3724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	f8 01       	movw	r30, r16
    372e:	80 83       	st	Z, r24
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	a2 83       	std	Z+2, r26	; 0x02
    3734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3736:	fe 01       	movw	r30, r28
    3738:	e1 55       	subi	r30, 0x51	; 81
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e8       	ldi	r20, 0x80	; 128
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3750:	88 23       	and	r24, r24
    3752:	44 f4       	brge	.+16     	; 0x3764 <main+0x14da>
		__ticks = 1;
    3754:	fe 01       	movw	r30, r28
    3756:	e3 55       	subi	r30, 0x53	; 83
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	64 c0       	rjmp	.+200    	; 0x382c <main+0x15a2>
	else if (__tmp > 65535)
    3764:	fe 01       	movw	r30, r28
    3766:	e1 55       	subi	r30, 0x51	; 81
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	3f ef       	ldi	r19, 0xFF	; 255
    3776:	4f e7       	ldi	r20, 0x7F	; 127
    3778:	57 e4       	ldi	r21, 0x47	; 71
    377a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    377e:	18 16       	cp	r1, r24
    3780:	0c f0       	brlt	.+2      	; 0x3784 <main+0x14fa>
    3782:	43 c0       	rjmp	.+134    	; 0x380a <main+0x1580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3784:	fe 01       	movw	r30, r28
    3786:	ed 54       	subi	r30, 0x4D	; 77
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	60 81       	ld	r22, Z
    378c:	71 81       	ldd	r23, Z+1	; 0x01
    378e:	82 81       	ldd	r24, Z+2	; 0x02
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	8e 01       	movw	r16, r28
    37a4:	03 55       	subi	r16, 0x53	; 83
    37a6:	1f 4f       	sbci	r17, 0xFF	; 255
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	f8 01       	movw	r30, r16
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	80 83       	st	Z, r24
    37ba:	1f c0       	rjmp	.+62     	; 0x37fa <main+0x1570>
    37bc:	fe 01       	movw	r30, r28
    37be:	e5 55       	subi	r30, 0x55	; 85
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	88 ec       	ldi	r24, 0xC8	; 200
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	91 83       	std	Z+1, r25	; 0x01
    37c8:	80 83       	st	Z, r24
    37ca:	fe 01       	movw	r30, r28
    37cc:	e5 55       	subi	r30, 0x55	; 85
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <main+0x154a>
    37d8:	fe 01       	movw	r30, r28
    37da:	e5 55       	subi	r30, 0x55	; 85
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e2:	de 01       	movw	r26, r28
    37e4:	a3 55       	subi	r26, 0x53	; 83
    37e6:	bf 4f       	sbci	r27, 0xFF	; 255
    37e8:	fe 01       	movw	r30, r28
    37ea:	e3 55       	subi	r30, 0x53	; 83
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	11 96       	adiw	r26, 0x01	; 1
    37f6:	9c 93       	st	X, r25
    37f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fa:	fe 01       	movw	r30, r28
    37fc:	e3 55       	subi	r30, 0x53	; 83
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	d1 f6       	brne	.-76     	; 0x37bc <main+0x1532>
    3808:	27 c0       	rjmp	.+78     	; 0x3858 <main+0x15ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380a:	8e 01       	movw	r16, r28
    380c:	03 55       	subi	r16, 0x53	; 83
    380e:	1f 4f       	sbci	r17, 0xFF	; 255
    3810:	fe 01       	movw	r30, r28
    3812:	e1 55       	subi	r30, 0x51	; 81
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	60 81       	ld	r22, Z
    3818:	71 81       	ldd	r23, Z+1	; 0x01
    381a:	82 81       	ldd	r24, Z+2	; 0x02
    381c:	93 81       	ldd	r25, Z+3	; 0x03
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	f8 01       	movw	r30, r16
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	80 83       	st	Z, r24
    382c:	de 01       	movw	r26, r28
    382e:	a7 55       	subi	r26, 0x57	; 87
    3830:	bf 4f       	sbci	r27, 0xFF	; 255
    3832:	fe 01       	movw	r30, r28
    3834:	e3 55       	subi	r30, 0x53	; 83
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	8d 93       	st	X+, r24
    383e:	9c 93       	st	X, r25
    3840:	fe 01       	movw	r30, r28
    3842:	e7 55       	subi	r30, 0x57	; 87
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 81       	ld	r24, Z
    3848:	91 81       	ldd	r25, Z+1	; 0x01
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <main+0x15c0>
    384e:	fe 01       	movw	r30, r28
    3850:	e7 55       	subi	r30, 0x57	; 87
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	80 83       	st	Z, r24
						_delay_ms(150);//delay to make the user see the error
						LCD_displayStringRowColumn(1,0,"               ");//clear row two
    3858:	2b e7       	ldi	r18, 0x7B	; 123
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	a9 01       	movw	r20, r18
    3862:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
						LCD_moveCursor(1,0);//move the cursor to the second row
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
    386e:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}//end if ret= 2

					//////////////////////

					else if(ret==3)//if the user submit and the pass is valid
    3872:	fe 01       	movw	r30, r28
    3874:	ed 5a       	subi	r30, 0xAD	; 173
    3876:	fe 4f       	sbci	r31, 0xFE	; 254
    3878:	80 81       	ld	r24, Z
    387a:	83 30       	cpi	r24, 0x03	; 3
    387c:	11 f0       	breq	.+4      	; 0x3882 <main+0x15f8>
    387e:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					{//start if ret==3
						UART_sendByte(step);//send our step to Control_MCU
    3882:	80 91 0e 01 	lds	r24, 0x010E
    3886:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    388a:	fe 01       	movw	r30, r28
    388c:	eb 55       	subi	r30, 0x5B	; 91
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	a8 e4       	ldi	r26, 0x48	; 72
    3896:	b2 e4       	ldi	r27, 0x42	; 66
    3898:	80 83       	st	Z, r24
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	a2 83       	std	Z+2, r26	; 0x02
    389e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a0:	8e 01       	movw	r16, r28
    38a2:	0f 55       	subi	r16, 0x5F	; 95
    38a4:	1f 4f       	sbci	r17, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	eb 55       	subi	r30, 0x5B	; 91
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a ef       	ldi	r20, 0xFA	; 250
    38ba:	54 e4       	ldi	r21, 0x44	; 68
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	f8 01       	movw	r30, r16
    38c6:	80 83       	st	Z, r24
    38c8:	91 83       	std	Z+1, r25	; 0x01
    38ca:	a2 83       	std	Z+2, r26	; 0x02
    38cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ce:	fe 01       	movw	r30, r28
    38d0:	ef 55       	subi	r30, 0x5F	; 95
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	60 81       	ld	r22, Z
    38d6:	71 81       	ldd	r23, Z+1	; 0x01
    38d8:	82 81       	ldd	r24, Z+2	; 0x02
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e8       	ldi	r20, 0x80	; 128
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e8:	88 23       	and	r24, r24
    38ea:	44 f4       	brge	.+16     	; 0x38fc <main+0x1672>
		__ticks = 1;
    38ec:	fe 01       	movw	r30, r28
    38ee:	e1 56       	subi	r30, 0x61	; 97
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	80 83       	st	Z, r24
    38fa:	64 c0       	rjmp	.+200    	; 0x39c4 <main+0x173a>
	else if (__tmp > 65535)
    38fc:	fe 01       	movw	r30, r28
    38fe:	ef 55       	subi	r30, 0x5F	; 95
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	3f ef       	ldi	r19, 0xFF	; 255
    390e:	4f e7       	ldi	r20, 0x7F	; 127
    3910:	57 e4       	ldi	r21, 0x47	; 71
    3912:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3916:	18 16       	cp	r1, r24
    3918:	0c f0       	brlt	.+2      	; 0x391c <main+0x1692>
    391a:	43 c0       	rjmp	.+134    	; 0x39a2 <main+0x1718>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391c:	fe 01       	movw	r30, r28
    391e:	eb 55       	subi	r30, 0x5B	; 91
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	60 81       	ld	r22, Z
    3924:	71 81       	ldd	r23, Z+1	; 0x01
    3926:	82 81       	ldd	r24, Z+2	; 0x02
    3928:	93 81       	ldd	r25, Z+3	; 0x03
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e2       	ldi	r20, 0x20	; 32
    3930:	51 e4       	ldi	r21, 0x41	; 65
    3932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	8e 01       	movw	r16, r28
    393c:	01 56       	subi	r16, 0x61	; 97
    393e:	1f 4f       	sbci	r17, 0xFF	; 255
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	f8 01       	movw	r30, r16
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	1f c0       	rjmp	.+62     	; 0x3992 <main+0x1708>
    3954:	fe 01       	movw	r30, r28
    3956:	e3 56       	subi	r30, 0x63	; 99
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	88 ec       	ldi	r24, 0xC8	; 200
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	91 83       	std	Z+1, r25	; 0x01
    3960:	80 83       	st	Z, r24
    3962:	fe 01       	movw	r30, r28
    3964:	e3 56       	subi	r30, 0x63	; 99
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <main+0x16e2>
    3970:	fe 01       	movw	r30, r28
    3972:	e3 56       	subi	r30, 0x63	; 99
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	91 83       	std	Z+1, r25	; 0x01
    3978:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	de 01       	movw	r26, r28
    397c:	a1 56       	subi	r26, 0x61	; 97
    397e:	bf 4f       	sbci	r27, 0xFF	; 255
    3980:	fe 01       	movw	r30, r28
    3982:	e1 56       	subi	r30, 0x61	; 97
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	01 97       	sbiw	r24, 0x01	; 1
    398c:	11 96       	adiw	r26, 0x01	; 1
    398e:	9c 93       	st	X, r25
    3990:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3992:	fe 01       	movw	r30, r28
    3994:	e1 56       	subi	r30, 0x61	; 97
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	91 81       	ldd	r25, Z+1	; 0x01
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	d1 f6       	brne	.-76     	; 0x3954 <main+0x16ca>
    39a0:	28 c0       	rjmp	.+80     	; 0x39f2 <main+0x1768>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a2:	8e 01       	movw	r16, r28
    39a4:	01 56       	subi	r16, 0x61	; 97
    39a6:	1f 4f       	sbci	r17, 0xFF	; 255
    39a8:	fe 01       	movw	r30, r28
    39aa:	ef 55       	subi	r30, 0x5F	; 95
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	f8 01       	movw	r30, r16
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	80 83       	st	Z, r24
    39c4:	de 01       	movw	r26, r28
    39c6:	a5 56       	subi	r26, 0x65	; 101
    39c8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	e1 56       	subi	r30, 0x61	; 97
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	11 96       	adiw	r26, 0x01	; 1
    39d6:	9c 93       	st	X, r25
    39d8:	8e 93       	st	-X, r24
    39da:	fe 01       	movw	r30, r28
    39dc:	e5 56       	subi	r30, 0x65	; 101
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 81       	ld	r24, Z
    39e2:	91 81       	ldd	r25, Z+1	; 0x01
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <main+0x175a>
    39e8:	fe 01       	movw	r30, r28
    39ea:	e5 56       	subi	r30, 0x65	; 101
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	80 83       	st	Z, r24
						_delay_ms(50);//wait to send data

						for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    39f2:	fe 01       	movw	r30, r28
    39f4:	ee 5a       	subi	r30, 0xAE	; 174
    39f6:	fe 4f       	sbci	r31, 0xFE	; 254
    39f8:	10 82       	st	Z, r1
    39fa:	c8 c0       	rjmp	.+400    	; 0x3b8c <main+0x1902>
						{//start for arr_pass
							UART_sendByte(arr_eeprom[i]);//send the password to control_MCU
    39fc:	fe 01       	movw	r30, r28
    39fe:	ee 5a       	subi	r30, 0xAE	; 174
    3a00:	fe 4f       	sbci	r31, 0xFE	; 254
    3a02:	80 81       	ld	r24, Z
    3a04:	88 2f       	mov	r24, r24
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	fc 01       	movw	r30, r24
    3a0a:	e6 5e       	subi	r30, 0xE6	; 230
    3a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0e:	80 81       	ld	r24, Z
    3a10:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    3a14:	fe 01       	movw	r30, r28
    3a16:	e9 56       	subi	r30, 0x69	; 105
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 ea       	ldi	r26, 0xA0	; 160
    3a20:	b1 e4       	ldi	r27, 0x41	; 65
    3a22:	80 83       	st	Z, r24
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	a2 83       	std	Z+2, r26	; 0x02
    3a28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	8e 01       	movw	r16, r28
    3a2c:	0d 56       	subi	r16, 0x6D	; 109
    3a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a30:	fe 01       	movw	r30, r28
    3a32:	e9 56       	subi	r30, 0x69	; 105
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	60 81       	ld	r22, Z
    3a38:	71 81       	ldd	r23, Z+1	; 0x01
    3a3a:	82 81       	ldd	r24, Z+2	; 0x02
    3a3c:	93 81       	ldd	r25, Z+3	; 0x03
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	4a ef       	ldi	r20, 0xFA	; 250
    3a44:	54 e4       	ldi	r21, 0x44	; 68
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	f8 01       	movw	r30, r16
    3a50:	80 83       	st	Z, r24
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	a2 83       	std	Z+2, r26	; 0x02
    3a56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a58:	fe 01       	movw	r30, r28
    3a5a:	ed 56       	subi	r30, 0x6D	; 109
    3a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5e:	60 81       	ld	r22, Z
    3a60:	71 81       	ldd	r23, Z+1	; 0x01
    3a62:	82 81       	ldd	r24, Z+2	; 0x02
    3a64:	93 81       	ldd	r25, Z+3	; 0x03
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e8       	ldi	r20, 0x80	; 128
    3a6c:	5f e3       	ldi	r21, 0x3F	; 63
    3a6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a72:	88 23       	and	r24, r24
    3a74:	44 f4       	brge	.+16     	; 0x3a86 <main+0x17fc>
		__ticks = 1;
    3a76:	fe 01       	movw	r30, r28
    3a78:	ef 56       	subi	r30, 0x6F	; 111
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	80 83       	st	Z, r24
    3a84:	64 c0       	rjmp	.+200    	; 0x3b4e <main+0x18c4>
	else if (__tmp > 65535)
    3a86:	fe 01       	movw	r30, r28
    3a88:	ed 56       	subi	r30, 0x6D	; 109
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	60 81       	ld	r22, Z
    3a8e:	71 81       	ldd	r23, Z+1	; 0x01
    3a90:	82 81       	ldd	r24, Z+2	; 0x02
    3a92:	93 81       	ldd	r25, Z+3	; 0x03
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	3f ef       	ldi	r19, 0xFF	; 255
    3a98:	4f e7       	ldi	r20, 0x7F	; 127
    3a9a:	57 e4       	ldi	r21, 0x47	; 71
    3a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aa0:	18 16       	cp	r1, r24
    3aa2:	0c f0       	brlt	.+2      	; 0x3aa6 <main+0x181c>
    3aa4:	43 c0       	rjmp	.+134    	; 0x3b2c <main+0x18a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e9 56       	subi	r30, 0x69	; 105
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	51 e4       	ldi	r21, 0x41	; 65
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	8e 01       	movw	r16, r28
    3ac6:	0f 56       	subi	r16, 0x6F	; 111
    3ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	f8 01       	movw	r30, r16
    3ad8:	91 83       	std	Z+1, r25	; 0x01
    3ada:	80 83       	st	Z, r24
    3adc:	1f c0       	rjmp	.+62     	; 0x3b1c <main+0x1892>
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e1 57       	subi	r30, 0x71	; 113
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	88 ec       	ldi	r24, 0xC8	; 200
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
    3aec:	fe 01       	movw	r30, r28
    3aee:	e1 57       	subi	r30, 0x71	; 113
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <main+0x186c>
    3afa:	fe 01       	movw	r30, r28
    3afc:	e1 57       	subi	r30, 0x71	; 113
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	91 83       	std	Z+1, r25	; 0x01
    3b02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b04:	de 01       	movw	r26, r28
    3b06:	af 56       	subi	r26, 0x6F	; 111
    3b08:	bf 4f       	sbci	r27, 0xFF	; 255
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	ef 56       	subi	r30, 0x6F	; 111
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 81       	ld	r24, Z
    3b12:	91 81       	ldd	r25, Z+1	; 0x01
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	11 96       	adiw	r26, 0x01	; 1
    3b18:	9c 93       	st	X, r25
    3b1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	ef 56       	subi	r30, 0x6F	; 111
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	80 81       	ld	r24, Z
    3b24:	91 81       	ldd	r25, Z+1	; 0x01
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	d1 f6       	brne	.-76     	; 0x3ade <main+0x1854>
    3b2a:	27 c0       	rjmp	.+78     	; 0x3b7a <main+0x18f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2c:	8e 01       	movw	r16, r28
    3b2e:	0f 56       	subi	r16, 0x6F	; 111
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
    3b32:	fe 01       	movw	r30, r28
    3b34:	ed 56       	subi	r30, 0x6D	; 109
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	60 81       	ld	r22, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	82 81       	ldd	r24, Z+2	; 0x02
    3b3e:	93 81       	ldd	r25, Z+3	; 0x03
    3b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	f8 01       	movw	r30, r16
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	80 83       	st	Z, r24
    3b4e:	de 01       	movw	r26, r28
    3b50:	a3 57       	subi	r26, 0x73	; 115
    3b52:	bf 4f       	sbci	r27, 0xFF	; 255
    3b54:	fe 01       	movw	r30, r28
    3b56:	ef 56       	subi	r30, 0x6F	; 111
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	80 81       	ld	r24, Z
    3b5c:	91 81       	ldd	r25, Z+1	; 0x01
    3b5e:	8d 93       	st	X+, r24
    3b60:	9c 93       	st	X, r25
    3b62:	fe 01       	movw	r30, r28
    3b64:	e3 57       	subi	r30, 0x73	; 115
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 81       	ld	r24, Z
    3b6a:	91 81       	ldd	r25, Z+1	; 0x01
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	f1 f7       	brne	.-4      	; 0x3b6c <main+0x18e2>
    3b70:	fe 01       	movw	r30, r28
    3b72:	e3 57       	subi	r30, 0x73	; 115
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	91 83       	std	Z+1, r25	; 0x01
    3b78:	80 83       	st	Z, r24
					else if(ret==3)//if the user submit and the pass is valid
					{//start if ret==3
						UART_sendByte(step);//send our step to Control_MCU
						_delay_ms(50);//wait to send data

						for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    3b7a:	de 01       	movw	r26, r28
    3b7c:	ae 5a       	subi	r26, 0xAE	; 174
    3b7e:	be 4f       	sbci	r27, 0xFE	; 254
    3b80:	fe 01       	movw	r30, r28
    3b82:	ee 5a       	subi	r30, 0xAE	; 174
    3b84:	fe 4f       	sbci	r31, 0xFE	; 254
    3b86:	80 81       	ld	r24, Z
    3b88:	8f 5f       	subi	r24, 0xFF	; 255
    3b8a:	8c 93       	st	X, r24
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	ee 5a       	subi	r30, 0xAE	; 174
    3b90:	fe 4f       	sbci	r31, 0xFE	; 254
    3b92:	80 81       	ld	r24, Z
    3b94:	84 30       	cpi	r24, 0x04	; 4
    3b96:	08 f4       	brcc	.+2      	; 0x3b9a <main+0x1910>
    3b98:	31 cf       	rjmp	.-414    	; 0x39fc <main+0x1772>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e7 57       	subi	r30, 0x77	; 119
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	a0 ea       	ldi	r26, 0xA0	; 160
    3ba6:	b1 e4       	ldi	r27, 0x41	; 65
    3ba8:	80 83       	st	Z, r24
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	a2 83       	std	Z+2, r26	; 0x02
    3bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb0:	8e 01       	movw	r16, r28
    3bb2:	0b 57       	subi	r16, 0x7B	; 123
    3bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e7 57       	subi	r30, 0x77	; 119
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	60 81       	ld	r22, Z
    3bbe:	71 81       	ldd	r23, Z+1	; 0x01
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	f8 01       	movw	r30, r16
    3bd6:	80 83       	st	Z, r24
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	a2 83       	std	Z+2, r26	; 0x02
    3bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bde:	fe 01       	movw	r30, r28
    3be0:	eb 57       	subi	r30, 0x7B	; 123
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	44 f4       	brge	.+16     	; 0x3c0c <main+0x1982>
		__ticks = 1;
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	ed 57       	subi	r30, 0x7D	; 125
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	80 83       	st	Z, r24
    3c0a:	64 c0       	rjmp	.+200    	; 0x3cd4 <main+0x1a4a>
	else if (__tmp > 65535)
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	eb 57       	subi	r30, 0x7B	; 123
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	60 81       	ld	r22, Z
    3c14:	71 81       	ldd	r23, Z+1	; 0x01
    3c16:	82 81       	ldd	r24, Z+2	; 0x02
    3c18:	93 81       	ldd	r25, Z+3	; 0x03
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	4f e7       	ldi	r20, 0x7F	; 127
    3c20:	57 e4       	ldi	r21, 0x47	; 71
    3c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c26:	18 16       	cp	r1, r24
    3c28:	0c f0       	brlt	.+2      	; 0x3c2c <main+0x19a2>
    3c2a:	43 c0       	rjmp	.+134    	; 0x3cb2 <main+0x1a28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e7 57       	subi	r30, 0x77	; 119
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e2       	ldi	r20, 0x20	; 32
    3c40:	51 e4       	ldi	r21, 0x41	; 65
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8e 01       	movw	r16, r28
    3c4c:	0d 57       	subi	r16, 0x7D	; 125
    3c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	91 83       	std	Z+1, r25	; 0x01
    3c60:	80 83       	st	Z, r24
    3c62:	1f c0       	rjmp	.+62     	; 0x3ca2 <main+0x1a18>
    3c64:	fe 01       	movw	r30, r28
    3c66:	ef 57       	subi	r30, 0x7F	; 127
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	88 ec       	ldi	r24, 0xC8	; 200
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
    3c72:	fe 01       	movw	r30, r28
    3c74:	ef 57       	subi	r30, 0x7F	; 127
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 81       	ld	r24, Z
    3c7a:	91 81       	ldd	r25, Z+1	; 0x01
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <main+0x19f2>
    3c80:	fe 01       	movw	r30, r28
    3c82:	ef 57       	subi	r30, 0x7F	; 127
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8a:	de 01       	movw	r26, r28
    3c8c:	ad 57       	subi	r26, 0x7D	; 125
    3c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c90:	fe 01       	movw	r30, r28
    3c92:	ed 57       	subi	r30, 0x7D	; 125
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 81       	ld	r24, Z
    3c98:	91 81       	ldd	r25, Z+1	; 0x01
    3c9a:	01 97       	sbiw	r24, 0x01	; 1
    3c9c:	11 96       	adiw	r26, 0x01	; 1
    3c9e:	9c 93       	st	X, r25
    3ca0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	ed 57       	subi	r30, 0x7D	; 125
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	91 81       	ldd	r25, Z+1	; 0x01
    3cac:	00 97       	sbiw	r24, 0x00	; 0
    3cae:	d1 f6       	brne	.-76     	; 0x3c64 <main+0x19da>
    3cb0:	27 c0       	rjmp	.+78     	; 0x3d00 <main+0x1a76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb2:	8e 01       	movw	r16, r28
    3cb4:	0d 57       	subi	r16, 0x7D	; 125
    3cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb8:	fe 01       	movw	r30, r28
    3cba:	eb 57       	subi	r30, 0x7B	; 123
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	60 81       	ld	r22, Z
    3cc0:	71 81       	ldd	r23, Z+1	; 0x01
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	93 81       	ldd	r25, Z+3	; 0x03
    3cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	f8 01       	movw	r30, r16
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
    3cd4:	de 01       	movw	r26, r28
    3cd6:	a1 58       	subi	r26, 0x81	; 129
    3cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ed 57       	subi	r30, 0x7D	; 125
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	8d 93       	st	X+, r24
    3ce6:	9c 93       	st	X, r25
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e1 58       	subi	r30, 0x81	; 129
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <main+0x1a68>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e1 58       	subi	r30, 0x81	; 129
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
							UART_sendByte(arr_eeprom[i]);//send the password to control_MCU
							_delay_ms(20);//wait to send data
						}//end for arr_pass
						_delay_ms(20);//wait to send data

						ret2=UART_recieveByte();//take the result of comparison
    3d00:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_recieveByte>
    3d04:	fe 01       	movw	r30, r28
    3d06:	ef 5a       	subi	r30, 0xAF	; 175
    3d08:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0a:	80 83       	st	Z, r24
						//////////////////////

						if(ret2==1)//if the password match
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ef 5a       	subi	r30, 0xAF	; 175
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	80 81       	ld	r24, Z
    3d14:	81 30       	cpi	r24, 0x01	; 1
    3d16:	09 f0       	breq	.+2      	; 0x3d1a <main+0x1a90>
    3d18:	c3 c0       	rjmp	.+390    	; 0x3ea0 <main+0x1c16>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e5 58       	subi	r30, 0x85	; 133
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	a0 ea       	ldi	r26, 0xA0	; 160
    3d26:	b1 e4       	ldi	r27, 0x41	; 65
    3d28:	80 83       	st	Z, r24
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	a2 83       	std	Z+2, r26	; 0x02
    3d2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d30:	8e 01       	movw	r16, r28
    3d32:	09 58       	subi	r16, 0x89	; 137
    3d34:	1f 4f       	sbci	r17, 0xFF	; 255
    3d36:	fe 01       	movw	r30, r28
    3d38:	e5 58       	subi	r30, 0x85	; 133
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	4a ef       	ldi	r20, 0xFA	; 250
    3d4a:	54 e4       	ldi	r21, 0x44	; 68
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	f8 01       	movw	r30, r16
    3d56:	80 83       	st	Z, r24
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	a2 83       	std	Z+2, r26	; 0x02
    3d5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e9 58       	subi	r30, 0x89	; 137
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	44 f4       	brge	.+16     	; 0x3d8c <main+0x1b02>
		__ticks = 1;
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	eb 58       	subi	r30, 0x8B	; 139
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	64 c0       	rjmp	.+200    	; 0x3e54 <main+0x1bca>
	else if (__tmp > 65535)
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e9 58       	subi	r30, 0x89	; 137
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	60 81       	ld	r22, Z
    3d94:	71 81       	ldd	r23, Z+1	; 0x01
    3d96:	82 81       	ldd	r24, Z+2	; 0x02
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	3f ef       	ldi	r19, 0xFF	; 255
    3d9e:	4f e7       	ldi	r20, 0x7F	; 127
    3da0:	57 e4       	ldi	r21, 0x47	; 71
    3da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3da6:	18 16       	cp	r1, r24
    3da8:	0c f0       	brlt	.+2      	; 0x3dac <main+0x1b22>
    3daa:	43 c0       	rjmp	.+134    	; 0x3e32 <main+0x1ba8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dac:	fe 01       	movw	r30, r28
    3dae:	e5 58       	subi	r30, 0x85	; 133
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	60 81       	ld	r22, Z
    3db4:	71 81       	ldd	r23, Z+1	; 0x01
    3db6:	82 81       	ldd	r24, Z+2	; 0x02
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	40 e2       	ldi	r20, 0x20	; 32
    3dc0:	51 e4       	ldi	r21, 0x41	; 65
    3dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	8e 01       	movw	r16, r28
    3dcc:	0b 58       	subi	r16, 0x8B	; 139
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	cd 01       	movw	r24, r26
    3dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	f8 01       	movw	r30, r16
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	80 83       	st	Z, r24
    3de2:	1f c0       	rjmp	.+62     	; 0x3e22 <main+0x1b98>
    3de4:	fe 01       	movw	r30, r28
    3de6:	ed 58       	subi	r30, 0x8D	; 141
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	88 ec       	ldi	r24, 0xC8	; 200
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	fe 01       	movw	r30, r28
    3df4:	ed 58       	subi	r30, 0x8D	; 141
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <main+0x1b72>
    3e00:	fe 01       	movw	r30, r28
    3e02:	ed 58       	subi	r30, 0x8D	; 141
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	de 01       	movw	r26, r28
    3e0c:	ab 58       	subi	r26, 0x8B	; 139
    3e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e10:	fe 01       	movw	r30, r28
    3e12:	eb 58       	subi	r30, 0x8B	; 139
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	11 96       	adiw	r26, 0x01	; 1
    3e1e:	9c 93       	st	X, r25
    3e20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e22:	fe 01       	movw	r30, r28
    3e24:	eb 58       	subi	r30, 0x8B	; 139
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	d1 f6       	brne	.-76     	; 0x3de4 <main+0x1b5a>
    3e30:	27 c0       	rjmp	.+78     	; 0x3e80 <main+0x1bf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e32:	8e 01       	movw	r16, r28
    3e34:	0b 58       	subi	r16, 0x8B	; 139
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e9 58       	subi	r30, 0x89	; 137
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	f8 01       	movw	r30, r16
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	80 83       	st	Z, r24
    3e54:	de 01       	movw	r26, r28
    3e56:	af 58       	subi	r26, 0x8F	; 143
    3e58:	bf 4f       	sbci	r27, 0xFF	; 255
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	eb 58       	subi	r30, 0x8B	; 139
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	8d 93       	st	X+, r24
    3e66:	9c 93       	st	X, r25
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ef 58       	subi	r30, 0x8F	; 143
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	80 81       	ld	r24, Z
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	f1 f7       	brne	.-4      	; 0x3e72 <main+0x1be8>
    3e76:	fe 01       	movw	r30, r28
    3e78:	ef 58       	subi	r30, 0x8F	; 143
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	91 83       	std	Z+1, r25	; 0x01
    3e7e:	80 83       	st	Z, r24
						{//start if the password match
							_delay_ms(20);//wait to send data
							UART_sendByte(4);
    3e80:	84 e0       	ldi	r24, 0x04	; 4
    3e82:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
							step =4;//go to step 4 to open the motor
    3e86:	84 e0       	ldi	r24, 0x04	; 4
    3e88:	80 93 0e 01 	sts	0x010E, r24
							flag=0;//enable displaying to display Door Unlocking
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e9 5a       	subi	r30, 0xA9	; 169
    3e90:	fe 4f       	sbci	r31, 0xFE	; 254
    3e92:	10 82       	st	Z, r1
							flag2=0;
    3e94:	fe 01       	movw	r30, r28
    3e96:	ea 5a       	subi	r30, 0xAA	; 170
    3e98:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9a:	10 82       	st	Z, r1
    3e9c:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
						//////////////////////

						else//if the password not match
						{//start if password not match

							if(counter<2)
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e8 5a       	subi	r30, 0xA8	; 168
    3ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea6:	80 81       	ld	r24, Z
    3ea8:	82 30       	cpi	r24, 0x02	; 2
    3eaa:	a8 f4       	brcc	.+42     	; 0x3ed6 <main+0x1c4c>
							{
								UART_sendByte(3);//sent 3 to the control_MCU
    3eac:	83 e0       	ldi	r24, 0x03	; 3
    3eae:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
								step=3;//stay in step 3
    3eb2:	83 e0       	ldi	r24, 0x03	; 3
    3eb4:	80 93 0e 01 	sts	0x010E, r24
								flag2=0;//dispaly "plz enter pass:"
    3eb8:	fe 01       	movw	r30, r28
    3eba:	ea 5a       	subi	r30, 0xAA	; 170
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	10 82       	st	Z, r1
								counter++;//count the number of consecutive incorrect password
    3ec0:	de 01       	movw	r26, r28
    3ec2:	a8 5a       	subi	r26, 0xA8	; 168
    3ec4:	be 4f       	sbci	r27, 0xFE	; 254
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e8 5a       	subi	r30, 0xA8	; 168
    3eca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ecc:	80 81       	ld	r24, Z
    3ece:	8f 5f       	subi	r24, 0xFF	; 255
    3ed0:	8c 93       	st	X, r24
    3ed2:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
							}

							else if(counter==2)//if the counter =3
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e8 5a       	subi	r30, 0xA8	; 168
    3eda:	fe 4f       	sbci	r31, 0xFE	; 254
    3edc:	80 81       	ld	r24, Z
    3ede:	82 30       	cpi	r24, 0x02	; 2
    3ee0:	11 f0       	breq	.+4      	; 0x3ee6 <main+0x1c5c>
    3ee2:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
							{//start if counter ==3
								UART_sendByte(0);//sent 0 to the control_MCU to to turn on buzzer
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    3eec:	fe 01       	movw	r30, r28
    3eee:	e3 59       	subi	r30, 0x93	; 147
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	a0 ea       	ldi	r26, 0xA0	; 160
    3ef8:	b1 e4       	ldi	r27, 0x41	; 65
    3efa:	80 83       	st	Z, r24
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	a2 83       	std	Z+2, r26	; 0x02
    3f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f02:	8e 01       	movw	r16, r28
    3f04:	07 59       	subi	r16, 0x97	; 151
    3f06:	1f 4f       	sbci	r17, 0xFF	; 255
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e3 59       	subi	r30, 0x93	; 147
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	4a ef       	ldi	r20, 0xFA	; 250
    3f1c:	54 e4       	ldi	r21, 0x44	; 68
    3f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	f8 01       	movw	r30, r16
    3f28:	80 83       	st	Z, r24
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	a2 83       	std	Z+2, r26	; 0x02
    3f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f30:	fe 01       	movw	r30, r28
    3f32:	e7 59       	subi	r30, 0x97	; 151
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	60 81       	ld	r22, Z
    3f38:	71 81       	ldd	r23, Z+1	; 0x01
    3f3a:	82 81       	ldd	r24, Z+2	; 0x02
    3f3c:	93 81       	ldd	r25, Z+3	; 0x03
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e8       	ldi	r20, 0x80	; 128
    3f44:	5f e3       	ldi	r21, 0x3F	; 63
    3f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f4a:	88 23       	and	r24, r24
    3f4c:	44 f4       	brge	.+16     	; 0x3f5e <main+0x1cd4>
		__ticks = 1;
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e9 59       	subi	r30, 0x99	; 153
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	91 83       	std	Z+1, r25	; 0x01
    3f5a:	80 83       	st	Z, r24
    3f5c:	64 c0       	rjmp	.+200    	; 0x4026 <main+0x1d9c>
	else if (__tmp > 65535)
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e7 59       	subi	r30, 0x97	; 151
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	60 81       	ld	r22, Z
    3f66:	71 81       	ldd	r23, Z+1	; 0x01
    3f68:	82 81       	ldd	r24, Z+2	; 0x02
    3f6a:	93 81       	ldd	r25, Z+3	; 0x03
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	3f ef       	ldi	r19, 0xFF	; 255
    3f70:	4f e7       	ldi	r20, 0x7F	; 127
    3f72:	57 e4       	ldi	r21, 0x47	; 71
    3f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f78:	18 16       	cp	r1, r24
    3f7a:	0c f0       	brlt	.+2      	; 0x3f7e <main+0x1cf4>
    3f7c:	43 c0       	rjmp	.+134    	; 0x4004 <main+0x1d7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e3 59       	subi	r30, 0x93	; 147
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e2       	ldi	r20, 0x20	; 32
    3f92:	51 e4       	ldi	r21, 0x41	; 65
    3f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	8e 01       	movw	r16, r28
    3f9e:	09 59       	subi	r16, 0x99	; 153
    3fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa2:	bc 01       	movw	r22, r24
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	f8 01       	movw	r30, r16
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
    3fb4:	1f c0       	rjmp	.+62     	; 0x3ff4 <main+0x1d6a>
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	eb 59       	subi	r30, 0x9B	; 155
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	88 ec       	ldi	r24, 0xC8	; 200
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	91 83       	std	Z+1, r25	; 0x01
    3fc2:	80 83       	st	Z, r24
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	eb 59       	subi	r30, 0x9B	; 155
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <main+0x1d44>
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	eb 59       	subi	r30, 0x9B	; 155
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fdc:	de 01       	movw	r26, r28
    3fde:	a9 59       	subi	r26, 0x99	; 153
    3fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e9 59       	subi	r30, 0x99	; 153
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	80 81       	ld	r24, Z
    3fea:	91 81       	ldd	r25, Z+1	; 0x01
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	11 96       	adiw	r26, 0x01	; 1
    3ff0:	9c 93       	st	X, r25
    3ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e9 59       	subi	r30, 0x99	; 153
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 81       	ld	r24, Z
    3ffc:	91 81       	ldd	r25, Z+1	; 0x01
    3ffe:	00 97       	sbiw	r24, 0x00	; 0
    4000:	d1 f6       	brne	.-76     	; 0x3fb6 <main+0x1d2c>
    4002:	27 c0       	rjmp	.+78     	; 0x4052 <main+0x1dc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4004:	8e 01       	movw	r16, r28
    4006:	09 59       	subi	r16, 0x99	; 153
    4008:	1f 4f       	sbci	r17, 0xFF	; 255
    400a:	fe 01       	movw	r30, r28
    400c:	e7 59       	subi	r30, 0x97	; 151
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	60 81       	ld	r22, Z
    4012:	71 81       	ldd	r23, Z+1	; 0x01
    4014:	82 81       	ldd	r24, Z+2	; 0x02
    4016:	93 81       	ldd	r25, Z+3	; 0x03
    4018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	f8 01       	movw	r30, r16
    4022:	91 83       	std	Z+1, r25	; 0x01
    4024:	80 83       	st	Z, r24
    4026:	de 01       	movw	r26, r28
    4028:	ad 59       	subi	r26, 0x9D	; 157
    402a:	bf 4f       	sbci	r27, 0xFF	; 255
    402c:	fe 01       	movw	r30, r28
    402e:	e9 59       	subi	r30, 0x99	; 153
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	80 81       	ld	r24, Z
    4034:	91 81       	ldd	r25, Z+1	; 0x01
    4036:	8d 93       	st	X+, r24
    4038:	9c 93       	st	X, r25
    403a:	fe 01       	movw	r30, r28
    403c:	ed 59       	subi	r30, 0x9D	; 157
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <main+0x1dba>
    4048:	fe 01       	movw	r30, r28
    404a:	ed 59       	subi	r30, 0x9D	; 157
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	91 83       	std	Z+1, r25	; 0x01
    4050:	80 83       	st	Z, r24
								_delay_ms(20);
								Time1_SetCallBack(timer_function);//set the callback to the timer_function
    4052:	85 e3       	ldi	r24, 0x35	; 53
    4054:	90 e1       	ldi	r25, 0x10	; 16
    4056:	0e 94 87 09 	call	0x130e	; 0x130e <Time1_SetCallBack>
								Timer1_Init(&timer);//start the timer
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	91 e0       	ldi	r25, 0x01	; 1
    405e:	0e 94 1f 09 	call	0x123e	; 0x123e <Timer1_Init>
								LCD_clearScreen();//clear the screen
    4062:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
								LCD_displayStringRowColumn(0,3,"ERROR...");//display Error message
    4066:	20 e6       	ldi	r18, 0x60	; 96
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	63 e0       	ldi	r22, 0x03	; 3
    406e:	a9 01       	movw	r20, r18
    4070:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
								step=0;//stay and display the main window
    4074:	10 92 0e 01 	sts	0x010E, r1
								flag=0;//to enable displaying
    4078:	fe 01       	movw	r30, r28
    407a:	e9 5a       	subi	r30, 0xA9	; 169
    407c:	fe 4f       	sbci	r31, 0xFE	; 254
    407e:	10 82       	st	Z, r1
								flag2=0;//to enable displaying
    4080:	fe 01       	movw	r30, r28
    4082:	ea 5a       	subi	r30, 0xAA	; 170
    4084:	fe 4f       	sbci	r31, 0xFE	; 254
    4086:	10 82       	st	Z, r1
								counter=0;//reset the counter
    4088:	fe 01       	movw	r30, r28
    408a:	e8 5a       	subi	r30, 0xA8	; 168
    408c:	fe 4f       	sbci	r31, 0xFE	; 254
    408e:	10 82       	st	Z, r1
    4090:	fe 01       	movw	r30, r28
    4092:	e1 5a       	subi	r30, 0xA1	; 161
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	aa ef       	ldi	r26, 0xFA	; 250
    409c:	b4 e4       	ldi	r27, 0x44	; 68
    409e:	80 83       	st	Z, r24
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	a2 83       	std	Z+2, r26	; 0x02
    40a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a6:	8e 01       	movw	r16, r28
    40a8:	05 5a       	subi	r16, 0xA5	; 165
    40aa:	1f 4f       	sbci	r17, 0xFF	; 255
    40ac:	fe 01       	movw	r30, r28
    40ae:	e1 5a       	subi	r30, 0xA1	; 161
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	4a ef       	ldi	r20, 0xFA	; 250
    40c0:	54 e4       	ldi	r21, 0x44	; 68
    40c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	f8 01       	movw	r30, r16
    40cc:	80 83       	st	Z, r24
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	a2 83       	std	Z+2, r26	; 0x02
    40d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d4:	fe 01       	movw	r30, r28
    40d6:	e5 5a       	subi	r30, 0xA5	; 165
    40d8:	ff 4f       	sbci	r31, 0xFF	; 255
    40da:	60 81       	ld	r22, Z
    40dc:	71 81       	ldd	r23, Z+1	; 0x01
    40de:	82 81       	ldd	r24, Z+2	; 0x02
    40e0:	93 81       	ldd	r25, Z+3	; 0x03
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e8       	ldi	r20, 0x80	; 128
    40e8:	5f e3       	ldi	r21, 0x3F	; 63
    40ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40ee:	88 23       	and	r24, r24
    40f0:	44 f4       	brge	.+16     	; 0x4102 <main+0x1e78>
		__ticks = 1;
    40f2:	fe 01       	movw	r30, r28
    40f4:	e7 5a       	subi	r30, 0xA7	; 167
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	91 83       	std	Z+1, r25	; 0x01
    40fe:	80 83       	st	Z, r24
    4100:	65 c0       	rjmp	.+202    	; 0x41cc <main+0x1f42>
	else if (__tmp > 65535)
    4102:	fe 01       	movw	r30, r28
    4104:	e5 5a       	subi	r30, 0xA5	; 165
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	60 81       	ld	r22, Z
    410a:	71 81       	ldd	r23, Z+1	; 0x01
    410c:	82 81       	ldd	r24, Z+2	; 0x02
    410e:	93 81       	ldd	r25, Z+3	; 0x03
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	3f ef       	ldi	r19, 0xFF	; 255
    4114:	4f e7       	ldi	r20, 0x7F	; 127
    4116:	57 e4       	ldi	r21, 0x47	; 71
    4118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    411c:	18 16       	cp	r1, r24
    411e:	0c f0       	brlt	.+2      	; 0x4122 <main+0x1e98>
    4120:	44 c0       	rjmp	.+136    	; 0x41aa <main+0x1f20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4122:	fe 01       	movw	r30, r28
    4124:	e1 5a       	subi	r30, 0xA1	; 161
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	60 81       	ld	r22, Z
    412a:	71 81       	ldd	r23, Z+1	; 0x01
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e2       	ldi	r20, 0x20	; 32
    4136:	51 e4       	ldi	r21, 0x41	; 65
    4138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	8e 01       	movw	r16, r28
    4142:	07 5a       	subi	r16, 0xA7	; 167
    4144:	1f 4f       	sbci	r17, 0xFF	; 255
    4146:	bc 01       	movw	r22, r24
    4148:	cd 01       	movw	r24, r26
    414a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	f8 01       	movw	r30, r16
    4154:	91 83       	std	Z+1, r25	; 0x01
    4156:	80 83       	st	Z, r24
    4158:	1f c0       	rjmp	.+62     	; 0x4198 <main+0x1f0e>
    415a:	fe 01       	movw	r30, r28
    415c:	e9 5a       	subi	r30, 0xA9	; 169
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	88 ec       	ldi	r24, 0xC8	; 200
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	91 83       	std	Z+1, r25	; 0x01
    4166:	80 83       	st	Z, r24
    4168:	fe 01       	movw	r30, r28
    416a:	e9 5a       	subi	r30, 0xA9	; 169
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	80 81       	ld	r24, Z
    4170:	91 81       	ldd	r25, Z+1	; 0x01
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <main+0x1ee8>
    4176:	fe 01       	movw	r30, r28
    4178:	e9 5a       	subi	r30, 0xA9	; 169
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	91 83       	std	Z+1, r25	; 0x01
    417e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4180:	de 01       	movw	r26, r28
    4182:	a7 5a       	subi	r26, 0xA7	; 167
    4184:	bf 4f       	sbci	r27, 0xFF	; 255
    4186:	fe 01       	movw	r30, r28
    4188:	e7 5a       	subi	r30, 0xA7	; 167
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	80 81       	ld	r24, Z
    418e:	91 81       	ldd	r25, Z+1	; 0x01
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	11 96       	adiw	r26, 0x01	; 1
    4194:	9c 93       	st	X, r25
    4196:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4198:	fe 01       	movw	r30, r28
    419a:	e7 5a       	subi	r30, 0xA7	; 167
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	91 81       	ldd	r25, Z+1	; 0x01
    41a2:	00 97       	sbiw	r24, 0x00	; 0
    41a4:	d1 f6       	brne	.-76     	; 0x415a <main+0x1ed0>
    41a6:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41aa:	8e 01       	movw	r16, r28
    41ac:	07 5a       	subi	r16, 0xA7	; 167
    41ae:	1f 4f       	sbci	r17, 0xFF	; 255
    41b0:	fe 01       	movw	r30, r28
    41b2:	e5 5a       	subi	r30, 0xA5	; 165
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	60 81       	ld	r22, Z
    41b8:	71 81       	ldd	r23, Z+1	; 0x01
    41ba:	82 81       	ldd	r24, Z+2	; 0x02
    41bc:	93 81       	ldd	r25, Z+3	; 0x03
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	f8 01       	movw	r30, r16
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
    41cc:	de 01       	movw	r26, r28
    41ce:	ab 5a       	subi	r26, 0xAB	; 171
    41d0:	bf 4f       	sbci	r27, 0xFF	; 255
    41d2:	fe 01       	movw	r30, r28
    41d4:	e7 5a       	subi	r30, 0xA7	; 167
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	11 96       	adiw	r26, 0x01	; 1
    41de:	9c 93       	st	X, r25
    41e0:	8e 93       	st	-X, r24
    41e2:	fe 01       	movw	r30, r28
    41e4:	eb 5a       	subi	r30, 0xAB	; 171
    41e6:	ff 4f       	sbci	r31, 0xFF	; 255
    41e8:	80 81       	ld	r24, Z
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	f1 f7       	brne	.-4      	; 0x41ec <main+0x1f62>
    41f0:	fe 01       	movw	r30, r28
    41f2:	eb 5a       	subi	r30, 0xAB	; 171
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
    41fa:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>

				case '-'://case - change password

					/////////////////////////////////////////////////
					////////////////////////////////////////////////
					if(flag2==0)//display the message once
    41fe:	fe 01       	movw	r30, r28
    4200:	ea 5a       	subi	r30, 0xAA	; 170
    4202:	fe 4f       	sbci	r31, 0xFE	; 254
    4204:	80 81       	ld	r24, Z
    4206:	88 23       	and	r24, r24
    4208:	91 f4       	brne	.+36     	; 0x422e <main+0x1fa4>
					{//start if flag
						LCD_clearScreen();//clear the screen
    420a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Plz enter Pass:");//display first message on screen
    420e:	29 e6       	ldi	r18, 0x69	; 105
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	a9 01       	movw	r20, r18
    4218:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
						LCD_moveCursor(1,0);//move the cursor to the second row
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	60 e0       	ldi	r22, 0x00	; 0
    4220:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
						flag2=1;//do not get here again
    4224:	fe 01       	movw	r30, r28
    4226:	ea 5a       	subi	r30, 0xAA	; 170
    4228:	fe 4f       	sbci	r31, 0xFE	; 254
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	80 83       	st	Z, r24
					}//end if flag

					////////////////////////

					key=KEYPAD_getPressedKey();//get numbers from user
    422e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
    4232:	fe 01       	movw	r30, r28
    4234:	eb 5a       	subi	r30, 0xAB	; 171
    4236:	fe 4f       	sbci	r31, 0xFE	; 254
    4238:	80 83       	st	Z, r24
    423a:	fe 01       	movw	r30, r28
    423c:	ef 5a       	subi	r30, 0xAF	; 175
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	a8 e4       	ldi	r26, 0x48	; 72
    4246:	b3 e4       	ldi	r27, 0x43	; 67
    4248:	80 83       	st	Z, r24
    424a:	91 83       	std	Z+1, r25	; 0x01
    424c:	a2 83       	std	Z+2, r26	; 0x02
    424e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4250:	8e 01       	movw	r16, r28
    4252:	03 5b       	subi	r16, 0xB3	; 179
    4254:	1f 4f       	sbci	r17, 0xFF	; 255
    4256:	fe 01       	movw	r30, r28
    4258:	ef 5a       	subi	r30, 0xAF	; 175
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	60 81       	ld	r22, Z
    425e:	71 81       	ldd	r23, Z+1	; 0x01
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	93 81       	ldd	r25, Z+3	; 0x03
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	4a ef       	ldi	r20, 0xFA	; 250
    426a:	54 e4       	ldi	r21, 0x44	; 68
    426c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	f8 01       	movw	r30, r16
    4276:	80 83       	st	Z, r24
    4278:	91 83       	std	Z+1, r25	; 0x01
    427a:	a2 83       	std	Z+2, r26	; 0x02
    427c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    427e:	fe 01       	movw	r30, r28
    4280:	e3 5b       	subi	r30, 0xB3	; 179
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	60 81       	ld	r22, Z
    4286:	71 81       	ldd	r23, Z+1	; 0x01
    4288:	82 81       	ldd	r24, Z+2	; 0x02
    428a:	93 81       	ldd	r25, Z+3	; 0x03
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e8       	ldi	r20, 0x80	; 128
    4292:	5f e3       	ldi	r21, 0x3F	; 63
    4294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4298:	88 23       	and	r24, r24
    429a:	44 f4       	brge	.+16     	; 0x42ac <main+0x2022>
		__ticks = 1;
    429c:	fe 01       	movw	r30, r28
    429e:	e5 5b       	subi	r30, 0xB5	; 181
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	80 83       	st	Z, r24
    42aa:	64 c0       	rjmp	.+200    	; 0x4374 <main+0x20ea>
	else if (__tmp > 65535)
    42ac:	fe 01       	movw	r30, r28
    42ae:	e3 5b       	subi	r30, 0xB3	; 179
    42b0:	ff 4f       	sbci	r31, 0xFF	; 255
    42b2:	60 81       	ld	r22, Z
    42b4:	71 81       	ldd	r23, Z+1	; 0x01
    42b6:	82 81       	ldd	r24, Z+2	; 0x02
    42b8:	93 81       	ldd	r25, Z+3	; 0x03
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	3f ef       	ldi	r19, 0xFF	; 255
    42be:	4f e7       	ldi	r20, 0x7F	; 127
    42c0:	57 e4       	ldi	r21, 0x47	; 71
    42c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42c6:	18 16       	cp	r1, r24
    42c8:	0c f0       	brlt	.+2      	; 0x42cc <main+0x2042>
    42ca:	43 c0       	rjmp	.+134    	; 0x4352 <main+0x20c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42cc:	fe 01       	movw	r30, r28
    42ce:	ef 5a       	subi	r30, 0xAF	; 175
    42d0:	ff 4f       	sbci	r31, 0xFF	; 255
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e2       	ldi	r20, 0x20	; 32
    42e0:	51 e4       	ldi	r21, 0x41	; 65
    42e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	8e 01       	movw	r16, r28
    42ec:	05 5b       	subi	r16, 0xB5	; 181
    42ee:	1f 4f       	sbci	r17, 0xFF	; 255
    42f0:	bc 01       	movw	r22, r24
    42f2:	cd 01       	movw	r24, r26
    42f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	f8 01       	movw	r30, r16
    42fe:	91 83       	std	Z+1, r25	; 0x01
    4300:	80 83       	st	Z, r24
    4302:	1f c0       	rjmp	.+62     	; 0x4342 <main+0x20b8>
    4304:	fe 01       	movw	r30, r28
    4306:	e7 5b       	subi	r30, 0xB7	; 183
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	88 ec       	ldi	r24, 0xC8	; 200
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	80 83       	st	Z, r24
    4312:	fe 01       	movw	r30, r28
    4314:	e7 5b       	subi	r30, 0xB7	; 183
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	80 81       	ld	r24, Z
    431a:	91 81       	ldd	r25, Z+1	; 0x01
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <main+0x2092>
    4320:	fe 01       	movw	r30, r28
    4322:	e7 5b       	subi	r30, 0xB7	; 183
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	91 83       	std	Z+1, r25	; 0x01
    4328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    432a:	de 01       	movw	r26, r28
    432c:	a5 5b       	subi	r26, 0xB5	; 181
    432e:	bf 4f       	sbci	r27, 0xFF	; 255
    4330:	fe 01       	movw	r30, r28
    4332:	e5 5b       	subi	r30, 0xB5	; 181
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	80 81       	ld	r24, Z
    4338:	91 81       	ldd	r25, Z+1	; 0x01
    433a:	01 97       	sbiw	r24, 0x01	; 1
    433c:	11 96       	adiw	r26, 0x01	; 1
    433e:	9c 93       	st	X, r25
    4340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4342:	fe 01       	movw	r30, r28
    4344:	e5 5b       	subi	r30, 0xB5	; 181
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	80 81       	ld	r24, Z
    434a:	91 81       	ldd	r25, Z+1	; 0x01
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	d1 f6       	brne	.-76     	; 0x4304 <main+0x207a>
    4350:	27 c0       	rjmp	.+78     	; 0x43a0 <main+0x2116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4352:	8e 01       	movw	r16, r28
    4354:	05 5b       	subi	r16, 0xB5	; 181
    4356:	1f 4f       	sbci	r17, 0xFF	; 255
    4358:	fe 01       	movw	r30, r28
    435a:	e3 5b       	subi	r30, 0xB3	; 179
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	60 81       	ld	r22, Z
    4360:	71 81       	ldd	r23, Z+1	; 0x01
    4362:	82 81       	ldd	r24, Z+2	; 0x02
    4364:	93 81       	ldd	r25, Z+3	; 0x03
    4366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	f8 01       	movw	r30, r16
    4370:	91 83       	std	Z+1, r25	; 0x01
    4372:	80 83       	st	Z, r24
    4374:	de 01       	movw	r26, r28
    4376:	a9 5b       	subi	r26, 0xB9	; 185
    4378:	bf 4f       	sbci	r27, 0xFF	; 255
    437a:	fe 01       	movw	r30, r28
    437c:	e5 5b       	subi	r30, 0xB5	; 181
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	80 81       	ld	r24, Z
    4382:	91 81       	ldd	r25, Z+1	; 0x01
    4384:	8d 93       	st	X+, r24
    4386:	9c 93       	st	X, r25
    4388:	fe 01       	movw	r30, r28
    438a:	e9 5b       	subi	r30, 0xB9	; 185
    438c:	ff 4f       	sbci	r31, 0xFF	; 255
    438e:	80 81       	ld	r24, Z
    4390:	91 81       	ldd	r25, Z+1	; 0x01
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	f1 f7       	brne	.-4      	; 0x4392 <main+0x2108>
    4396:	fe 01       	movw	r30, r28
    4398:	e9 5b       	subi	r30, 0xB9	; 185
    439a:	ff 4f       	sbci	r31, 0xFF	; 255
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	80 83       	st	Z, r24
					_delay_ms(200);

					ret=First_Pass(key);//check the return
    43a0:	fe 01       	movw	r30, r28
    43a2:	eb 5a       	subi	r30, 0xAB	; 171
    43a4:	fe 4f       	sbci	r31, 0xFE	; 254
    43a6:	80 81       	ld	r24, Z
    43a8:	0e 94 32 25 	call	0x4a64	; 0x4a64 <First_Pass>
    43ac:	fe 01       	movw	r30, r28
    43ae:	ed 5a       	subi	r30, 0xAD	; 173
    43b0:	fe 4f       	sbci	r31, 0xFE	; 254
    43b2:	80 83       	st	Z, r24
					/////////////ret1

					if(ret==1)//if the key between 0 and 9 and array still not full
    43b4:	fe 01       	movw	r30, r28
    43b6:	ed 5a       	subi	r30, 0xAD	; 173
    43b8:	fe 4f       	sbci	r31, 0xFE	; 254
    43ba:	80 81       	ld	r24, Z
    43bc:	81 30       	cpi	r24, 0x01	; 1
    43be:	31 f4       	brne	.+12     	; 0x43cc <main+0x2142>
					{//start if ret =1
						LCD_sendString("*");//display '*'
    43c0:	89 e7       	ldi	r24, 0x79	; 121
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendString>
    43c8:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}//end if ret =1

					//////////////////ret 2

					else if(ret==2)//if the user submit but and array still not full
    43cc:	fe 01       	movw	r30, r28
    43ce:	ed 5a       	subi	r30, 0xAD	; 173
    43d0:	fe 4f       	sbci	r31, 0xFE	; 254
    43d2:	80 81       	ld	r24, Z
    43d4:	82 30       	cpi	r24, 0x02	; 2
    43d6:	09 f0       	breq	.+2      	; 0x43da <main+0x2150>
    43d8:	a0 c0       	rjmp	.+320    	; 0x451a <main+0x2290>
					{//start if ret= 2
						LCD_displayStringRowColumn(1,0,"               ");//clear row two
    43da:	2b e7       	ldi	r18, 0x7B	; 123
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	a9 01       	movw	r20, r18
    43e4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"Error pass");//display Error message
    43e8:	2b e8       	ldi	r18, 0x8B	; 139
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	a9 01       	movw	r20, r18
    43f2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    43f6:	fe 01       	movw	r30, r28
    43f8:	ed 5b       	subi	r30, 0xBD	; 189
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	a6 e1       	ldi	r26, 0x16	; 22
    4402:	b3 e4       	ldi	r27, 0x43	; 67
    4404:	80 83       	st	Z, r24
    4406:	91 83       	std	Z+1, r25	; 0x01
    4408:	a2 83       	std	Z+2, r26	; 0x02
    440a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    440c:	8e 01       	movw	r16, r28
    440e:	01 5c       	subi	r16, 0xC1	; 193
    4410:	1f 4f       	sbci	r17, 0xFF	; 255
    4412:	fe 01       	movw	r30, r28
    4414:	ed 5b       	subi	r30, 0xBD	; 189
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	60 81       	ld	r22, Z
    441a:	71 81       	ldd	r23, Z+1	; 0x01
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	93 81       	ldd	r25, Z+3	; 0x03
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	4a ef       	ldi	r20, 0xFA	; 250
    4426:	54 e4       	ldi	r21, 0x44	; 68
    4428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	f8 01       	movw	r30, r16
    4432:	80 83       	st	Z, r24
    4434:	91 83       	std	Z+1, r25	; 0x01
    4436:	a2 83       	std	Z+2, r26	; 0x02
    4438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    443a:	fe 01       	movw	r30, r28
    443c:	ff 96       	adiw	r30, 0x3f	; 63
    443e:	60 81       	ld	r22, Z
    4440:	71 81       	ldd	r23, Z+1	; 0x01
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	93 81       	ldd	r25, Z+3	; 0x03
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e8       	ldi	r20, 0x80	; 128
    444c:	5f e3       	ldi	r21, 0x3F	; 63
    444e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4452:	88 23       	and	r24, r24
    4454:	2c f4       	brge	.+10     	; 0x4460 <main+0x21d6>
		__ticks = 1;
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	9e af       	std	Y+62, r25	; 0x3e
    445c:	8d af       	std	Y+61, r24	; 0x3d
    445e:	46 c0       	rjmp	.+140    	; 0x44ec <main+0x2262>
	else if (__tmp > 65535)
    4460:	fe 01       	movw	r30, r28
    4462:	ff 96       	adiw	r30, 0x3f	; 63
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	93 81       	ldd	r25, Z+3	; 0x03
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	3f ef       	ldi	r19, 0xFF	; 255
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	57 e4       	ldi	r21, 0x47	; 71
    4474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	64 f5       	brge	.+88     	; 0x44d4 <main+0x224a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	fe 01       	movw	r30, r28
    447e:	ed 5b       	subi	r30, 0xBD	; 189
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	60 81       	ld	r22, Z
    4484:	71 81       	ldd	r23, Z+1	; 0x01
    4486:	82 81       	ldd	r24, Z+2	; 0x02
    4488:	93 81       	ldd	r25, Z+3	; 0x03
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e2       	ldi	r20, 0x20	; 32
    4490:	51 e4       	ldi	r21, 0x41	; 65
    4492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	bc 01       	movw	r22, r24
    449c:	cd 01       	movw	r24, r26
    449e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	9e af       	std	Y+62, r25	; 0x3e
    44a8:	8d af       	std	Y+61, r24	; 0x3d
    44aa:	0f c0       	rjmp	.+30     	; 0x44ca <main+0x2240>
    44ac:	88 ec       	ldi	r24, 0xC8	; 200
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	9c af       	std	Y+60, r25	; 0x3c
    44b2:	8b af       	std	Y+59, r24	; 0x3b
    44b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    44b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <main+0x222e>
    44bc:	9c af       	std	Y+60, r25	; 0x3c
    44be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    44c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	9e af       	std	Y+62, r25	; 0x3e
    44c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    44cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	69 f7       	brne	.-38     	; 0x44ac <main+0x2222>
    44d2:	16 c0       	rjmp	.+44     	; 0x4500 <main+0x2276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d4:	fe 01       	movw	r30, r28
    44d6:	ff 96       	adiw	r30, 0x3f	; 63
    44d8:	60 81       	ld	r22, Z
    44da:	71 81       	ldd	r23, Z+1	; 0x01
    44dc:	82 81       	ldd	r24, Z+2	; 0x02
    44de:	93 81       	ldd	r25, Z+3	; 0x03
    44e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e4:	dc 01       	movw	r26, r24
    44e6:	cb 01       	movw	r24, r22
    44e8:	9e af       	std	Y+62, r25	; 0x3e
    44ea:	8d af       	std	Y+61, r24	; 0x3d
    44ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    44ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    44f0:	9a af       	std	Y+58, r25	; 0x3a
    44f2:	89 af       	std	Y+57, r24	; 0x39
    44f4:	89 ad       	ldd	r24, Y+57	; 0x39
    44f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <main+0x226e>
    44fc:	9a af       	std	Y+58, r25	; 0x3a
    44fe:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(150);//delay to make the user see the error
						LCD_displayStringRowColumn(1,0,"               ");//clear row two
    4500:	2b e7       	ldi	r18, 0x7B	; 123
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	a9 01       	movw	r20, r18
    450a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
						LCD_moveCursor(1,0);//move the cursor to the second row
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	60 e0       	ldi	r22, 0x00	; 0
    4512:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_moveCursor>
    4516:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}//end if ret= 2

					//////////////////

					else if(ret==3)//if the user submit and the pass is valid
    451a:	fe 01       	movw	r30, r28
    451c:	ed 5a       	subi	r30, 0xAD	; 173
    451e:	fe 4f       	sbci	r31, 0xFE	; 254
    4520:	80 81       	ld	r24, Z
    4522:	83 30       	cpi	r24, 0x03	; 3
    4524:	11 f0       	breq	.+4      	; 0x452a <main+0x22a0>
    4526:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					{//start if ret==3
						UART_sendByte(step);//send our step to Control_MCU
    452a:	80 91 0e 01 	lds	r24, 0x010E
    452e:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	a8 e4       	ldi	r26, 0x48	; 72
    4538:	b2 e4       	ldi	r27, 0x42	; 66
    453a:	8d ab       	std	Y+53, r24	; 0x35
    453c:	9e ab       	std	Y+54, r25	; 0x36
    453e:	af ab       	std	Y+55, r26	; 0x37
    4540:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4542:	6d a9       	ldd	r22, Y+53	; 0x35
    4544:	7e a9       	ldd	r23, Y+54	; 0x36
    4546:	8f a9       	ldd	r24, Y+55	; 0x37
    4548:	98 ad       	ldd	r25, Y+56	; 0x38
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	4a ef       	ldi	r20, 0xFA	; 250
    4550:	54 e4       	ldi	r21, 0x44	; 68
    4552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	89 ab       	std	Y+49, r24	; 0x31
    455c:	9a ab       	std	Y+50, r25	; 0x32
    455e:	ab ab       	std	Y+51, r26	; 0x33
    4560:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4562:	69 a9       	ldd	r22, Y+49	; 0x31
    4564:	7a a9       	ldd	r23, Y+50	; 0x32
    4566:	8b a9       	ldd	r24, Y+51	; 0x33
    4568:	9c a9       	ldd	r25, Y+52	; 0x34
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e8       	ldi	r20, 0x80	; 128
    4570:	5f e3       	ldi	r21, 0x3F	; 63
    4572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4576:	88 23       	and	r24, r24
    4578:	2c f4       	brge	.+10     	; 0x4584 <main+0x22fa>
		__ticks = 1;
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	98 ab       	std	Y+48, r25	; 0x30
    4580:	8f a7       	std	Y+47, r24	; 0x2f
    4582:	3f c0       	rjmp	.+126    	; 0x4602 <main+0x2378>
	else if (__tmp > 65535)
    4584:	69 a9       	ldd	r22, Y+49	; 0x31
    4586:	7a a9       	ldd	r23, Y+50	; 0x32
    4588:	8b a9       	ldd	r24, Y+51	; 0x33
    458a:	9c a9       	ldd	r25, Y+52	; 0x34
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	3f ef       	ldi	r19, 0xFF	; 255
    4590:	4f e7       	ldi	r20, 0x7F	; 127
    4592:	57 e4       	ldi	r21, 0x47	; 71
    4594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4598:	18 16       	cp	r1, r24
    459a:	4c f5       	brge	.+82     	; 0x45ee <main+0x2364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459c:	6d a9       	ldd	r22, Y+53	; 0x35
    459e:	7e a9       	ldd	r23, Y+54	; 0x36
    45a0:	8f a9       	ldd	r24, Y+55	; 0x37
    45a2:	98 ad       	ldd	r25, Y+56	; 0x38
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	98 ab       	std	Y+48, r25	; 0x30
    45c2:	8f a7       	std	Y+47, r24	; 0x2f
    45c4:	0f c0       	rjmp	.+30     	; 0x45e4 <main+0x235a>
    45c6:	88 ec       	ldi	r24, 0xC8	; 200
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	9e a7       	std	Y+46, r25	; 0x2e
    45cc:	8d a7       	std	Y+45, r24	; 0x2d
    45ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    45d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	f1 f7       	brne	.-4      	; 0x45d2 <main+0x2348>
    45d6:	9e a7       	std	Y+46, r25	; 0x2e
    45d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45da:	8f a5       	ldd	r24, Y+47	; 0x2f
    45dc:	98 a9       	ldd	r25, Y+48	; 0x30
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	98 ab       	std	Y+48, r25	; 0x30
    45e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    45e6:	98 a9       	ldd	r25, Y+48	; 0x30
    45e8:	00 97       	sbiw	r24, 0x00	; 0
    45ea:	69 f7       	brne	.-38     	; 0x45c6 <main+0x233c>
    45ec:	14 c0       	rjmp	.+40     	; 0x4616 <main+0x238c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ee:	69 a9       	ldd	r22, Y+49	; 0x31
    45f0:	7a a9       	ldd	r23, Y+50	; 0x32
    45f2:	8b a9       	ldd	r24, Y+51	; 0x33
    45f4:	9c a9       	ldd	r25, Y+52	; 0x34
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	98 ab       	std	Y+48, r25	; 0x30
    4600:	8f a7       	std	Y+47, r24	; 0x2f
    4602:	8f a5       	ldd	r24, Y+47	; 0x2f
    4604:	98 a9       	ldd	r25, Y+48	; 0x30
    4606:	9c a7       	std	Y+44, r25	; 0x2c
    4608:	8b a7       	std	Y+43, r24	; 0x2b
    460a:	8b a5       	ldd	r24, Y+43	; 0x2b
    460c:	9c a5       	ldd	r25, Y+44	; 0x2c
    460e:	01 97       	sbiw	r24, 0x01	; 1
    4610:	f1 f7       	brne	.-4      	; 0x460e <main+0x2384>
    4612:	9c a7       	std	Y+44, r25	; 0x2c
    4614:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(50);//wait to send data

						for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    4616:	fe 01       	movw	r30, r28
    4618:	ee 5a       	subi	r30, 0xAE	; 174
    461a:	fe 4f       	sbci	r31, 0xFE	; 254
    461c:	10 82       	st	Z, r1
    461e:	87 c0       	rjmp	.+270    	; 0x472e <main+0x24a4>
						{//start for arr_pass
							UART_sendByte(arr_pass[i]);//send the password to control_MCU
    4620:	fe 01       	movw	r30, r28
    4622:	ee 5a       	subi	r30, 0xAE	; 174
    4624:	fe 4f       	sbci	r31, 0xFE	; 254
    4626:	80 81       	ld	r24, Z
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	fc 01       	movw	r30, r24
    462e:	e0 5f       	subi	r30, 0xF0	; 240
    4630:	fe 4f       	sbci	r31, 0xFE	; 254
    4632:	80 81       	ld	r24, Z
    4634:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	a0 ea       	ldi	r26, 0xA0	; 160
    463e:	b1 e4       	ldi	r27, 0x41	; 65
    4640:	8f a3       	std	Y+39, r24	; 0x27
    4642:	98 a7       	std	Y+40, r25	; 0x28
    4644:	a9 a7       	std	Y+41, r26	; 0x29
    4646:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4648:	6f a1       	ldd	r22, Y+39	; 0x27
    464a:	78 a5       	ldd	r23, Y+40	; 0x28
    464c:	89 a5       	ldd	r24, Y+41	; 0x29
    464e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	4a ef       	ldi	r20, 0xFA	; 250
    4656:	54 e4       	ldi	r21, 0x44	; 68
    4658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	8b a3       	std	Y+35, r24	; 0x23
    4662:	9c a3       	std	Y+36, r25	; 0x24
    4664:	ad a3       	std	Y+37, r26	; 0x25
    4666:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4668:	6b a1       	ldd	r22, Y+35	; 0x23
    466a:	7c a1       	ldd	r23, Y+36	; 0x24
    466c:	8d a1       	ldd	r24, Y+37	; 0x25
    466e:	9e a1       	ldd	r25, Y+38	; 0x26
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e8       	ldi	r20, 0x80	; 128
    4676:	5f e3       	ldi	r21, 0x3F	; 63
    4678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    467c:	88 23       	and	r24, r24
    467e:	2c f4       	brge	.+10     	; 0x468a <main+0x2400>
		__ticks = 1;
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	9a a3       	std	Y+34, r25	; 0x22
    4686:	89 a3       	std	Y+33, r24	; 0x21
    4688:	3f c0       	rjmp	.+126    	; 0x4708 <main+0x247e>
	else if (__tmp > 65535)
    468a:	6b a1       	ldd	r22, Y+35	; 0x23
    468c:	7c a1       	ldd	r23, Y+36	; 0x24
    468e:	8d a1       	ldd	r24, Y+37	; 0x25
    4690:	9e a1       	ldd	r25, Y+38	; 0x26
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	3f ef       	ldi	r19, 0xFF	; 255
    4696:	4f e7       	ldi	r20, 0x7F	; 127
    4698:	57 e4       	ldi	r21, 0x47	; 71
    469a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    469e:	18 16       	cp	r1, r24
    46a0:	4c f5       	brge	.+82     	; 0x46f4 <main+0x246a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a2:	6f a1       	ldd	r22, Y+39	; 0x27
    46a4:	78 a5       	ldd	r23, Y+40	; 0x28
    46a6:	89 a5       	ldd	r24, Y+41	; 0x29
    46a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	40 e2       	ldi	r20, 0x20	; 32
    46b0:	51 e4       	ldi	r21, 0x41	; 65
    46b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	bc 01       	movw	r22, r24
    46bc:	cd 01       	movw	r24, r26
    46be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	9a a3       	std	Y+34, r25	; 0x22
    46c8:	89 a3       	std	Y+33, r24	; 0x21
    46ca:	0f c0       	rjmp	.+30     	; 0x46ea <main+0x2460>
    46cc:	88 ec       	ldi	r24, 0xC8	; 200
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	98 a3       	std	Y+32, r25	; 0x20
    46d2:	8f 8f       	std	Y+31, r24	; 0x1f
    46d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46d6:	98 a1       	ldd	r25, Y+32	; 0x20
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	f1 f7       	brne	.-4      	; 0x46d8 <main+0x244e>
    46dc:	98 a3       	std	Y+32, r25	; 0x20
    46de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e0:	89 a1       	ldd	r24, Y+33	; 0x21
    46e2:	9a a1       	ldd	r25, Y+34	; 0x22
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	9a a3       	std	Y+34, r25	; 0x22
    46e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ea:	89 a1       	ldd	r24, Y+33	; 0x21
    46ec:	9a a1       	ldd	r25, Y+34	; 0x22
    46ee:	00 97       	sbiw	r24, 0x00	; 0
    46f0:	69 f7       	brne	.-38     	; 0x46cc <main+0x2442>
    46f2:	14 c0       	rjmp	.+40     	; 0x471c <main+0x2492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f4:	6b a1       	ldd	r22, Y+35	; 0x23
    46f6:	7c a1       	ldd	r23, Y+36	; 0x24
    46f8:	8d a1       	ldd	r24, Y+37	; 0x25
    46fa:	9e a1       	ldd	r25, Y+38	; 0x26
    46fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4700:	dc 01       	movw	r26, r24
    4702:	cb 01       	movw	r24, r22
    4704:	9a a3       	std	Y+34, r25	; 0x22
    4706:	89 a3       	std	Y+33, r24	; 0x21
    4708:	89 a1       	ldd	r24, Y+33	; 0x21
    470a:	9a a1       	ldd	r25, Y+34	; 0x22
    470c:	9e 8f       	std	Y+30, r25	; 0x1e
    470e:	8d 8f       	std	Y+29, r24	; 0x1d
    4710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <main+0x248a>
    4718:	9e 8f       	std	Y+30, r25	; 0x1e
    471a:	8d 8f       	std	Y+29, r24	; 0x1d
					else if(ret==3)//if the user submit and the pass is valid
					{//start if ret==3
						UART_sendByte(step);//send our step to Control_MCU
						_delay_ms(50);//wait to send data

						for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass and send the elements to control MCU
    471c:	de 01       	movw	r26, r28
    471e:	ae 5a       	subi	r26, 0xAE	; 174
    4720:	be 4f       	sbci	r27, 0xFE	; 254
    4722:	fe 01       	movw	r30, r28
    4724:	ee 5a       	subi	r30, 0xAE	; 174
    4726:	fe 4f       	sbci	r31, 0xFE	; 254
    4728:	80 81       	ld	r24, Z
    472a:	8f 5f       	subi	r24, 0xFF	; 255
    472c:	8c 93       	st	X, r24
    472e:	fe 01       	movw	r30, r28
    4730:	ee 5a       	subi	r30, 0xAE	; 174
    4732:	fe 4f       	sbci	r31, 0xFE	; 254
    4734:	80 81       	ld	r24, Z
    4736:	84 30       	cpi	r24, 0x04	; 4
    4738:	08 f4       	brcc	.+2      	; 0x473c <main+0x24b2>
    473a:	72 cf       	rjmp	.-284    	; 0x4620 <main+0x2396>
							UART_sendByte(arr_pass[i]);//send the password to control_MCU
							_delay_ms(20);//wait to send data
						}//end for arr_pass
						////////////////////////////////////////////////////////////////////////////////////////////

						ret2=UART_recieveByte();//if the password match return ret2
    473c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_recieveByte>
    4740:	fe 01       	movw	r30, r28
    4742:	ef 5a       	subi	r30, 0xAF	; 175
    4744:	fe 4f       	sbci	r31, 0xFE	; 254
    4746:	80 83       	st	Z, r24
						/////////////////////////

						if(ret2==1)//if the password match
    4748:	fe 01       	movw	r30, r28
    474a:	ef 5a       	subi	r30, 0xAF	; 175
    474c:	fe 4f       	sbci	r31, 0xFE	; 254
    474e:	80 81       	ld	r24, Z
    4750:	81 30       	cpi	r24, 0x01	; 1
    4752:	81 f4       	brne	.+32     	; 0x4774 <main+0x24ea>
						{//start if the password match
							UART_sendByte(1);
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
							step =1;//go to step 4 to open the motor
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	80 93 0e 01 	sts	0x010E, r24
							flag=0;//enable displaying to display Door Unlocking
    4760:	fe 01       	movw	r30, r28
    4762:	e9 5a       	subi	r30, 0xA9	; 169
    4764:	fe 4f       	sbci	r31, 0xFE	; 254
    4766:	10 82       	st	Z, r1
							flag2=0;
    4768:	fe 01       	movw	r30, r28
    476a:	ea 5a       	subi	r30, 0xAA	; 170
    476c:	fe 4f       	sbci	r31, 0xFE	; 254
    476e:	10 82       	st	Z, r1
    4770:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
						/////////////////////

						else//if the password not match
						{//start if password not match

							if(counter<2)
    4774:	fe 01       	movw	r30, r28
    4776:	e8 5a       	subi	r30, 0xA8	; 168
    4778:	fe 4f       	sbci	r31, 0xFE	; 254
    477a:	80 81       	ld	r24, Z
    477c:	82 30       	cpi	r24, 0x02	; 2
    477e:	a8 f4       	brcc	.+42     	; 0x47aa <main+0x2520>
							{
								UART_sendByte(3);
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
								step=3;//stay in step 3
    4786:	83 e0       	ldi	r24, 0x03	; 3
    4788:	80 93 0e 01 	sts	0x010E, r24
								flag2=0;//dispaly "plz enter pass:"
    478c:	fe 01       	movw	r30, r28
    478e:	ea 5a       	subi	r30, 0xAA	; 170
    4790:	fe 4f       	sbci	r31, 0xFE	; 254
    4792:	10 82       	st	Z, r1
								counter++;//count the number of consecutive incorrect password
    4794:	de 01       	movw	r26, r28
    4796:	a8 5a       	subi	r26, 0xA8	; 168
    4798:	be 4f       	sbci	r27, 0xFE	; 254
    479a:	fe 01       	movw	r30, r28
    479c:	e8 5a       	subi	r30, 0xA8	; 168
    479e:	fe 4f       	sbci	r31, 0xFE	; 254
    47a0:	80 81       	ld	r24, Z
    47a2:	8f 5f       	subi	r24, 0xFF	; 255
    47a4:	8c 93       	st	X, r24
    47a6:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
							}

							else if(counter==2)//if the counter =3
    47aa:	fe 01       	movw	r30, r28
    47ac:	e8 5a       	subi	r30, 0xA8	; 168
    47ae:	fe 4f       	sbci	r31, 0xFE	; 254
    47b0:	80 81       	ld	r24, Z
    47b2:	82 30       	cpi	r24, 0x02	; 2
    47b4:	11 f0       	breq	.+4      	; 0x47ba <main+0x2530>
    47b6:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
							{//start if counter ==3
								UART_sendByte(0);//sent 0 to the control_MCU to to turn on buzzer
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	0e 94 24 0a 	call	0x1448	; 0x1448 <UART_sendByte>
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	a0 ea       	ldi	r26, 0xA0	; 160
    47c6:	b1 e4       	ldi	r27, 0x41	; 65
    47c8:	89 8f       	std	Y+25, r24	; 0x19
    47ca:	9a 8f       	std	Y+26, r25	; 0x1a
    47cc:	ab 8f       	std	Y+27, r26	; 0x1b
    47ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d0:	69 8d       	ldd	r22, Y+25	; 0x19
    47d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	4a ef       	ldi	r20, 0xFA	; 250
    47de:	54 e4       	ldi	r21, 0x44	; 68
    47e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	8d 8b       	std	Y+21, r24	; 0x15
    47ea:	9e 8b       	std	Y+22, r25	; 0x16
    47ec:	af 8b       	std	Y+23, r26	; 0x17
    47ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47f0:	6d 89       	ldd	r22, Y+21	; 0x15
    47f2:	7e 89       	ldd	r23, Y+22	; 0x16
    47f4:	8f 89       	ldd	r24, Y+23	; 0x17
    47f6:	98 8d       	ldd	r25, Y+24	; 0x18
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e8       	ldi	r20, 0x80	; 128
    47fe:	5f e3       	ldi	r21, 0x3F	; 63
    4800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4804:	88 23       	and	r24, r24
    4806:	2c f4       	brge	.+10     	; 0x4812 <main+0x2588>
		__ticks = 1;
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	9c 8b       	std	Y+20, r25	; 0x14
    480e:	8b 8b       	std	Y+19, r24	; 0x13
    4810:	3f c0       	rjmp	.+126    	; 0x4890 <main+0x2606>
	else if (__tmp > 65535)
    4812:	6d 89       	ldd	r22, Y+21	; 0x15
    4814:	7e 89       	ldd	r23, Y+22	; 0x16
    4816:	8f 89       	ldd	r24, Y+23	; 0x17
    4818:	98 8d       	ldd	r25, Y+24	; 0x18
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	3f ef       	ldi	r19, 0xFF	; 255
    481e:	4f e7       	ldi	r20, 0x7F	; 127
    4820:	57 e4       	ldi	r21, 0x47	; 71
    4822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4826:	18 16       	cp	r1, r24
    4828:	4c f5       	brge	.+82     	; 0x487c <main+0x25f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    482a:	69 8d       	ldd	r22, Y+25	; 0x19
    482c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    482e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e2       	ldi	r20, 0x20	; 32
    4838:	51 e4       	ldi	r21, 0x41	; 65
    483a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	bc 01       	movw	r22, r24
    4844:	cd 01       	movw	r24, r26
    4846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	9c 8b       	std	Y+20, r25	; 0x14
    4850:	8b 8b       	std	Y+19, r24	; 0x13
    4852:	0f c0       	rjmp	.+30     	; 0x4872 <main+0x25e8>
    4854:	88 ec       	ldi	r24, 0xC8	; 200
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	9a 8b       	std	Y+18, r25	; 0x12
    485a:	89 8b       	std	Y+17, r24	; 0x11
    485c:	89 89       	ldd	r24, Y+17	; 0x11
    485e:	9a 89       	ldd	r25, Y+18	; 0x12
    4860:	01 97       	sbiw	r24, 0x01	; 1
    4862:	f1 f7       	brne	.-4      	; 0x4860 <main+0x25d6>
    4864:	9a 8b       	std	Y+18, r25	; 0x12
    4866:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4868:	8b 89       	ldd	r24, Y+19	; 0x13
    486a:	9c 89       	ldd	r25, Y+20	; 0x14
    486c:	01 97       	sbiw	r24, 0x01	; 1
    486e:	9c 8b       	std	Y+20, r25	; 0x14
    4870:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4872:	8b 89       	ldd	r24, Y+19	; 0x13
    4874:	9c 89       	ldd	r25, Y+20	; 0x14
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	69 f7       	brne	.-38     	; 0x4854 <main+0x25ca>
    487a:	14 c0       	rjmp	.+40     	; 0x48a4 <main+0x261a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    487c:	6d 89       	ldd	r22, Y+21	; 0x15
    487e:	7e 89       	ldd	r23, Y+22	; 0x16
    4880:	8f 89       	ldd	r24, Y+23	; 0x17
    4882:	98 8d       	ldd	r25, Y+24	; 0x18
    4884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	9c 8b       	std	Y+20, r25	; 0x14
    488e:	8b 8b       	std	Y+19, r24	; 0x13
    4890:	8b 89       	ldd	r24, Y+19	; 0x13
    4892:	9c 89       	ldd	r25, Y+20	; 0x14
    4894:	98 8b       	std	Y+16, r25	; 0x10
    4896:	8f 87       	std	Y+15, r24	; 0x0f
    4898:	8f 85       	ldd	r24, Y+15	; 0x0f
    489a:	98 89       	ldd	r25, Y+16	; 0x10
    489c:	01 97       	sbiw	r24, 0x01	; 1
    489e:	f1 f7       	brne	.-4      	; 0x489c <main+0x2612>
    48a0:	98 8b       	std	Y+16, r25	; 0x10
    48a2:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(20);
								Time1_SetCallBack(timer_function);//set the callback function to timer_function
    48a4:	85 e3       	ldi	r24, 0x35	; 53
    48a6:	90 e1       	ldi	r25, 0x10	; 16
    48a8:	0e 94 87 09 	call	0x130e	; 0x130e <Time1_SetCallBack>
								Timer1_Init(&timer);//start the timer
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	91 e0       	ldi	r25, 0x01	; 1
    48b0:	0e 94 1f 09 	call	0x123e	; 0x123e <Timer1_Init>
								LCD_clearScreen();//clear the screen
    48b4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
								LCD_displayStringRowColumn(0,3,"ERROR...");//display Error message
    48b8:	20 e6       	ldi	r18, 0x60	; 96
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	63 e0       	ldi	r22, 0x03	; 3
    48c0:	a9 01       	movw	r20, r18
    48c2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
								step=0;//stay and display the main window
    48c6:	10 92 0e 01 	sts	0x010E, r1
								flag=0;//to enable displaying
    48ca:	fe 01       	movw	r30, r28
    48cc:	e9 5a       	subi	r30, 0xA9	; 169
    48ce:	fe 4f       	sbci	r31, 0xFE	; 254
    48d0:	10 82       	st	Z, r1
								flag2=0;//to enable displaying
    48d2:	fe 01       	movw	r30, r28
    48d4:	ea 5a       	subi	r30, 0xAA	; 170
    48d6:	fe 4f       	sbci	r31, 0xFE	; 254
    48d8:	10 82       	st	Z, r1
								counter=0;//reset the counter
    48da:	fe 01       	movw	r30, r28
    48dc:	e8 5a       	subi	r30, 0xA8	; 168
    48de:	fe 4f       	sbci	r31, 0xFE	; 254
    48e0:	10 82       	st	Z, r1
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	aa ef       	ldi	r26, 0xFA	; 250
    48e8:	b4 e4       	ldi	r27, 0x44	; 68
    48ea:	8b 87       	std	Y+11, r24	; 0x0b
    48ec:	9c 87       	std	Y+12, r25	; 0x0c
    48ee:	ad 87       	std	Y+13, r26	; 0x0d
    48f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    48f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    48f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    48f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	4a ef       	ldi	r20, 0xFA	; 250
    4900:	54 e4       	ldi	r21, 0x44	; 68
    4902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	8f 83       	std	Y+7, r24	; 0x07
    490c:	98 87       	std	Y+8, r25	; 0x08
    490e:	a9 87       	std	Y+9, r26	; 0x09
    4910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4912:	6f 81       	ldd	r22, Y+7	; 0x07
    4914:	78 85       	ldd	r23, Y+8	; 0x08
    4916:	89 85       	ldd	r24, Y+9	; 0x09
    4918:	9a 85       	ldd	r25, Y+10	; 0x0a
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	40 e8       	ldi	r20, 0x80	; 128
    4920:	5f e3       	ldi	r21, 0x3F	; 63
    4922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4926:	88 23       	and	r24, r24
    4928:	2c f4       	brge	.+10     	; 0x4934 <main+0x26aa>
		__ticks = 1;
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	9e 83       	std	Y+6, r25	; 0x06
    4930:	8d 83       	std	Y+5, r24	; 0x05
    4932:	40 c0       	rjmp	.+128    	; 0x49b4 <main+0x272a>
	else if (__tmp > 65535)
    4934:	6f 81       	ldd	r22, Y+7	; 0x07
    4936:	78 85       	ldd	r23, Y+8	; 0x08
    4938:	89 85       	ldd	r24, Y+9	; 0x09
    493a:	9a 85       	ldd	r25, Y+10	; 0x0a
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	3f ef       	ldi	r19, 0xFF	; 255
    4940:	4f e7       	ldi	r20, 0x7F	; 127
    4942:	57 e4       	ldi	r21, 0x47	; 71
    4944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4948:	18 16       	cp	r1, r24
    494a:	54 f5       	brge	.+84     	; 0x49a0 <main+0x2716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494c:	6b 85       	ldd	r22, Y+11	; 0x0b
    494e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4950:	8d 85       	ldd	r24, Y+13	; 0x0d
    4952:	9e 85       	ldd	r25, Y+14	; 0x0e
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	40 e2       	ldi	r20, 0x20	; 32
    495a:	51 e4       	ldi	r21, 0x41	; 65
    495c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	9e 83       	std	Y+6, r25	; 0x06
    4972:	8d 83       	std	Y+5, r24	; 0x05
    4974:	0f c0       	rjmp	.+30     	; 0x4994 <main+0x270a>
    4976:	88 ec       	ldi	r24, 0xC8	; 200
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	9c 83       	std	Y+4, r25	; 0x04
    497c:	8b 83       	std	Y+3, r24	; 0x03
    497e:	8b 81       	ldd	r24, Y+3	; 0x03
    4980:	9c 81       	ldd	r25, Y+4	; 0x04
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <main+0x26f8>
    4986:	9c 83       	std	Y+4, r25	; 0x04
    4988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498a:	8d 81       	ldd	r24, Y+5	; 0x05
    498c:	9e 81       	ldd	r25, Y+6	; 0x06
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	9e 83       	std	Y+6, r25	; 0x06
    4992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4994:	8d 81       	ldd	r24, Y+5	; 0x05
    4996:	9e 81       	ldd	r25, Y+6	; 0x06
    4998:	00 97       	sbiw	r24, 0x00	; 0
    499a:	69 f7       	brne	.-38     	; 0x4976 <main+0x26ec>
    499c:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a0:	6f 81       	ldd	r22, Y+7	; 0x07
    49a2:	78 85       	ldd	r23, Y+8	; 0x08
    49a4:	89 85       	ldd	r24, Y+9	; 0x09
    49a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ac:	dc 01       	movw	r26, r24
    49ae:	cb 01       	movw	r24, r22
    49b0:	9e 83       	std	Y+6, r25	; 0x06
    49b2:	8d 83       	std	Y+5, r24	; 0x05
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	89 83       	std	Y+1, r24	; 0x01
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	9a 81       	ldd	r25, Y+2	; 0x02
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	f1 f7       	brne	.-4      	; 0x49c0 <main+0x2736>
    49c4:	9a 83       	std	Y+2, r25	; 0x02
    49c6:	89 83       	std	Y+1, r24	; 0x01
    49c8:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>

					break;//break case -

					/////////////////////////////////////////////////////
				default ://if the key invalid
					flag=0;//enable displaying
    49cc:	fe 01       	movw	r30, r28
    49ce:	e9 5a       	subi	r30, 0xA9	; 169
    49d0:	fe 4f       	sbci	r31, 0xFE	; 254
    49d2:	10 82       	st	Z, r1
    49d4:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
				/////////////////////////////

				case  4 ://case 4 if the password match
					/////////////////////////////////

					ret2=UART_recieveByte();//take the what should i do number
    49d8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_recieveByte>
    49dc:	fe 01       	movw	r30, r28
    49de:	ef 5a       	subi	r30, 0xAF	; 175
    49e0:	fe 4f       	sbci	r31, 0xFE	; 254
    49e2:	80 83       	st	Z, r24

					if(ret2==1)//if the DCmotor start Unlocking
    49e4:	fe 01       	movw	r30, r28
    49e6:	ef 5a       	subi	r30, 0xAF	; 175
    49e8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ea:	80 81       	ld	r24, Z
    49ec:	81 30       	cpi	r24, 0x01	; 1
    49ee:	59 f4       	brne	.+22     	; 0x4a06 <main+0x277c>
					{
						LCD_clearScreen();//clear the screen
    49f0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"DOOR Unlocking");//display Unlocking message
    49f4:	2f ec       	ldi	r18, 0xCF	; 207
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	a9 01       	movw	r20, r18
    49fe:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    4a02:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}

					else if(ret2==2)//if the DCmotor start Holding
    4a06:	fe 01       	movw	r30, r28
    4a08:	ef 5a       	subi	r30, 0xAF	; 175
    4a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a0c:	80 81       	ld	r24, Z
    4a0e:	82 30       	cpi	r24, 0x02	; 2
    4a10:	59 f4       	brne	.+22     	; 0x4a28 <main+0x279e>
					{
						LCD_clearScreen();//clear the screen
    4a12:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"DOOR Holding");//display Holding message
    4a16:	2e ed       	ldi	r18, 0xDE	; 222
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	80 e0       	ldi	r24, 0x00	; 0
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	a9 01       	movw	r20, r18
    4a20:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    4a24:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}

					else if(ret2==3)//if the DCmotor start locking
    4a28:	fe 01       	movw	r30, r28
    4a2a:	ef 5a       	subi	r30, 0xAF	; 175
    4a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a2e:	80 81       	ld	r24, Z
    4a30:	83 30       	cpi	r24, 0x03	; 3
    4a32:	59 f4       	brne	.+22     	; 0x4a4a <main+0x27c0>
					{
						LCD_clearScreen();//clear the screen
    4a34:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"DOOR Locking");//display locking message
    4a38:	2b ee       	ldi	r18, 0xEB	; 235
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	60 e0       	ldi	r22, 0x00	; 0
    4a40:	a9 01       	movw	r20, r18
    4a42:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayStringRowColumn>
    4a46:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					}

					else if (ret2==4)//if the the DC motor finish its work
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	ef 5a       	subi	r30, 0xAF	; 175
    4a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a50:	80 81       	ld	r24, Z
    4a52:	84 30       	cpi	r24, 0x04	; 4
    4a54:	11 f0       	breq	.+4      	; 0x4a5a <main+0x27d0>
    4a56:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>
					{
						step=3;//return to the main page again
    4a5a:	83 e0       	ldi	r24, 0x03	; 3
    4a5c:	80 93 0e 01 	sts	0x010E, r24
    4a60:	0c 94 ce 11 	jmp	0x239c	; 0x239c <main+0x112>

00004a64 <First_Pass>:

/*************************************************************************************************
 * 											Function Body
 * **********************************************************************************************/
uint8 First_Pass(uint8 key)//function to check the key and fill arr_pass[]
{//start First_pass function
    4a64:	df 93       	push	r29
    4a66:	cf 93       	push	r28
    4a68:	00 d0       	rcall	.+0      	; 0x4a6a <First_Pass+0x6>
    4a6a:	0f 92       	push	r0
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ret=0/*carries the return value */;
    4a72:	19 82       	std	Y+1, r1	; 0x01
	static uint8 i=0/*carries the index of array */;
	if(i>(Arr_Size)){i=0;}//if i higher than Arr_Size of array then i =0
    4a74:	80 91 1f 01 	lds	r24, 0x011F
    4a78:	86 30       	cpi	r24, 0x06	; 6
    4a7a:	10 f0       	brcs	.+4      	; 0x4a80 <First_Pass+0x1c>
    4a7c:	10 92 1f 01 	sts	0x011F, r1
	///////////////////////////////////////////////////////////////////////////

	if(key >=0 && key<=9)//if key between 0 and 9 is a valid number
    4a80:	8a 81       	ldd	r24, Y+2	; 0x02
    4a82:	8a 30       	cpi	r24, 0x0A	; 10
    4a84:	b8 f4       	brcc	.+46     	; 0x4ab4 <First_Pass+0x50>
	{//start if key
		if(i<(Arr_Size))//check the index is valid or not
    4a86:	80 91 1f 01 	lds	r24, 0x011F
    4a8a:	85 30       	cpi	r24, 0x05	; 5
    4a8c:	88 f4       	brcc	.+34     	; 0x4ab0 <First_Pass+0x4c>
		{//start if i
			arr_pass[i]=key;//if valid store it
    4a8e:	80 91 1f 01 	lds	r24, 0x011F
    4a92:	88 2f       	mov	r24, r24
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	fc 01       	movw	r30, r24
    4a98:	e0 5f       	subi	r30, 0xF0	; 240
    4a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9e:	80 83       	st	Z, r24
			i++;//increment index
    4aa0:	80 91 1f 01 	lds	r24, 0x011F
    4aa4:	8f 5f       	subi	r24, 0xFF	; 255
    4aa6:	80 93 1f 01 	sts	0x011F, r24
			ret=1;//return 1
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	89 83       	std	Y+1, r24	; 0x01
    4aae:	1d c0       	rjmp	.+58     	; 0x4aea <First_Pass+0x86>
		}//end if i

		else//if i not valid
		{//start else i
			return 0;//return error
    4ab0:	1b 82       	std	Y+3, r1	; 0x03
    4ab2:	1d c0       	rjmp	.+58     	; 0x4aee <First_Pass+0x8a>
		}//end else i
	}//end if key

	/////////////////////////////////////////////////////////////////

	else if (key==13 && (i<(Arr_Size) || i>Arr_Size))//if user submit but the password lower than 5 digits
    4ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab6:	8d 30       	cpi	r24, 0x0D	; 13
    4ab8:	69 f4       	brne	.+26     	; 0x4ad4 <First_Pass+0x70>
    4aba:	80 91 1f 01 	lds	r24, 0x011F
    4abe:	85 30       	cpi	r24, 0x05	; 5
    4ac0:	20 f0       	brcs	.+8      	; 0x4aca <First_Pass+0x66>
    4ac2:	80 91 1f 01 	lds	r24, 0x011F
    4ac6:	86 30       	cpi	r24, 0x06	; 6
    4ac8:	28 f0       	brcs	.+10     	; 0x4ad4 <First_Pass+0x70>
	{//start else if password lower than 5 digits
		ret=2;//return 2
    4aca:	82 e0       	ldi	r24, 0x02	; 2
    4acc:	89 83       	std	Y+1, r24	; 0x01
		i=0;//start again
    4ace:	10 92 1f 01 	sts	0x011F, r1
    4ad2:	0b c0       	rjmp	.+22     	; 0x4aea <First_Pass+0x86>
	}//end else if password lower than 5 digits

	/////////////////////////////////////////////////////////////////

	else if(key==13 && (i==(Arr_Size)))////if user submit and the password equal 5 digits
    4ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad6:	8d 30       	cpi	r24, 0x0D	; 13
    4ad8:	41 f4       	brne	.+16     	; 0x4aea <First_Pass+0x86>
    4ada:	80 91 1f 01 	lds	r24, 0x011F
    4ade:	85 30       	cpi	r24, 0x05	; 5
    4ae0:	21 f4       	brne	.+8      	; 0x4aea <First_Pass+0x86>
	{//start if //if user submit but the password lower than 5 digits
		ret=3;//return 3
    4ae2:	83 e0       	ldi	r24, 0x03	; 3
    4ae4:	89 83       	std	Y+1, r24	; 0x01
		i=0;//start again
    4ae6:	10 92 1f 01 	sts	0x011F, r1
	}//end if //if user submit but the password lower than 5 digits
	//////////////////////////////////////////////////////////////////
	return ret;//return ret
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	8b 83       	std	Y+3, r24	; 0x03
    4aee:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	cf 91       	pop	r28
    4af8:	df 91       	pop	r29
    4afa:	08 95       	ret

00004afc <Confirm_Pass>:
////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
uint8 Confirm_Pass(uint8 key)
{
    4afc:	df 93       	push	r29
    4afe:	cf 93       	push	r28
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <Confirm_Pass+0x6>
    4b02:	0f 92       	push	r0
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ret=0/*carries the return value */;
    4b0a:	19 82       	std	Y+1, r1	; 0x01
	static uint8 i=0/*carries the index of array */;
	if(i>(Arr_Size)){i=0;}//if i higher than Arr_Size of array then i =0
    4b0c:	80 91 20 01 	lds	r24, 0x0120
    4b10:	86 30       	cpi	r24, 0x06	; 6
    4b12:	10 f0       	brcs	.+4      	; 0x4b18 <Confirm_Pass+0x1c>
    4b14:	10 92 20 01 	sts	0x0120, r1
	///////////////////////////////////////////////////////////////////////////

	if(key >=0 && key<=9)//if key between 0 and 9 is a valid number
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	8a 30       	cpi	r24, 0x0A	; 10
    4b1c:	b8 f4       	brcc	.+46     	; 0x4b4c <Confirm_Pass+0x50>
	{//start if key
		if(i<(Arr_Size))//check the index is valid or not
    4b1e:	80 91 20 01 	lds	r24, 0x0120
    4b22:	85 30       	cpi	r24, 0x05	; 5
    4b24:	88 f4       	brcc	.+34     	; 0x4b48 <Confirm_Pass+0x4c>
		{//start if i
			arr_confirm[i]=key;//if valid store it
    4b26:	80 91 20 01 	lds	r24, 0x0120
    4b2a:	88 2f       	mov	r24, r24
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	fc 01       	movw	r30, r24
    4b30:	eb 5e       	subi	r30, 0xEB	; 235
    4b32:	fe 4f       	sbci	r31, 0xFE	; 254
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	80 83       	st	Z, r24
			i++;//increment index
    4b38:	80 91 20 01 	lds	r24, 0x0120
    4b3c:	8f 5f       	subi	r24, 0xFF	; 255
    4b3e:	80 93 20 01 	sts	0x0120, r24
			ret=1;//return 1
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	89 83       	std	Y+1, r24	; 0x01
    4b46:	1d c0       	rjmp	.+58     	; 0x4b82 <Confirm_Pass+0x86>
		}//end if i

		else//if i not valid
		{//start else i
			return 0;//return error
    4b48:	1b 82       	std	Y+3, r1	; 0x03
    4b4a:	1d c0       	rjmp	.+58     	; 0x4b86 <Confirm_Pass+0x8a>
		}//end else i
	}//end if key

	/////////////////////////////////////////////////////////////////

	else if (key==13 && (i<(Arr_Size) || i>Arr_Size))//if user submit but the password lower than 5 digits
    4b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4e:	8d 30       	cpi	r24, 0x0D	; 13
    4b50:	69 f4       	brne	.+26     	; 0x4b6c <Confirm_Pass+0x70>
    4b52:	80 91 20 01 	lds	r24, 0x0120
    4b56:	85 30       	cpi	r24, 0x05	; 5
    4b58:	20 f0       	brcs	.+8      	; 0x4b62 <Confirm_Pass+0x66>
    4b5a:	80 91 20 01 	lds	r24, 0x0120
    4b5e:	86 30       	cpi	r24, 0x06	; 6
    4b60:	28 f0       	brcs	.+10     	; 0x4b6c <Confirm_Pass+0x70>
	{//start else if password lower than 5 digits
		ret=2;//return 2
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	89 83       	std	Y+1, r24	; 0x01
		i=0;//start again
    4b66:	10 92 20 01 	sts	0x0120, r1
    4b6a:	0b c0       	rjmp	.+22     	; 0x4b82 <Confirm_Pass+0x86>
	}//end else if password lower than 5 digits

	/////////////////////////////////////////////////////////////////

	else if(key==13 && (i==(Arr_Size)))////if user submit and the password equal 5 digits
    4b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6e:	8d 30       	cpi	r24, 0x0D	; 13
    4b70:	41 f4       	brne	.+16     	; 0x4b82 <Confirm_Pass+0x86>
    4b72:	80 91 20 01 	lds	r24, 0x0120
    4b76:	85 30       	cpi	r24, 0x05	; 5
    4b78:	21 f4       	brne	.+8      	; 0x4b82 <Confirm_Pass+0x86>
	{//start if //if user submit but the password lower than 5 digits
		ret=3;//return 3
    4b7a:	83 e0       	ldi	r24, 0x03	; 3
    4b7c:	89 83       	std	Y+1, r24	; 0x01
		i=0;//start again
    4b7e:	10 92 20 01 	sts	0x0120, r1
	}//end if //if user submit but the password lower than 5 digits
	//////////////////////////////////////////////////////////////////
	return ret;//return ret
    4b82:	89 81       	ldd	r24, Y+1	; 0x01
    4b84:	8b 83       	std	Y+3, r24	; 0x03
    4b86:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	cf 91       	pop	r28
    4b90:	df 91       	pop	r29
    4b92:	08 95       	ret

00004b94 <eeprom_pass>:




uint8 eeprom_pass(uint8 key)
{
    4b94:	df 93       	push	r29
    4b96:	cf 93       	push	r28
    4b98:	00 d0       	rcall	.+0      	; 0x4b9a <eeprom_pass+0x6>
    4b9a:	0f 92       	push	r0
    4b9c:	cd b7       	in	r28, 0x3d	; 61
    4b9e:	de b7       	in	r29, 0x3e	; 62
    4ba0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ret=0/*carries the return value */;
    4ba2:	19 82       	std	Y+1, r1	; 0x01
	static uint8 i=0/*carries the index of array */;
	if(i>(Arr_Size)){i=0;}//if i higher than Arr_Size of array then i =0
    4ba4:	80 91 21 01 	lds	r24, 0x0121
    4ba8:	86 30       	cpi	r24, 0x06	; 6
    4baa:	10 f0       	brcs	.+4      	; 0x4bb0 <eeprom_pass+0x1c>
    4bac:	10 92 21 01 	sts	0x0121, r1
	///////////////////////////////////////////////////////////////////////////

	if(key >=0 && key<=9)//if key between 0 and 9 is a valid number
    4bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb2:	8a 30       	cpi	r24, 0x0A	; 10
    4bb4:	b8 f4       	brcc	.+46     	; 0x4be4 <eeprom_pass+0x50>
	{//start if key
		if(i<(Arr_Size))//check the index is valid or not
    4bb6:	80 91 21 01 	lds	r24, 0x0121
    4bba:	85 30       	cpi	r24, 0x05	; 5
    4bbc:	88 f4       	brcc	.+34     	; 0x4be0 <eeprom_pass+0x4c>
		{//start if i
			arr_eeprom[i]=key;//if valid store it
    4bbe:	80 91 21 01 	lds	r24, 0x0121
    4bc2:	88 2f       	mov	r24, r24
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	fc 01       	movw	r30, r24
    4bc8:	e6 5e       	subi	r30, 0xE6	; 230
    4bca:	fe 4f       	sbci	r31, 0xFE	; 254
    4bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bce:	80 83       	st	Z, r24
			i++;//increment index
    4bd0:	80 91 21 01 	lds	r24, 0x0121
    4bd4:	8f 5f       	subi	r24, 0xFF	; 255
    4bd6:	80 93 21 01 	sts	0x0121, r24
			ret=1;//return 1
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	89 83       	std	Y+1, r24	; 0x01
    4bde:	1d c0       	rjmp	.+58     	; 0x4c1a <eeprom_pass+0x86>
		}//end if i

		else//if i not valid
		{//start else i
			return 0;//return error
    4be0:	1b 82       	std	Y+3, r1	; 0x03
    4be2:	1d c0       	rjmp	.+58     	; 0x4c1e <eeprom_pass+0x8a>
		}//end else i
	}//end if key

	/////////////////////////////////////////////////////////////////

	else if (key==13 && (i<(Arr_Size) || i>Arr_Size))//if user submit but the password lower than 5 digits
    4be4:	8a 81       	ldd	r24, Y+2	; 0x02
    4be6:	8d 30       	cpi	r24, 0x0D	; 13
    4be8:	69 f4       	brne	.+26     	; 0x4c04 <eeprom_pass+0x70>
    4bea:	80 91 21 01 	lds	r24, 0x0121
    4bee:	85 30       	cpi	r24, 0x05	; 5
    4bf0:	20 f0       	brcs	.+8      	; 0x4bfa <eeprom_pass+0x66>
    4bf2:	80 91 21 01 	lds	r24, 0x0121
    4bf6:	86 30       	cpi	r24, 0x06	; 6
    4bf8:	28 f0       	brcs	.+10     	; 0x4c04 <eeprom_pass+0x70>
	{//start else if password lower than 5 digits
		ret=2;//return 2
    4bfa:	82 e0       	ldi	r24, 0x02	; 2
    4bfc:	89 83       	std	Y+1, r24	; 0x01
		i=0;//start again
    4bfe:	10 92 21 01 	sts	0x0121, r1
    4c02:	0b c0       	rjmp	.+22     	; 0x4c1a <eeprom_pass+0x86>
	}//end else if password lower than 5 digits

	/////////////////////////////////////////////////////////////////

	else if(key==13 && (i==(Arr_Size)))////if user submit and the password equal 5 digits
    4c04:	8a 81       	ldd	r24, Y+2	; 0x02
    4c06:	8d 30       	cpi	r24, 0x0D	; 13
    4c08:	41 f4       	brne	.+16     	; 0x4c1a <eeprom_pass+0x86>
    4c0a:	80 91 21 01 	lds	r24, 0x0121
    4c0e:	85 30       	cpi	r24, 0x05	; 5
    4c10:	21 f4       	brne	.+8      	; 0x4c1a <eeprom_pass+0x86>
	{//start if //if user submit but the password lower than 5 digits
		ret=3;//return 3
    4c12:	83 e0       	ldi	r24, 0x03	; 3
    4c14:	89 83       	std	Y+1, r24	; 0x01
		i=0;//start again
    4c16:	10 92 21 01 	sts	0x0121, r1
	}//end if //if user submit but the password lower than 5 digits
	//////////////////////////////////////////////////////////////////
	return ret;//return ret
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
    4c1c:	8b 83       	std	Y+3, r24	; 0x03
    4c1e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4c20:	0f 90       	pop	r0
    4c22:	0f 90       	pop	r0
    4c24:	0f 90       	pop	r0
    4c26:	cf 91       	pop	r28
    4c28:	df 91       	pop	r29
    4c2a:	08 95       	ret

00004c2c <__udivmodsi4>:
    4c2c:	a1 e2       	ldi	r26, 0x21	; 33
    4c2e:	1a 2e       	mov	r1, r26
    4c30:	aa 1b       	sub	r26, r26
    4c32:	bb 1b       	sub	r27, r27
    4c34:	fd 01       	movw	r30, r26
    4c36:	0d c0       	rjmp	.+26     	; 0x4c52 <__udivmodsi4_ep>

00004c38 <__udivmodsi4_loop>:
    4c38:	aa 1f       	adc	r26, r26
    4c3a:	bb 1f       	adc	r27, r27
    4c3c:	ee 1f       	adc	r30, r30
    4c3e:	ff 1f       	adc	r31, r31
    4c40:	a2 17       	cp	r26, r18
    4c42:	b3 07       	cpc	r27, r19
    4c44:	e4 07       	cpc	r30, r20
    4c46:	f5 07       	cpc	r31, r21
    4c48:	20 f0       	brcs	.+8      	; 0x4c52 <__udivmodsi4_ep>
    4c4a:	a2 1b       	sub	r26, r18
    4c4c:	b3 0b       	sbc	r27, r19
    4c4e:	e4 0b       	sbc	r30, r20
    4c50:	f5 0b       	sbc	r31, r21

00004c52 <__udivmodsi4_ep>:
    4c52:	66 1f       	adc	r22, r22
    4c54:	77 1f       	adc	r23, r23
    4c56:	88 1f       	adc	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	1a 94       	dec	r1
    4c5c:	69 f7       	brne	.-38     	; 0x4c38 <__udivmodsi4_loop>
    4c5e:	60 95       	com	r22
    4c60:	70 95       	com	r23
    4c62:	80 95       	com	r24
    4c64:	90 95       	com	r25
    4c66:	9b 01       	movw	r18, r22
    4c68:	ac 01       	movw	r20, r24
    4c6a:	bd 01       	movw	r22, r26
    4c6c:	cf 01       	movw	r24, r30
    4c6e:	08 95       	ret

00004c70 <__prologue_saves__>:
    4c70:	2f 92       	push	r2
    4c72:	3f 92       	push	r3
    4c74:	4f 92       	push	r4
    4c76:	5f 92       	push	r5
    4c78:	6f 92       	push	r6
    4c7a:	7f 92       	push	r7
    4c7c:	8f 92       	push	r8
    4c7e:	9f 92       	push	r9
    4c80:	af 92       	push	r10
    4c82:	bf 92       	push	r11
    4c84:	cf 92       	push	r12
    4c86:	df 92       	push	r13
    4c88:	ef 92       	push	r14
    4c8a:	ff 92       	push	r15
    4c8c:	0f 93       	push	r16
    4c8e:	1f 93       	push	r17
    4c90:	cf 93       	push	r28
    4c92:	df 93       	push	r29
    4c94:	cd b7       	in	r28, 0x3d	; 61
    4c96:	de b7       	in	r29, 0x3e	; 62
    4c98:	ca 1b       	sub	r28, r26
    4c9a:	db 0b       	sbc	r29, r27
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	09 94       	ijmp

00004ca8 <__epilogue_restores__>:
    4ca8:	2a 88       	ldd	r2, Y+18	; 0x12
    4caa:	39 88       	ldd	r3, Y+17	; 0x11
    4cac:	48 88       	ldd	r4, Y+16	; 0x10
    4cae:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cba:	b9 84       	ldd	r11, Y+9	; 0x09
    4cbc:	c8 84       	ldd	r12, Y+8	; 0x08
    4cbe:	df 80       	ldd	r13, Y+7	; 0x07
    4cc0:	ee 80       	ldd	r14, Y+6	; 0x06
    4cc2:	fd 80       	ldd	r15, Y+5	; 0x05
    4cc4:	0c 81       	ldd	r16, Y+4	; 0x04
    4cc6:	1b 81       	ldd	r17, Y+3	; 0x03
    4cc8:	aa 81       	ldd	r26, Y+2	; 0x02
    4cca:	b9 81       	ldd	r27, Y+1	; 0x01
    4ccc:	ce 0f       	add	r28, r30
    4cce:	d1 1d       	adc	r29, r1
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	f8 94       	cli
    4cd4:	de bf       	out	0x3e, r29	; 62
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	cd bf       	out	0x3d, r28	; 61
    4cda:	ed 01       	movw	r28, r26
    4cdc:	08 95       	ret

00004cde <itoa>:
    4cde:	fb 01       	movw	r30, r22
    4ce0:	9f 01       	movw	r18, r30
    4ce2:	e8 94       	clt
    4ce4:	42 30       	cpi	r20, 0x02	; 2
    4ce6:	c4 f0       	brlt	.+48     	; 0x4d18 <itoa+0x3a>
    4ce8:	45 32       	cpi	r20, 0x25	; 37
    4cea:	b4 f4       	brge	.+44     	; 0x4d18 <itoa+0x3a>
    4cec:	4a 30       	cpi	r20, 0x0A	; 10
    4cee:	29 f4       	brne	.+10     	; 0x4cfa <itoa+0x1c>
    4cf0:	97 fb       	bst	r25, 7
    4cf2:	1e f4       	brtc	.+6      	; 0x4cfa <itoa+0x1c>
    4cf4:	90 95       	com	r25
    4cf6:	81 95       	neg	r24
    4cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfa:	64 2f       	mov	r22, r20
    4cfc:	77 27       	eor	r23, r23
    4cfe:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__udivmodhi4>
    4d02:	80 5d       	subi	r24, 0xD0	; 208
    4d04:	8a 33       	cpi	r24, 0x3A	; 58
    4d06:	0c f0       	brlt	.+2      	; 0x4d0a <itoa+0x2c>
    4d08:	89 5d       	subi	r24, 0xD9	; 217
    4d0a:	81 93       	st	Z+, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	00 97       	sbiw	r24, 0x00	; 0
    4d10:	a1 f7       	brne	.-24     	; 0x4cfa <itoa+0x1c>
    4d12:	16 f4       	brtc	.+4      	; 0x4d18 <itoa+0x3a>
    4d14:	5d e2       	ldi	r21, 0x2D	; 45
    4d16:	51 93       	st	Z+, r21
    4d18:	10 82       	st	Z, r1
    4d1a:	c9 01       	movw	r24, r18
    4d1c:	0c 94 90 26 	jmp	0x4d20	; 0x4d20 <strrev>

00004d20 <strrev>:
    4d20:	dc 01       	movw	r26, r24
    4d22:	fc 01       	movw	r30, r24
    4d24:	67 2f       	mov	r22, r23
    4d26:	71 91       	ld	r23, Z+
    4d28:	77 23       	and	r23, r23
    4d2a:	e1 f7       	brne	.-8      	; 0x4d24 <strrev+0x4>
    4d2c:	32 97       	sbiw	r30, 0x02	; 2
    4d2e:	04 c0       	rjmp	.+8      	; 0x4d38 <strrev+0x18>
    4d30:	7c 91       	ld	r23, X
    4d32:	6d 93       	st	X+, r22
    4d34:	70 83       	st	Z, r23
    4d36:	62 91       	ld	r22, -Z
    4d38:	ae 17       	cp	r26, r30
    4d3a:	bf 07       	cpc	r27, r31
    4d3c:	c8 f3       	brcs	.-14     	; 0x4d30 <strrev+0x10>
    4d3e:	08 95       	ret

00004d40 <__udivmodhi4>:
    4d40:	aa 1b       	sub	r26, r26
    4d42:	bb 1b       	sub	r27, r27
    4d44:	51 e1       	ldi	r21, 0x11	; 17
    4d46:	07 c0       	rjmp	.+14     	; 0x4d56 <__udivmodhi4_ep>

00004d48 <__udivmodhi4_loop>:
    4d48:	aa 1f       	adc	r26, r26
    4d4a:	bb 1f       	adc	r27, r27
    4d4c:	a6 17       	cp	r26, r22
    4d4e:	b7 07       	cpc	r27, r23
    4d50:	10 f0       	brcs	.+4      	; 0x4d56 <__udivmodhi4_ep>
    4d52:	a6 1b       	sub	r26, r22
    4d54:	b7 0b       	sbc	r27, r23

00004d56 <__udivmodhi4_ep>:
    4d56:	88 1f       	adc	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	5a 95       	dec	r21
    4d5c:	a9 f7       	brne	.-22     	; 0x4d48 <__udivmodhi4_loop>
    4d5e:	80 95       	com	r24
    4d60:	90 95       	com	r25
    4d62:	bc 01       	movw	r22, r24
    4d64:	cd 01       	movw	r24, r26
    4d66:	08 95       	ret

00004d68 <_exit>:
    4d68:	f8 94       	cli

00004d6a <__stop_program>:
    4d6a:	ff cf       	rjmp	.-2      	; 0x4d6a <__stop_program>
