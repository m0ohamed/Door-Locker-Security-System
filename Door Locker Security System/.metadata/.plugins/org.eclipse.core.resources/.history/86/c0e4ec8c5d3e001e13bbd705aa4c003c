/***********************************************************************
 *
 *  Author  : Mohamed khaled
 *  Project : Door Locker system
 *  AppL for Control_MCU (Control Micro_controller unit)
 *
 * *********************************************************************/

/*****************************************************************************************
							    Preprocessor '#'
 *****************************************************************************************/

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "../MCAL/uart.h"
#include "../MCAL/twi.h"
#include "../HAL/external_eeprom.h"
#include "../MCAL/Timer1.h"
#include "../HAL/DC_motor.h"
#include "../HAL/Buzzer.h"

#define Arr_Size   5// Arr_Size of array
/*****************************************************************************************
							    Global variables
 *****************************************************************************************/

static uint8 step=0;//variable to control the steps
uint8 TFlag=0;
uint8 arr_pass[Arr_Size];//array to store the password
uint8 arr_confirm[Arr_Size];//array to store the confirm pass
uint8 arr_eeprom[Arr_Size];//to read from the eeprom
uint8 confirm_eeprom[Arr_Size];//the compare array

//Timer object 'timer'
//initial value of the timer counter is 49999
//compare value of timer counter is     50000
//prescaler of timer                    1024
//timer mode                            CTC(compare match)

Timer1_ConfigType Timer={0,35000,FCPU_1024,CTC};

/*****************************************************************************************
 	 	 	 	 	 	 	 	 function prototypes
 *****************************************************************************************/
//compare between arr_pass and arr_confirm   //   return 0 if not match and 1 if match
uint8 pass_match();

//compare between arr_eeprom and confirm_eeprom   //   return 0 if not match and 1 if match
uint8 eeprom_match();

/*
 * Timer callback function
 * stop the timer and return the system to the main flow */
void Motor_End(void);

/*
 * Timer callback function
 * make the motor direction anti clock wise   */
void Motor_ACW(void);

/*
 * Timer callback function
 * stop the Dc Motor */
void Motor_stop(void);

/*
 * Timer callback function
 * start the Motor and make the motor direction clock wise */
void Motor_CW(void);


/******************************************************************************************
 	 	 	 	 	 	 	     Main function
 ******************************************************************************************/
int main(void)
{
	/***************************************initializations***************************************************/

	SREG |=(1<<7);//enable global interrupt

	uint8 i/*for loop parameter*/,match/*to compar two arrays*/,ret;

	UART_ConfigType uart={_8_Bit_Mode,Disabled,_1_Stop_Bit,Rate3};//configuration of uart with 8 bit character Arr_Size ,1 stop bit ,no parity bit and Baud rate 9600

	TWI_ConfigType twi;//configuration for twi with address 0x01 and bit rate 400,000 kbps
	twi.address.address=0x01;//my address is 0x01
	twi.bit_rate.bit_rate=0x02;//bit rate 400 kbps
	UART_init(&uart);//initialize UART with the address of uart object
	TWI_init(&twi);//initialize twi with the address of twi object
	DcMotor_Init();
	BuzzerInit();

	/***********************************************Super Loop************************************************/

	while(1)//super loop
	{//start super loop
		step=UART_recieveByte();//receive the step from HMI_MCU to keep on track
		switch(step)//switch step cases
		{//start switch step
		////////////////////////case 1/////////////////////////////////////
		case 1://case step 1
			for(i=0;i<(Arr_Size-1);i++)//loop in arr_pass
			{//start for arr_pass
				arr_pass[i]=UART_recieveByte();//fill the arr_pass with the password
			}//end for arr_pass

			step=0;//do not come to step 1 again

			break;//break case step 1
			///////////////////////////////////case 2//////////////////////////////////////////
		case 2://case step 2

			for(i=0;i<(Arr_Size-1);i++)//loop in arr_confirm
			{//start for arr_pass
				arr_confirm[i]=UART_recieveByte();//fill the arr_confirm with the password
			}//end for arr_pass
			match=pass_match();//compare two arrays
			UART_sendByte(match);//send 0 if two passwords not matched 1 if matched

			if(match==1)//if the two passwords match
			{//start if match

				EEPROM_writeByte(0x0011,arr_confirm[0]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
				_delay_ms(50);
				EEPROM_writeByte(0x0012,arr_confirm[1]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
				_delay_ms(50);

				EEPROM_writeByte(0x0031,arr_confirm[2]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
				_delay_ms(50);

				EEPROM_writeByte(0x0041,arr_confirm[3]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
				_delay_ms(50);

				EEPROM_writeByte(0x0051,arr_confirm[4]);//write the value of arr_confirm[i] in the address corresponding to address 0x0311
				_delay_ms(50);

			}//end if match
			//for to reset two arrays
			else//if not match
			{//start if not match
				step=0;//no step
			}//end if not match


			break;//break case step 2
			//////////////////////////////////////////////////////////////////////////////////////

		case  3://start case step 3

			for(i=0;i<(Arr_Size-1);i++)//loop in arr_confirm
			{//start for confirm_eeprom
				confirm_eeprom[i]=UART_recieveByte();//fill the confirm_eeprom with the password

			}//end for confirm_eeprom
			//////////////////////////////////////////////
			//////////////////////////////////////////////

			EEPROM_readByte(0x0011,&arr_eeprom[0]);//read the value from address 0x0011  and put it in arr_eeprom[i]
			_delay_ms(50);

			EEPROM_readByte(0x0012,&(arr_eeprom[1]));//read the value from address 0x0012  and put it in arr_eeprom[i]
			_delay_ms(50);

			EEPROM_readByte(0x0031,&(arr_eeprom[2]));//read the value from address 0x0031  and put it in arr_eeprom[i]
			_delay_ms(50);

			EEPROM_readByte(0x0041,&(arr_eeprom[3]));//read the value from address 0x0041  and put it in arr_eeprom[i]
			_delay_ms(50);

			EEPROM_readByte(0x0051,&(arr_eeprom[4]));//read the value from address 0x0051  and put it in arr_eeprom[i]
			_delay_ms(50);

			//////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////

			match=eeprom_match();//compare between two arrays
			UART_sendByte(match);//send the result of compare to HMI_MCU
			step=UART_recieveByte();//now what??
			if(step==4)//now if step =4 open the motor and display unlocking message
			{//start if step=4
				Time1_SetCallBack(Motor_CW);//set the timer callback function to  Motor_CW
				Timer1_Init(&Timer);//start timer
				DcMotor_Rotate(CW,255);//start Dc Motor : direction clockwise and 255 speed full speed
				UART_sendByte(1);//send one to make HMI_ECU display the unlocking message
			}//end if step=4

			else if(step==0)//if step=0 not match turn on buzzer
			{//start if step=0
				step=5;//go to step 5
			}//end of if step=0
			break;///////////////end of case step 3

			/////////////////////////////////////////////////////
			//////////////////////////////////////////////////////
		case 4://///////////////////start of case step 4

			/*        Do Nothing                            */

			break;////////////////////end of case step 4
			///////////////////////////////////////////////////
			//////////////////////////////////////////////////
		case 5 ://start case 5
			/////////////////////////////
			ret=UART_recieveByte();//what now ?

			if(ret==1)//now turn the buzzer on
			{
				BuzzerOn();//buzzer on
			}


			else if(ret==2)//now turn the buzzer off and return to the main step
			{
				step=3;//go to step 3
				BuzzerOff();//buzzer off
			}

			break;//case 5 break

		}//end switch step cases

	}//end super loop
}//end main


/****************************************************************************
 *                          Function Body
 *****************************************************************************/

uint8 pass_match()//fuction to check if the to passwords are match or not
{//start pass_match func
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
	{//start for loop
		if(arr_pass[i] == arr_confirm[i])//if not match
		{//start if not match
			ret= 1;//return false
		}//end if not match
		else{
			ret=0;
			break;
		}
	}//end for loop
	return ret;//return true if matched
}//end pass_match func



uint8 eeprom_match()
{
	uint8 i/*for loop parameter*/,ret;
	for(i=0;i<(Arr_Size-1);i++)//loop in both arr_pass and arr_confirm
	{//start for loop
		if(arr_eeprom[i] == confirm_eeprom[i])//if not match
		{//start if not match
			ret= 1;//return false
		}//end if not match
		else{
			ret=0;
			break;
		}
	}//end for loop
	return ret;//return true if matched
}//end pass_match func

//---------------------------------------callback function----------------------------------------------//

void Motor_End(void)
{
	Timer1_DeInit();//stop the timer
	DcMotor_Rotate(OFF,0);//stop the dc motor
	UART_sendByte(4);//back to the main page
}



void Motor_ACW(void)
{
	TFlag++;
	if(TFlag==1)
	{
		DcMotor_Rotate(A_CW,255);//dc motor direction Anti clockwise and speed 255 full speed
		UART_sendByte(3);//locking message
		Time1_SetCallBack(Motor_End);//set the timer callback function to Motor_End
		TFlag=0;//reset the tflag for the next time

	}}


void Motor_stop(void)
{
	TFlag++;
	if(TFlag==1)
	{
		DcMotor_Rotate(OFF,0);//stop the dc motor
		UART_sendByte(2);//Holding message
		Time1_SetCallBack(Motor_ACW);////set the timer callback function to Motor_ACW
		TFlag=0;//reset the tflag for the next time

	}}


void Motor_CW(void)
{
	TFlag++;
	if(TFlag==1)
	{
		DcMotor_Rotate(CW,255);//dc motor direction clockwise and speed 255 full speed
		UART_sendByte(1);//unlocking message
		Time1_SetCallBack(Motor_stop);//set the timer callback function to Motor_stop
		TFlag=0;//reset the tflag for the next time
	}}

